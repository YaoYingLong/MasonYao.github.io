<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YingLong</title>
  
  <subtitle>虽奔放不羁，但也自我束缚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yaoyinglong.github.io/"/>
  <updated>2019-06-27T09:26:09.588Z</updated>
  <id>http://yaoyinglong.github.io/</id>
  
  <author>
    <name>YaoYingLong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux常用技巧</title>
    <link href="http://yaoyinglong.github.io/Blog/Linux/Linux%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yaoyinglong.github.io/Blog/Linux/Linux常用技巧/</id>
    <published>2019-06-27T09:26:09.588Z</published>
    <updated>2019-06-27T09:26:09.588Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SecureCRT无操作自动登出"><a href="#SecureCRT无操作自动登出" class="headerlink" title="SecureCRT无操作自动登出"></a>SecureCRT无操作自动登出</h3><p><code>echo $TMOUT</code> 查看无操作自动登出时间，将该时间稍微调小一点设置到SecureCRT Session中</p><p><img src="../../../../images/CRT永不超时设置.png" alt="CRT不超时设置"></p><h3 id="SecureCRT文件上传下载"><a href="#SecureCRT文件上传下载" class="headerlink" title="SecureCRT文件上传下载"></a>SecureCRT文件上传下载</h3><p><code>rz</code>：将文件从本地上传到服务器</p><p><code>sz [file1] [file2] [dir/*]</code>：本地从服务器上下载文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;SecureCRT无操作自动登出&quot;&gt;&lt;a href=&quot;#SecureCRT无操作自动登出&quot; class=&quot;headerlink&quot; title=&quot;SecureCRT无操作自动登出&quot;&gt;&lt;/a&gt;SecureCRT无操作自动登出&lt;/h3&gt;&lt;p&gt;&lt;code&gt;echo $TM
      
    
    </summary>
    
      <category term="Linux" scheme="http://yaoyinglong.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yaoyinglong.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Arthas诊断工具</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%9D%82%E8%AE%B0/Arthas%E8%AF%8A%E6%96%AD%E5%B7%A5%E5%85%B7/"/>
    <id>http://yaoyinglong.github.io/Blog/杂记/Arthas诊断工具/</id>
    <published>2019-05-31T16:00:00.000Z</published>
    <updated>2019-06-30T10:18:53.419Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="杂记" scheme="http://yaoyinglong.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="Arthas" scheme="http://yaoyinglong.github.io/tags/Arthas/"/>
    
  </entry>
  
  <entry>
    <title>Hystrix总结</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%A1%86%E6%9E%B6/Spring/Hystrix%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/框架/Spring/Hystrix总结/</id>
    <published>2019-05-25T16:00:00.000Z</published>
    <updated>2019-06-30T10:18:53.420Z</updated>
    
    <content type="html"><![CDATA[<p>在项目中需要对某些接口进行限流和熔断处理，防止由于某些接口资源消耗过大影响到整个的所有接口，防止单独的依赖耗尽资源；对一些依赖服务进行隔离，防止当依赖服务不可用或者响应非常缓慢导致整个应用不可用，阻止故障的连锁反应。过载立即切断并快速失败防止排队。</p><p><img src="../../../../images/框架/hystrix-command-flow-chart.png" alt="Hystrix工作流程"></p><p><strong><code>Hystrix</code></strong>有4种参数配置，优先级由低到高分别为：<strong>内置全局默认值</strong>、<strong>动态全局默认属性</strong>、<strong>内置实例默认值</strong>、<strong>动态配置实例属性</strong>。</p><h3 id="基于编程式"><a href="#基于编程式" class="headerlink" title="基于编程式"></a>基于编程式</h3><p>基于编程式使用<strong><code>Hystrix</code></strong>，只需继承<strong><code>HystrixCommand</code></strong>或<strong><code>HystrixObservableCommand</code></strong>，区别在于<strong><code>HystrixCommand</code></strong>命令逻辑卸载<strong><code>run()</code></strong>方法中，且由新创建线程执行，一个实例只能向调用程序发送单条数据。<strong><code>HystrixObservableCommand</code></strong>命令逻辑写在<strong><code>construct()</code></strong>方法中，由调用程序线程执行，一个实例可以顺序发送多条数据。</p><p><strong><code>HystrixCommand</code></strong>命令有<strong><code>execute()</code></strong>、<strong><code>queue()</code></strong>、<strong><code>observe()</code></strong>、t<strong><code>oObservable()</code></strong>4个方法来触发执行<strong><code>run()</code></strong>方法。<strong><code>HystrixObservableCommand</code></strong>命令只有<strong><code>observe()</code></strong>、t<strong><code>oObservable()</code></strong>2个方法来触发执行<strong><code>construct()</code></strong>方法。</p><ul><li><strong><code>execute()</code></strong> 以<strong>同步堵塞</strong>方式执行</li><li><strong><code>queue()</code></strong> 以<strong>异步非堵塞</strong>方式执行，通过<strong><code>Future.get()</code></strong>获取<strong><code>run()</code></strong>返回结果</li><li><strong><code>observe()</code></strong> <strong>事件注册前</strong>执行<strong><code>run()</code></strong>或<strong><code>construct()</code></strong>方法</li><li><strong><code>toObservable()</code></strong> <strong>事件注册后</strong>执行<strong><code>run()</code></strong>或<strong><code>construct()</code></strong>方法</li></ul><p>继承<strong><code>HystrixCommand</code></strong>实现自己的<strong><code>Command</code></strong>，在构造方法中配置需要的参数，后续章节对具体配置进行详细描述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">JSONObject</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> DataRequest request;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">HelloWorldCommand</span><span class="params">(DataRequest request)</span> </span>&#123;</span><br><span class="line">        HystrixCommandProperties.Setter propertiesSetter = HystrixCommandProperties.Setter()</span><br><span class="line">                .withCircuitBreakerEnabled(<span class="keyword">true</span>)</span><br><span class="line">                .withRequestCacheEnabled(<span class="keyword">false</span>)</span><br><span class="line">                .withRequestLogEnabled(<span class="keyword">false</span>)</span><br><span class="line">                .withExecutionIsolationStrategy()</span><br><span class="line">                .withExecutionIsolationSemaphoreMaxConcurrentRequests(<span class="number">80</span>)</span><br><span class="line">                .withFallbackIsolationSemaphoreMaxConcurrentRequests(<span class="number">80</span>)</span><br><span class="line">                .withCircuitBreakerRequestVolumeThreshold(<span class="number">30</span>)</span><br><span class="line">                .withCircuitBreakerSleepWindowInMilliseconds(<span class="number">5000</span>)</span><br><span class="line">                .withExecutionTimeoutInMilliseconds(timeOut);</span><br><span class="line">        </span><br><span class="line">        HystrixCommandGroupKey groupKey = HystrixCommandGroupKey.Factory.asKey(<span class="string">"requestData"</span>);</span><br><span class="line">        HystrixCommand.Setter setter = HystrixCommand.Setter.withGroupKey(groupKey)</span><br><span class="line">                .andCommandKey(HystrixCommandKey.Factory.asKey(<span class="string">"data-"</span>+ Id))</span><br><span class="line">                .andCommandPropertiesDefaults(propertiesSetter)</span><br><span class="line">                .andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(<span class="string">"requestData"</span>));</span><br><span class="line">        <span class="keyword">super</span>(setter);</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JSONObject <span class="title">run</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> request.executeRequest();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> JSONObject <span class="title">getFallback</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<strong><code>HystrixCommand</code></strong>的执行方法发起实际请求，<strong><code>execute()</code></strong>方法同步调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HelloWorldCommand command = <span class="keyword">new</span> HelloWorldCommand(request);</span><br><span class="line">JSONObject result = command.execute();</span><br></pre></td></tr></table></figure><p><strong><code>queue()</code></strong>方法异步调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HelloWorldCommand command = <span class="keyword">new</span> HelloWorldCommand(request);</span><br><span class="line">Future&lt;JSONObject&gt; future = command.queue();</span><br><span class="line">JSONObject result = future.get(<span class="number">10000</span>, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure><p><strong><code>observe()</code></strong>方法，注册观察者事件订阅，事件注册前执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;JSONObject&gt; observable = <span class="keyword">new</span> HelloWorldCommand(request).observe();</span><br><span class="line">observable.subscribe(result1 -&gt; System.out.println(<span class="string">"Observable call--&gt; "</span> + result1));</span><br></pre></td></tr></table></figure><p><strong><code>observe()</code></strong>方法，注册完整执行生命周期事件，事件注册前执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;JSONObject&gt; observable = <span class="keyword">new</span> HelloWorldCommand(request).observe();</span><br><span class="line">observable.subscribe(<span class="keyword">new</span> Observer&lt;JSONObject&gt;() &#123;</span><br><span class="line">    <span class="comment">//onNext/onError完成之后最后回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当产生异常时回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结果后回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(JSONObject s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong><code>toObservable()</code></strong>方法，注册观察者事件订阅，事件注册后执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Observable&lt;JSONObject&gt; toObservable = <span class="keyword">new</span> HelloWorldCommand(request).toObservable();</span><br><span class="line">toObservable.subscribe(<span class="keyword">new</span> Observer&lt;JSONObject&gt;() &#123;</span><br><span class="line">    <span class="comment">//onNext/onError完成之后最后回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当产生异常时回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取结果后回调</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(JSONObject s)</span> </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="基于注解式"><a href="#基于注解式" class="headerlink" title="基于注解式"></a>基于注解式</h3><p>注解使用方式和编程式大致相同，只是属性参数配置都注解化了。三个核心注解分别为<strong><code>@HystrixCommand</code></strong>、<strong><code>@HystrixProperty</code></strong>和<strong><code>@HystrixCollapser</code></strong>。</p><p>注解同步执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotation</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataClient dataClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</span><br><span class="line">            commandKey = <span class="string">"helloWorldHystrixAnnotationSync"</span>, fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">executeRequest</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataClient.retrieveData(param);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解异步执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotationAsync</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataClient dataClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</span><br><span class="line">            commandKey = <span class="string">"helloWorldHystrixAnnotationAsync"</span>, fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Future&lt;JSONObject&gt; <span class="title">run</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;JSONObject&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> JSONObject <span class="title">invoke</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> dataClient.retrieveData(param);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解订阅执行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHystrixAnnotationObervable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataClient dataClient;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@HystrixCommand</span>(groupKey = <span class="string">"helloWorldHystrixAnnotation"</span>,</span><br><span class="line">            commandKey = <span class="string">"helloWorldHystrixAnnotationObervable"</span>, fallbackMethod = <span class="string">"fallback"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;JSONObject&gt; <span class="title">run</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.create(subscriber -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!subscriber.isUnsubscribed()) &#123;</span><br><span class="line">                    subscriber.onNext(dataClient.retrieveData(param));</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                subscriber.onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JSONObject <span class="title">fallback</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="触发fallback方法的情况"><a href="#触发fallback方法的情况" class="headerlink" title="触发fallback方法的情况"></a>触发fallback方法的情况</h3><ul><li>执行抛出异常</li><li>执行超时</li><li>断路器打开，不尝试执行</li><li>线程池拒绝，不尝试执行</li><li>信号量拒绝，不尝试执行</li></ul><h3 id="Hystrix监控界面参数"><a href="#Hystrix监控界面参数" class="headerlink" title="Hystrix监控界面参数"></a>Hystrix监控界面参数</h3><p><img src="../../../../images/框架/hystrix-dashboard-参数说明.png" alt></p><h3 id="基础属性配置"><a href="#基础属性配置" class="headerlink" title="基础属性配置"></a>基础属性配置</h3><p><strong><code>CommandGroup</code></strong>：每个命令最少配置的必选参数，不指定<strong><code>ThreadPoolKey</code></strong>的情况下，用于指定线程池的隔离。</p><ul><li>实例配置：<strong><code>HystrixCommand.Setter().withGroupKey(HystrixCommandGroupKey.Factory.asKey(&quot;groupKey&quot;));</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(groupKey = &quot;groupKey&quot;）</code></strong></li></ul><p><strong><code>CommandKey</code></strong>：依赖命名，一般每个<strong><code>CommandKey</code></strong>代表一个依赖抽象，相同依赖使用相同<strong><code>CommandKey</code></strong>名称，依赖隔离的根本就是对<strong>相同<code>CommandKey</code></strong>的依赖做隔离，不同的依赖隔离最好使用不同的线程池。</p><ul><li>实例配置：<strong><code>HystrixCommand.Setter().andCommandKey(HystrixCommandKey.Factory.asKey(&quot;commandKey&quot;));</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandKey = &quot;commandKey&quot;)</code></strong></li></ul><p><strong><code>ThreadPoolKey</code></strong>：依赖隔离使用的线程池的键值，对同一业务依赖隔离用<strong><code>CommandGroup</code></strong>做区分，对同一依赖的不同远程调用，使用<strong><code>ThreadPoolKey</code></strong>做隔离区分，业务相同的组，需要在资源上做隔离时，使用<strong><code>ThreadPoolKey</code></strong>区分。不同的<strong><code>ThreadPoolKey</code></strong>建议使用不同的<strong><code>CommandKey</code></strong>。</p><ul><li>实例配置：<strong><code>HystrixCommand.Setter().andThreadPoolKey(HystrixThreadPoolKey.Factory.asKey(&quot;threadPoolKey&quot;))</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolKey = &quot;threadPoolKey&quot;)</code></strong></li></ul><h3 id="命令属性配置"><a href="#命令属性配置" class="headerlink" title="命令属性配置"></a>命令属性配置</h3><p><strong><code>execution.isolation.strategy</code></strong>：用于设置<strong><code>HystrixCommand</code></strong>执行的隔离策略，支持<strong><code>THREAD</code>线程池隔离</strong>单独线程执行并发数受限于线程池大小和<strong><code>SEMAPHORE</code>信号量隔离</strong>在<strong>调用线程中执行</strong>通过信号量来限制并发数。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withExecutionIsolationStrategy(ExecutionIsolationStrategy.THREAD)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;execution.isolation.strategy&quot;,value = &quot;SEMAPHORE&quot;)})</code></strong></li><li>默认值：<strong><code>THREAD</code></strong></li></ul><p><strong><code>execution.timeout.enabled</code></strong>：是否启用超时限制。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withExecutionTimeoutEnabled(true)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;execution.timeout.enabled&quot;, value = &quot;true&quot;)})</code></strong></li><li>默认值：<strong><code>true</code></strong></li></ul><p><strong><code>execution.isolation.thread.timeoutInMilliseconds</code></strong>：执行超时时间，超时会作用在<strong><code>HystrixCommand.queue()</code></strong>，即使没有调用<strong><code>get()</code></strong>获得<strong><code>Future</code></strong>对象。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withExecutionTimeoutInMilliseconds(2000)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;execution.isolation.thread.timeoutInMilliseconds&quot;, value = &quot;2000&quot;)})</code></strong></li><li>默认值：<strong><code>1000ms</code></strong></li></ul><p><strong><code>execution.isolation.thread.interruptOnTimeout</code></strong>：使用线程隔离时，对执行超时的线程是否被中断。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withExecutionIsolationThreadInterruptOnTimeout(true)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;execution.isolation.thread.interruptOnTimeout&quot;, value = &quot;true&quot;)})</code></strong></li><li>默认值：<strong><code>true</code></strong>（<strong><code>THREAD</code></strong>模式有效）</li></ul><p><strong><code>execution.isolation.semaphore.maxConcurrentRequests</code></strong>：使用信号量策略时，允许的最大并发请求数。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withExecutionIsolationSemaphoreMaxConcurrentRequests(50)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;execution.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;50&quot;)})</code></strong></li><li>默认值：<strong><code>10</code></strong>（<strong><code>SEMAPHORE</code></strong>模式有效）</li></ul><h4 id="Fallback"><a href="#Fallback" class="headerlink" title="Fallback"></a>Fallback</h4><p><strong><code>fallback.enabled</code></strong>：当接口异常或者拒绝时，是否调用<strong><code>Fallback</code></strong>方法处理，线程池和信号量策略都支持。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withFallbackEnabled(true)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;fallback.enabled&quot;, value = &quot;true&quot;)})</code></strong></li><li>默认值：<strong><code>true</code></strong></li></ul><p><strong><code>fallback.isolation.semaphore.maxConcurrentRequests</code></strong>：<strong><code>Fallback</code></strong>方法最大并发数。超过该配置的请求将被拒绝，若没有实现回退，则抛出异常。线程池和信号量策略都支持。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withFallbackIsolationSemaphoreMaxConcurrentRequests(20)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;fallback.isolation.semaphore.maxConcurrentRequests&quot;, value = &quot;20&quot;)})</code></strong></li><li>默认值：<strong><code>10</code></strong>（<strong><code>SEMAPHORE</code></strong>模式有效）</li></ul><p><strong><code>circuitBreaker.enabled</code></strong>：断路器是否生效。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerEnabled(true)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.enabled&quot;, value = &quot;true&quot;)})</code></strong></li><li>默认值：<strong><code>true</code></strong></li></ul><h4 id="断路器"><a href="#断路器" class="headerlink" title="断路器"></a>断路器</h4><p><strong><code>circuitBreaker.requestVolumeThreshold</code></strong>：滚动窗口中，打开断路器的最少请求数。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerRequestVolumeThreshold(20)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.requestVolumeThreshold&quot;,value = &quot;20&quot;)})</code></strong></li><li>默认值：<strong><code>20</code></strong></li></ul><p><strong><code>circuitBreaker.sleepWindowInMilliseconds</code></strong>：拒绝请求到再次不被拒绝的请求时间间隔。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerSleepWindowInMilliseconds(10)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.sleepWindowInMilliseconds&quot;, value = &quot;5000&quot;)})</code></strong></li><li>默认值：<strong><code>5000ms</code></strong></li></ul><p><strong><code>circuitBreaker.errorThresholdPercentage</code></strong>：断路器启动回退逻辑的错误比率。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerErrorThresholdPercentage(50)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.errorThresholdPercentage&quot;, value = &quot;50&quot;)})</code></strong></li><li>默认值：<strong><code>50</code></strong></li></ul><p><strong><code>circuitBreaker.forceClosed</code></strong>：强制断路器进入关闭状态，将允许所有的请求，无视错误率。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerForceClosed(false)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.forceClosed&quot;, value = &quot;false&quot;)})</code></strong></li><li>默认值：<strong><code>false</code></strong></li></ul><p><strong><code>circuitBreaker.forceOpen</code></strong>：强制断路器进入打开状态，将会拒绝所有的请求。优先级比<strong><code>circuitBreaker.forceClosed</code></strong>高。</p><ul><li>实例配置：<strong><code>HystrixCommandProperties.Setter().withCircuitBreakerForceOpen(false)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(commandProperties = {@HystrixProperty(name = &quot;circuitBreaker.forceOpen&quot;, value = &quot;false&quot;)})</code></strong></li><li>默认值：<strong><code>false</code></strong></li></ul><h4 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h4><p><strong><code>hystrix.threadpool.default.coreSize</code></strong>：设置核心线程池大小，与<strong><code>ThreadPoolExecutor</code></strong>的<strong><code>coreSize</code></strong>的含义不一样</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withCoreSize(10)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;coreSize&quot;, value = &quot;10&quot;)})</code></strong></li><li>默认值：<strong><code>10</code></strong></li></ul><p><strong><code>hystrix.threadpool.default.maximumSize</code></strong>：设置线程池最大值，不开始拒绝<strong><code>HystrixCommand</code></strong>的情况下支持的最大并发数，设置<strong><code>allowMaximumSizeToDrivergeFromCoreSize</code></strong>后生效。</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withMaximumSize(10)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;maximumSize&quot;, value = &quot;10&quot;)})</code></strong></li><li>默认值：<strong><code>10</code></strong></li></ul><p><strong><code>hystrix.threadpool.default.maxQueueSize</code></strong>：最大的队列值，若设置为<strong><code>-1</code></strong>使用<strong><code>SynchronousQueue</code></strong>，否则使用<strong><code>LinkedBlockingQueue</code></strong>。</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withMaxQueueSize(10)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;maxQueueSize&quot;, value = &quot;10&quot;)})</code></strong></li><li>默认值：<strong><code>-1</code></strong></li></ul><p><strong><code>hystrix.threadpool.default.queueSizeRejectionThreshold</code></strong>：设置队列拒绝的阈值，<strong><code>maxQueueSize</code></strong>值为<strong><code>-1</code></strong>时，该属性不生效。</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withQueueSizeRejectionThreshold(5)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;queueSizeRejectionThreshold&quot;, value = &quot;5&quot;)})</code></strong></li><li>默认值：<strong><code>5</code></strong></li></ul><p><strong><code>hystrix.threadpool.default.keepAliveTimeMinutes</code></strong>：设置存活时间，单位分钟，如果<strong><code>coreSize</code></strong>小于<strong><code>maximumSize</code></strong>，则该属性控制一个线程从使用完成到被释放的时间。</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withKeepAliveTimeMinutes(1)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;keepAliveTimeMinutes&quot;, value = &quot;1&quot;)})</code></strong></li><li>默认值：<strong><code>1</code></strong></li></ul><p><strong><code>hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize</code></strong> ：允许<strong><code>maximumSize</code></strong>起作用。</p><ul><li>实例配置：<strong><code>HystrixThreadPoolProperties.Setter().withAllowMaximumSizeToDivergeFromCoreSize(false)</code></strong></li><li>注解配置：<strong><code>@HystrixCommand(threadPoolProperties = {@HystrixProperty(name = &quot;allowMaximumSizeToDivergeFromCoreSize&quot;, value = &quot;false&quot;)})</code></strong></li><li>默认值：<strong><code>false</code></strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在项目中需要对某些接口进行限流和熔断处理，防止由于某些接口资源消耗过大影响到整个的所有接口，防止单独的依赖耗尽资源；对一些依赖服务进行隔离，防止当依赖服务不可用或者响应非常缓慢导致整个应用不可用，阻止故障的连锁反应。过载立即切断并快速失败防止排队。&lt;/p&gt;
&lt;p&gt;&lt;img 
      
    
    </summary>
    
      <category term="框架" scheme="http://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
      <category term="Spring" scheme="http://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/Spring/"/>
    
    
      <category term="Hystrix，限流，熔断，降级" scheme="http://yaoyinglong.github.io/tags/Hystrix%EF%BC%8C%E9%99%90%E6%B5%81%EF%BC%8C%E7%86%94%E6%96%AD%EF%BC%8C%E9%99%8D%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>Java8时间及日期</title>
    <link href="http://yaoyinglong.github.io/Blog/Java/%E5%9F%BA%E7%A1%80/%E6%97%B6%E9%97%B4%E5%8F%8A%E6%97%A5%E6%9C%9F%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/Java/基础/时间及日期总结/</id>
    <published>2019-05-21T16:00:00.000Z</published>
    <updated>2019-06-30T10:18:53.418Z</updated>
    
    <content type="html"><![CDATA[<p>旧的日期类是可变且线程不安全的，<strong><code>Java8</code></strong>中引入了一套全新的日期<strong><code>API</code></strong>，<strong><code>java.time</code></strong>包中的类是不可变且线程安全。</p><h3 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h3><p><strong><code>java.time.LocalDate</code></strong>是用来表示日期的，不包含具体的时间，默认按照<strong><code>yyyy-MM-dd</code></strong>格式。</p><ul><li>获取当前日期：<code>LocalDate.now()</code></li><li>根据年月日构建日期：<code>LocalDate.of(2018, 01, 30)</code></li><li>字符串转换日期：<code>LocalDate.parse(&quot;2018-01-30&quot;)</code>，也可以自定义格式，如：<code>LocalDate.parse(&quot;2018年01月30日&quot;, DateTimeFormatter.ofPattern(&quot;uuuu年MM月dd日&quot;))</code></li><li>本月第一天：<code>localDate.with(TemporalAdjusters.firstDayOfMonth())</code></li><li>本月第二天：<code>localDate.withDayOfMonth(2)</code></li><li>本月最后一天：<code>localDate.with(TemporalAdjusters.lastDayOfMonth())</code></li><li>明天：<code>localDate.plusDays(1L)</code></li><li>昨天：<code>localDate.minusDays(1L)</code></li><li>获取本年第120天：<code>localDate.withDayOfYear(120)</code></li><li>计算两个日期间的天数：<code>localDate.until(localDate1, ChronoUnit.DAYS)</code></li><li>计算两个日期间的周数：<code>localDate.until(localDate1, ChronoUnit.WEEKS)</code></li></ul><h3 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h3><p><strong><code>LocalTime</code></strong>与<strong><code>LocalDate</code></strong>相反，其仅表示时间，不包含日期。</p><ul><li>获取当前时间（包含毫秒数）：<code>LocalTime.now()</code></li><li>构建指定时间：<code>LocalTime.of(12, 15, 30)</code></li><li>获取指定时间（不包含毫秒数）：<code>localTime.withNano(0)</code></li><li>字符串转为时间<ul><li><code>LocalTime.parse(&quot;12:15:30&quot;)</code></li><li><code>LocalTime.parse(&quot;12:15:30.233&quot;)</code></li><li><code>LocalTime.parse(&quot;12:15&quot;)</code></li><li><code>LocalTime.parse(&quot;12时15分30秒&quot;, DateTimeFormatter.ofPattern(&quot;HH时mm分ss秒&quot;))</code></li></ul></li></ul><h3 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h3><p><strong><code>LocalDateTime</code></strong>和旧的<strong><code>java.util.Date</code></strong>类是，既包含日期，又包含时间，且经常与<strong><code>DateTimeFormatter</code></strong>一起使用。</p><ul><li>获取当前年月日时分秒：<code>LocalDateTime.now()</code></li><li>通过<strong><code>LocalDate</code></strong>和<strong><code>LocalTime</code></strong>构建：<code>LocalDateTime.of(LocalDate.now(), LocalTime.now())</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;旧的日期类是可变且线程不安全的，&lt;strong&gt;&lt;code&gt;Java8&lt;/code&gt;&lt;/strong&gt;中引入了一套全新的日期&lt;strong&gt;&lt;code&gt;API&lt;/code&gt;&lt;/strong&gt;，&lt;strong&gt;&lt;code&gt;java.time&lt;/code&gt;&lt;/strong&gt;包中
      
    
    </summary>
    
      <category term="Java" scheme="http://yaoyinglong.github.io/categories/Java/"/>
    
      <category term="基础" scheme="http://yaoyinglong.github.io/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Java8" scheme="http://yaoyinglong.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>方法调用</title>
    <link href="http://yaoyinglong.github.io/Blog/Java/VM/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
    <id>http://yaoyinglong.github.io/Blog/Java/VM/方法调用/</id>
    <published>2019-03-13T16:00:00.000Z</published>
    <updated>2019-07-15T12:32:20.456Z</updated>
    
    <content type="html"><![CDATA[<p><strong>方法调用并不等同于方法执行</strong>，方法调用阶段<strong>唯一任务是确定被调用方法的版本</strong>，暂时<strong>不涉及方法内部具体运行过程</strong>。程序运行时，进行方法调用是<strong>最普遍最频繁</strong>的操作。</p><p>Class文件编译过程中<strong>不包含传统编译中的连接步骤</strong>，一切方法的调用在Class文件中存储的都只是<strong>符号引用</strong>，而非方法在实际运行内存布局中的入口地址（<strong>直接引用</strong>）。该特性带来了<strong>强大的动态扩展性</strong>，但同时使得方法调用过程变得<strong>相对复杂</strong>，需要在<strong>类加载期间</strong>、甚至<strong>运行期间</strong>才能确定目标方法的<strong>直接引用</strong>。</p><h3 id="解析调用"><a href="#解析调用" class="headerlink" title="解析调用"></a>解析调用</h3><p>所有方法调用中的<strong>目标方法</strong>在<strong><code>Class</code>文件</strong>里面都是一个<strong>常量池</strong>中的<strong>符号引用</strong>，在类加载的解析阶段，会将其中在<strong>编译期可知，运行期不可变</strong>的方法的<strong>符号引用</strong>转化为<strong>直接引用</strong>。</p><p>编译器可知，运行期不可变的方法主要包括：<strong>静态方法</strong>、<strong>私有方法</strong>、<strong>实例构造器</strong>、<strong>父类方法</strong>、<strong><code>final</code>修饰的方法</strong>。这类方法被称为<strong>非虚方法</strong>，其他方法称为<strong>虚方法</strong>。</p><p>虚拟机提供<strong><code>5</code>条</strong>方法调用字节码指令，前四条指令的分派逻辑是固化在Java虚拟机内部的，而<strong><code>invokedynamic</code></strong>的分派逻辑是由用户所设定的引导方法决定的：</p><ul><li><strong><code>invokestatic</code></strong>：调用<strong>静态方法</strong></li><li><strong><code>invokespecial</code></strong>：调用<strong>实例构造器<code>&lt;init&gt;</code></strong>方法、<strong>私有</strong>方法、<strong>父类</strong>方法</li><li><strong><code>invokevirtual</code></strong>：调用<strong>所有的虚方法</strong>，以及<strong><code>final</code>修饰的方法</strong>。</li><li><strong><code>invokeinterface</code></strong>：调用<strong>接口方法</strong>，在运行时再确定一个实现此接口的对象</li><li><strong><code>invokedynamic</code></strong>：在<strong>运行时动态解析出调用点限定符所引用的方法</strong>，然后再执行该方法</li></ul><p>只要能被<strong><code>invokestatic</code></strong>和<strong><code>invokespecial</code></strong>指令调用的方法，都可以<strong>在解析阶段确定唯一的调用版本</strong>，包括了<strong>静态方法</strong>、<strong>私有方法</strong>、<strong>实例构造器</strong>、<strong>父类方法</strong>4类。</p><p><strong>解析调用</strong>一定是一个<strong>静态过程</strong>，编译器就可以完全确定，在类装载的解析阶段就会把涉及的<strong>符号引用</strong>全部转变为可确定的<strong>直接引用</strong>，不会延迟到运行期去完成。</p><h3 id="分派调用"><a href="#分派调用" class="headerlink" title="分派调用"></a>分派调用</h3><p>分派调用可能是<strong>静态</strong>的也可能是<strong>动态</strong>的，根据<strong>宗量</strong>（<strong>方法的接收者</strong>和<strong>方法的参数</strong>统称为方法的宗量）分为<strong>单分派</strong>和<strong>多分派</strong>，两类分派方式两两组合就构成了：静态单分派、静态多分派、动态单分派、动态多分派。</p><p>分派的调用过程其实就是Java<strong>多态</strong>的实现原理，如<strong>重写</strong>和<strong>重载</strong>在Java虚拟机中是如何实现的。</p><h4 id="静态分派"><a href="#静态分派" class="headerlink" title="静态分派"></a>静态分派</h4><p>说到静态分派，首先先说一下变量的<strong>静态类型</strong>或者叫<strong>外观类型</strong>，以及变量的<strong>实际类型</strong>。假设有抽象类Human和其实现类Man、Woman，若<strong><code>Human man = new Man();</code></strong>,则<strong><code>Human</code></strong>是man的<strong>静态类型</strong>，<strong><code>Man</code></strong>是其<strong>实际类型</strong>。</p><p>静态类型和实际类型在程序中都可能发生一些变化，<strong>静态类型</strong>的变化仅仅在<strong>使用时发生</strong>，变量<strong>本身的静态类型不会被改变</strong>，且<strong>最终的静态类型是在编译器可知</strong>的；<strong>实际类型</strong>的变化结果在<strong>运行期才可以确定</strong>，编译器在编译程序时并不知道对象的实际类型是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际类型的变化</span></span><br><span class="line">Human man = <span class="keyword">new</span> Man();</span><br><span class="line">man = Woman();</span><br><span class="line"><span class="comment">// 静态类型的变化</span></span><br><span class="line">sr.sayHello((Man) man);</span><br><span class="line">sr.sayHello((Woman) man);</span><br></pre></td></tr></table></figure><p>虚拟机（编译器）在调用<strong>重载</strong>（<strong><code>Overload</code></strong>）时是通过参数的<strong>静态类型</strong>而不是<strong>实际类型</strong>作为判定依据，在<strong>编译阶段<code>Javac</code></strong>编译器会根据参数的<strong>静态类型</strong>来确定具体调用哪个重载版本的方法。</p><p><strong>所有依赖 静态类型来定位方法执行版本的分派动作称为静态分派，静态分派的典型应用是方法重载</strong>。</p><p>静态分派发生在<strong>编译阶段</strong>，因此确定静态分派的动作实际上<strong>不是由虚拟机来执行的</strong>，编译器虽然能确定方法的重载版本，但很多情况下这个<strong>重载版本并不唯一</strong>，往往只能确定一个<strong>更加合适的版本</strong>，主要原因是<strong>字面量不需要定义</strong>，所以<strong>字面量是没有显式的静态类型</strong>，其静态类型只能通过语言上的规则去理解和推断。</p><h4 id="动态分派"><a href="#动态分派" class="headerlink" title="动态分派"></a>动态分派</h4><p><strong>动态分派</strong>与<strong>多态</strong>的另一个重要体现<strong>重写</strong>（<strong><code>Override</code></strong>）有着密切的关联。</p><p><strong>动态分派</strong>其实就是<strong><code>invokevirtual</code></strong>指令的<strong>多态查找</strong>的过程。由于该指令第一步就是在运行其确定接收者的实际类型，所以对于不同的调用，该指令会将常量池中的类方法符号引用解析到不同的直接引用上，该过程就是Java中方法重写的本质。</p><p>我们将这种在<strong>运行期</strong>根据<strong>实际类型</strong>确定<strong>方法执行版本</strong>的分派过程称为<strong>动态分派</strong>。</p><p><strong>解析</strong>和<strong>分派</strong>这两者之间的关系并<strong>不是二选一的排他关系</strong>，它们是在<strong>不同层次</strong>上去<strong>筛选</strong>、<strong>确定</strong>目标方法的过程。</p><h4 id="单分派与多分派"><a href="#单分派与多分派" class="headerlink" title="单分派与多分派"></a>单分派与多分派</h4><p>单分派是根据一个宗量对目标方法进行选择，多分派是根据多个宗量对目标方法进行选择。到目前为止可以说Java语言是一门<strong>静态多分派、动态单分派</strong>的语言。</p><h4 id="虚拟机动态分派的实现"><a href="#虚拟机动态分派的实现" class="headerlink" title="虚拟机动态分派的实现"></a>虚拟机动态分派的实现</h4><p>由于动态分派是非常频繁的动作，而且动态分派的方法版本的选择过程需要<strong>运行时</strong>在类的<strong>方法元数据中搜索合适的目标方法</strong>，在虚拟机的实际实现中基于性能考虑会对其进行一些优化，最常用的<strong>稳定优化</strong>手段是为类<strong>在方法区中建立一个虚方法表或接口方法表</strong>，<strong>使用虚方法表索引来代替元数据查找提高性能</strong>。</p><p>虚方法表中存放着各个方法的<strong>实际入口地址</strong>。具有<strong>相同签名</strong>的方法，在之类和父类的虚方法表中都应当<strong>具有相同的索引序号</strong>，在类型变换时便于查找。</p><p>虚拟机除了使用方法表之外，在条件允许下，还会使用<strong>内联缓存</strong>和基于<strong>类型继承关系分析技术的守护内联</strong>两种非稳定的优化手段来获取更高的性能。</p><h3 id="动态类型语言支持"><a href="#动态类型语言支持" class="headerlink" title="动态类型语言支持"></a>动态类型语言支持</h3><p>动态类型语言的<strong>关键特征</strong>是它的<strong>类型检查</strong>的<strong>主体过程是在运行期而不是编译期</strong>。<strong>变量无类型而变量值才有类型</strong>这也是动态语言的一个重要特征。</p><p><strong>静态类型</strong>语言在编译期确定类型，可以提供<strong>严谨的类型检查</strong>，与类型相关的问题在编码时就能及时发现，<strong>利于稳定性及代码达到更大规模</strong>；</p><p><strong>动态类型</strong>语言在运行期确定类型，为开发人员提供<strong>更大的灵活性</strong>，代码会更加<strong>清晰简单</strong>，也意味着<strong>高效的开发效率</strong>。</p><h4 id="Reflection与MethodHandler"><a href="#Reflection与MethodHandler" class="headerlink" title="Reflection与MethodHandler"></a>Reflection与MethodHandler</h4><p><strong><code>JDK7</code></strong>提供了<strong><code>java.lang.invoke</code></strong>包，其主要目的是用于提供一种新的动态确定目标方法的机制，称为<strong><code>MethodHandler</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    Object obj = System.currentTimeMillis() % <span class="number">2</span> == <span class="number">0</span> ? System.out : <span class="keyword">new</span> ClassA();</span><br><span class="line"></span><br><span class="line">    MethodType methodType = MethodType.methodType(<span class="keyword">void</span>.class, String.class);</span><br><span class="line">    MethodHandle methodHandle = MethodHandles.lookup().findVirtual(obj.getClass(), <span class="string">"println"</span>, methodType).bindTo(obj);</span><br><span class="line"></span><br><span class="line">    methodHandle.invokeExact(<span class="string">"param"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>MethodHandler</code></strong>的使用方法与<strong><code>Reflection</code></strong>有众多相似之处，以及以下区别：</p><ul><li>本质上<strong><code>MethodHandler</code></strong>和<strong><code>Reflection</code></strong>都是在<strong>模拟方法调用</strong>，<strong><code>Reflection</code></strong>是在模拟<strong>Java层次</strong>的方法调用，<strong><code>MethodHandler</code></strong>是在模拟<strong>字节码层次</strong>的方法调用。</li><li><strong><code>Reflection</code></strong>中的<strong><code>Method</code></strong>对象远比<strong><code>MethodHandler</code></strong>中的<strong><code>MethodHandler</code></strong>对象所包含的信息多。<strong><code>Method</code></strong>包含了<strong>方法签名、描述符、方法属性表中各种属性、以及执行权限</strong>等运行期信息。而<strong><code>MethodHandler</code></strong>仅包含与<strong>执行该方法相关</strong>的信息。</li><li><strong><code>MethodHandler</code></strong>理论上可以采用类似虚拟机在字节码上做的各种优化思路。而<strong><code>Reflection</code></strong>不行。</li><li><strong><code>Reflection</code></strong>仅支持Java语言，<strong><code>MethodHandler</code></strong>支持所有语言。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;方法调用并不等同于方法执行&lt;/strong&gt;，方法调用阶段&lt;strong&gt;唯一任务是确定被调用方法的版本&lt;/strong&gt;，暂时&lt;strong&gt;不涉及方法内部具体运行过程&lt;/strong&gt;。程序运行时，进行方法调用是&lt;strong&gt;最普遍最频繁&lt;/stron
      
    
    </summary>
    
      <category term="Java" scheme="http://yaoyinglong.github.io/categories/Java/"/>
    
      <category term="VM" scheme="http://yaoyinglong.github.io/categories/Java/VM/"/>
    
    
      <category term="JVM" scheme="http://yaoyinglong.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>运行时栈帧结构</title>
    <link href="http://yaoyinglong.github.io/Blog/Java/VM/%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7%E7%BB%93%E6%9E%84/"/>
    <id>http://yaoyinglong.github.io/Blog/Java/VM/运行时栈帧结构/</id>
    <published>2019-03-10T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>栈帧</strong>是用于支持虚拟机进行<strong>方法调用</strong>和<strong>方法执行</strong>的<strong>数据结构</strong>，是虚拟机<strong>运行时数据区</strong>中的虚拟机栈的栈元素。每个方法从<strong>调用开始</strong>至<strong>执行完成</strong>的过程，都对应一个<strong>栈帧</strong>在虚拟机栈中从<strong>入栈到出栈</strong>的过程。</p><p>栈帧存储了方法的<strong>局部变量表</strong>、<strong>操作数栈</strong>、<strong>动态连接</strong>、<strong>方法返回地址</strong>和一些<strong>额外的附加信息</strong>。在编译程序代码时，栈帧中需要<strong>多大的局部变量表</strong>、<strong>多深的操作数栈</strong>都已完全确定，并写入到方法表的<strong><code>Code</code>属性</strong>中了。因此栈帧需要分配多少内存，<strong>不受运行期变量数据影响</strong>，仅取决于具体的虚拟机实现。</p><p>对于执行引擎来说，在活动线程中，只有<strong>当前栈帧</strong>（位于<strong>栈顶的栈帧</strong>）才有效，与该栈帧关联的方法称为<strong>当前方法</strong>。执行引擎运行的所有字节码指令都是针对当前栈帧进行操作。</p><p><img src="../../../../images/JVM/栈帧的概念结构.jpg" alt="栈帧的概念结构"></p><h3 id="局部变量表"><a href="#局部变量表" class="headerlink" title="局部变量表"></a>局部变量表</h3><p>局部变量表是<strong>一组变量值存储空间</strong>，用于存放<strong>方法参数</strong>和方法内部定义的<strong>局部变量</strong>。在程序被编译成Class文件时，就在方法区的<strong><code>Code</code>属性</strong>的<strong><code>max_locals</code></strong>数据项中确定了该方法所需要分配的<strong>局部变量表的最大容量</strong>。</p><p>局部变量表容量以<strong>变量槽<code>Slot</code>为最小单位</strong>，一个<strong><code>Slot</code></strong>可存放一个<strong>32位以内</strong>的数据类型，Java中占用32位以内的数据类型有<strong><code>boolean</code></strong>、<strong><code>byte</code></strong>、<strong><code>char</code></strong>、<strong><code>short</code></strong>、<strong><code>int</code></strong>、<strong><code>float</code></strong>、<strong><code>reference</code></strong>、<strong><code>returnAddress</code></strong> <strong><code>8</code></strong>种类型，64位的数据类型只有<strong><code>long</code></strong>和<strong><code>double</code></strong>两种。</p><p><strong><code>reference</code></strong>类型表示对一个<strong>对象实例的引用</strong>，一是从此引用中直接或间接地查找到对象在Java<strong>堆中的数据存放的起始地址索引</strong>，二是次引用中直接或间接地查找到对象所属数据类型在<strong>方法区中存储的类型信息</strong>。</p><p><strong>局部变量表建立在线程的堆栈上</strong>，是<strong>线程私有</strong>的数据，无论读写的Slot是否为原子操作，都<strong>不会引起数据安全问题</strong>。</p><p>方法在执行时，虚拟机是使用<strong>局部变量表完成参数值到参数变量列表的传递过程</strong>，若执行的是实例方法，局部变量表中第0位索引默认是用于传递方法所属对象实例的引用，可通过this关键字来访问该隐含参数。</p><p>类变量有两次赋初始值的过程，在准备阶段赋系统初始值，在初始化阶段赋定义初始值。但局部变量没有赋初始值就不能使用。</p><h3 id="操作数栈"><a href="#操作数栈" class="headerlink" title="操作数栈"></a>操作数栈</h3><p>Java虚拟机<strong>解释执行引擎</strong>称为<strong>基于栈的执行引擎</strong>，其中的栈就是操作数栈，操作数栈也称为<strong>操作栈</strong>，是一个<strong>后入先出栈</strong>，最大深度在编译时写入<strong><code>Code</code>属性</strong>的<strong><code>max_stacks</code></strong>数据项中。操作数栈的每个元素可以是<strong>任意Java数据类型</strong>，包括long和double，<strong><code>32</code>位</strong>数据类型占<strong><code>1</code>个栈容量</strong>，<strong><code>64</code>位</strong>数据类型占<strong>2<code>个栈容量</code></strong>。<strong>操作数栈中元素的数据类型必须与字节码指令序列严格匹配</strong>。</p><p>方法开始执行时，该方法的操作数栈为空，方法在执行过程中，会有各种<strong>字节码指令</strong>往操作数栈中<strong>写入</strong>和<strong>提取</strong>内容，也就是入栈和出栈操作。在<strong>算数运算</strong>时通过字节码指令将<strong>最接近栈顶</strong>的两个元素<strong>出栈</strong>并进行计算，然后将计算结果<strong>入栈</strong>，在调用其他方法时通过操作数栈来进行<strong>参数传递</strong>。</p><p>概念模型中两个栈帧作为虚拟机的元素是完全独立的，但大多数虚拟机都进行了一些优化，<strong>令两个栈帧出现部分重叠</strong>，在<strong>进行方法调用时可共享一部分数据</strong>。</p><p><img src="../../../../images/JVM/栈帧间的数据共享.jpg" alt="栈帧间的数据共享"></p><h3 id="动态连接"><a href="#动态连接" class="headerlink" title="动态连接"></a>动态连接</h3><p>每个栈帧都包含了一个<strong>指向运行时常量池中该栈帧所属方法的引用</strong>，持有该引用是<strong>为了支持方法调用过程中的动态连接</strong>。Class文件常量池中存有大量的符号引用，字节码中的<strong>方法调用指令</strong>就以<strong>常量池</strong>中指向<strong>方法的符号引用作为参数</strong>，</p><p>这些<strong>符号引用</strong>的<strong>一部分</strong>会在<strong>类加载阶段</strong>或者<strong>第一次使用</strong>时<strong>转化为直接引用</strong>，这种转化称为<strong>静态解析</strong>。另一部分将在每一次<strong>运行期间转化为直接引用</strong>，这部分称为<strong>动态连接</strong>。</p><h3 id="方法返回地址"><a href="#方法返回地址" class="headerlink" title="方法返回地址"></a>方法返回地址</h3><p>当方法开始执行后，只有两种方式可以推出该方法，方式一<strong>执行引擎遇</strong>到任意一个<strong>方法返回的字节码指令</strong>，可能有返回值传递给上层方法调用者，是否有返回值和返回值类型将根据遇到何种方法返回指令来决定。方式二方法在执行过程中<strong>遇到异常</strong>，且该异常在方法体中<strong>没得到处理</strong>。</p><p>无论哪种方式退出，都需要<strong>返回到方法被调用的位置</strong>，方法返回时<strong>可能需要在栈帧中保存一些信息</strong>，用来<strong>帮助恢复它的上层方法的执行状态</strong>。方法正常退出时，调用者的<strong><code>PC</code>计数器的值可作为返回地址</strong>，栈帧中很可能会保存该PC计数器值；方法异常退出时，返回地址要<strong>通过异常处理器来确定</strong>，栈帧中一般不会保存这部分信息。</p><p>方法退出过程实际上等<strong>同于当前栈帧出栈</strong>，退出可能执行的操作有，<strong>恢复上层方法的局部变量表和操作数栈</strong>，若有返回值把<strong>返回值压入调用者栈帧的操作数栈中</strong>，<strong>调整PC计数器的值</strong>以指向方法调用<strong>指令后面的一条指令</strong>等。</p><h3 id="附加信息"><a href="#附加信息" class="headerlink" title="附加信息"></a>附加信息</h3><p>虚拟机规范允许具体的虚拟机实现增加一些规范种没有描述的信息到栈帧中，例如<strong>调试相关的信息</strong>。实际开发中一般会把动态连接、方法的返回地址、与其他附加信息全部归类为一类，称为栈帧信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;栈帧&lt;/strong&gt;是用于支持虚拟机进行&lt;strong&gt;方法调用&lt;/strong&gt;和&lt;strong&gt;方法执行&lt;/strong&gt;的&lt;strong&gt;数据结构&lt;/strong&gt;，是虚拟机&lt;strong&gt;运行时数据区&lt;/strong&gt;中的虚拟机栈的栈元素。每个方法
      
    
    </summary>
    
      <category term="Java" scheme="http://yaoyinglong.github.io/categories/Java/"/>
    
      <category term="VM" scheme="http://yaoyinglong.github.io/categories/Java/VM/"/>
    
    
      <category term="JVM，栈帧" scheme="http://yaoyinglong.github.io/tags/JVM%EF%BC%8C%E6%A0%88%E5%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>Maven插件编写</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E6%8F%92%E4%BB%B6%E7%BC%96%E5%86%99/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven插件编写/</id>
    <published>2019-03-02T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.591Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一般步骤"><a href="#一般步骤" class="headerlink" title="一般步骤"></a>一般步骤</h3><ul><li><strong>创建maven-plugin项目</strong>，打包方式必须为<strong><code>maven-plugin</code></strong>，可使用<strong><code>maven-archetype-plugin</code></strong>快速创建</li><li><strong>编写插件目标</strong>，每个插件<strong>必须</strong>包含<strong>一个或多个目标</strong>，必须提供<strong>一个或多个继承自<code>AbstractMojo</code></strong>的类</li><li>为目标提供配置点，编写Mojo时提供可配置的参数。</li><li>编写代码实现目标行为，根据实际需要实现Mojo</li><li>错误处理及日志，当Mojo异常时，根据情况控制Maven的运行状态</li><li>测试插件，编写自动化测试代码测试行为，再实际运行插件验证其行为</li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>每个插件目标即Mojo都必须继承<strong><code>AbstractMojo</code></strong>并实现<strong><code>execute()</code></strong>方法，这样Maven才能识别该插件，并执行<strong><code>execute()</code></strong>方法中的行为。当在<strong><code>execute()</code></strong>方法捕获的其他异常时，使用<strong><code>MojoExecutionException</code></strong>对其简单包装后再抛出，Maven执行插件目标时遇到<strong><code>MojoExecutionException</code></strong>会在命令行显示<strong><code>BUILD ERROR</code></strong>.</p><h5 id="标注实现方式"><a href="#标注实现方式" class="headerlink" title="标注实现方式"></a>标注实现方式</h5><p><strong><code>maven-plugin-api</code></strong>该依赖中包含了插件开发所必需的类。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Mojo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>默认使用的是Java1.4风格的<strong><code>标注</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@goal</span> touch</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@phase</span> process-sources</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMojo</span> <span class="keyword">extends</span> <span class="title">AbstractMojo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span> expression="$&#123;project.build.directory&#125;"</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@required</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> File outputDirectory;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@parameter</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] includes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> MojoExecutionException </span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="注解实现方式"><a href="#注解实现方式" class="headerlink" title="注解实现方式"></a>注解实现方式</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>maven-plugin<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven Mojo<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugin-tools<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-plugin-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用注解的方式，具体实现代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mojo</span>(name = <span class="string">"touch"</span>, defaultPhase = LifecyclePhase.PROCESS_SOURCES)</span><br><span class="line"><span class="meta">@Execute</span>(goal = <span class="string">""</span>, phase = <span class="string">""</span>, lifecycle = <span class="string">""</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMojo</span> <span class="keyword">extends</span> <span class="title">AbstractMojo</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="meta">@Parameter</span>(defaultValue = <span class="string">"$&#123;project.build.directory&#125;"</span>, required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> File outputDirectory;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@parameter</span>     </span><br><span class="line">    <span class="keyword">private</span> String[] includes;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> MojoExecutionException </span>&#123;       </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">include</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mojo标注"><a href="#Mojo标注" class="headerlink" title="Mojo标注"></a>Mojo标注</h3><ul><li><strong><code>@goal &lt;name&gt;</code></strong> 每个Mojo都必须使用该标注<strong>注明目标名称</strong>，对应注解方式<strong><code>@Mojo(name = &quot;&quot;）</code></strong></li><li><strong><code>@phase &lt;phase&gt;</code></strong> 将目标绑定至<strong><code>Default</code>生命周期的某个阶段</strong></li><li><strong><code>@requiresDependencyResolution &lt;scope&gt;</code></strong> 运行该Mojo前<strong>必须解析所有指定范围的依赖</strong>，默认为<strong><code>runtime</code></strong></li><li><strong><code>@requiresProject &lt;true/false&gt;</code></strong> 该目标是否必须在Maven项目中运行</li><li><strong><code>@requiresDirectInvocation &lt;true/false&gt;</code></strong> 是否只能通过命令行调用</li><li><strong><code>@requiresOnline &lt;true/false&gt;</code></strong> 是否要求Maven必须是在线状态，默认false</li><li><strong><code>@requiresReports &lt;true/false&gt;</code></strong> 是否要求项目报告已经生成，默认false</li><li><strong><code>@aggregator</code></strong> 在多模块项目中，表示只会在顶层模块中运行</li><li><strong><code>@execute goal = &quot;&lt;goal&gt;&quot;</code></strong> 运行该目标前先运行另一个目标，本插件目标直接使用目标名，否则使用<strong><code>prefix:goal</code></strong></li><li><strong><code>@execute phase= &quot;&lt;phase&gt;&quot;</code></strong> 运行该目标前线运行一个并行的生命周期到指定阶段</li><li><strong><code>@execute lifecycle= &quot;&lt;lifecycle&gt;&quot;</code></strong> 运行该目标前线运行一个自定义生命周期到指定阶段</li></ul><h3 id="Mojo参数"><a href="#Mojo参数" class="headerlink" title="Mojo参数"></a>Mojo参数</h3><p>可以使用<strong><code>@parameter</code></strong>将Mojo的某个字段<strong>标注为可配置的参数</strong>即Mojo参数。Maven支持<strong><code>Boolean</code></strong>、<strong><code>Integer</code></strong>、<strong><code>Float</code></strong>、<strong><code>String</code></strong>、<strong><code>Date</code></strong>、<strong><code>File</code></strong>、<strong><code>URL</code></strong>、<strong>多值数组</strong>、<strong><code>Collection</code></strong>、<strong><code>Map</code></strong>、<strong><code>Properties</code></strong>等多种Mojo参数。</p><h6 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> sampleBoolean;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleBoolean&gt;true&lt;/sampleBoolean&gt;</span><br></pre></td></tr></table></figure><h6 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleInt;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleInt&gt;6&lt;/sampleInt&gt;</span><br></pre></td></tr></table></figure><h6 id="Float"><a href="#Float" class="headerlink" title="Float"></a>Float</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleFloat;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleFloat&gt;6.5&lt;/sampleFloat&gt;</span><br></pre></td></tr></table></figure><h6 id="String"><a href="#String" class="headerlink" title="String"></a>String</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleString;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleString&gt;HW&lt;/sampleString&gt;</span><br></pre></td></tr></table></figure><h6 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleDate;</span><br><span class="line"><span class="comment">// 对应配置,格式为yyyy-MM-dd HH:mm:ss.Sa或yyyy-MM-dd HH:mm:ssa</span></span><br><span class="line">&lt;sampleDate&gt;2019-03-03 11:28:55.1 PM&lt;/sampleDate&gt; </span><br><span class="line">&lt;sampleDate&gt;2019-03-03 11:28:55PM&lt;/sampleDate&gt;</span><br></pre></td></tr></table></figure><h6 id="File"><a href="#File" class="headerlink" title="File"></a>File</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleFile;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleFile&gt;c:\tmp&lt;/sampleFile&gt;</span><br></pre></td></tr></table></figure><h6 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> sampleURL;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleURL&gt;https:<span class="comment">//yaoyinglong.github.io&lt;/sampleURL&gt;</span></span><br></pre></td></tr></table></figure><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> String[] includes;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;includes&gt;</span><br><span class="line">    &lt;include&gt;&lt;/include&gt;</span><br><span class="line">    &lt;include&gt;&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br></pre></td></tr></table></figure><h6 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> List includes;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;includes&gt;</span><br><span class="line">    &lt;include&gt;&lt;/include&gt;</span><br><span class="line">    &lt;include&gt;&lt;/include&gt;</span><br><span class="line">&lt;/includes&gt;</span><br></pre></td></tr></table></figure><h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> Map sampleMap;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleMap&gt;</span><br><span class="line">    &lt;key1&gt;&lt;/key1&gt;</span><br><span class="line">    &lt;key2&gt;&lt;/key2&gt;</span><br><span class="line">&lt;/sampleMap&gt;</span><br></pre></td></tr></table></figure><h6 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h6><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@parameter</span>     </span><br><span class="line"><span class="keyword">private</span> Properties sampleProperties;</span><br><span class="line"><span class="comment">// 对应配置</span></span><br><span class="line">&lt;sampleProperties&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;name&gt;&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;&lt;/value&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">    &lt;properties&gt;</span><br><span class="line">        &lt;name&gt;&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;&lt;/value&gt;</span><br><span class="line">    &lt;/properties&gt;</span><br><span class="line">&lt;/sampleProperties&gt;</span><br></pre></td></tr></table></figure><p>除此之外<strong><code>@parameter</code></strong>还提供一些额外的属性</p><ul><li><strong><code>@parameter alias = &quot;&quot;</code></strong>给参数配置别名</li><li><strong><code>@parameter expression= &quot;${aSystemProperty}&quot;</code></strong>使用系统属性表达式给参数赋值</li><li><strong><code>@parameter default-value= &quot;aValue/${anExpression}&quot;</code></strong>若未配置才参数，就提供一个默认值</li><li><strong><code>@readonly</code></strong> 参数只读</li><li><strong><code>@required</code></strong> 必须参数</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一般步骤&quot;&gt;&lt;a href=&quot;#一般步骤&quot; class=&quot;headerlink&quot; title=&quot;一般步骤&quot;&gt;&lt;/a&gt;一般步骤&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;创建maven-plugin项目&lt;/strong&gt;，打包方式必须为&lt;strong&gt;&lt;code&gt;m
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven属性</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E5%B1%9E%E6%80%A7/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven属性/</id>
    <published>2019-02-24T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.589Z</updated>
    
    <content type="html"><![CDATA[<p>Maven为了支持构建的灵活性，内置了<strong>属性</strong>、<strong><code>Profile</code></strong>、<strong>资源过滤</strong>三大特性。</p><h3 id="Maven属性"><a href="#Maven属性" class="headerlink" title="Maven属性"></a>Maven属性</h3><p>Maven共有6类属性，分别为<strong>内置属性</strong>、<strong><code>POM</code>属性</strong>、<strong>自定义属性</strong>、<strong><code>Settings</code>属性</strong>、<strong>Java系统属性</strong>、<strong>环境变量属性</strong>。正确使用这些属性可以帮助<strong>简化<code>POM</code>配置</strong>和<strong>维护工作</strong>。</p><h4 id="内置属性"><a href="#内置属性" class="headerlink" title="内置属性"></a>内置属性</h4><p>主要有两个常用内置属性：</p><ul><li><strong><code>${basedir}：</code></strong>包含pom.xml文件的目录。即<strong>项目的根目录</strong>。</li><li><strong><code>${version}</code></strong>：<strong>项目的版本号</strong></li></ul><h4 id="POM属性"><a href="#POM属性" class="headerlink" title="POM属性"></a>POM属性</h4><p>用户可以使用POM属性引用POM文件中对应的元素值。常用POM属性：</p><ul><li><strong><code>${project.build.sourceDirectory}</code></strong>：项目<strong>主源码目录</strong>，默认为<strong><code>src/main/java/</code></strong></li><li><strong><code>${project.build.testScoreDirectory}</code></strong>：项目<strong>测试源码目录</strong>，默认为<strong><code>src/test/java/</code></strong></li><li><strong><code>${project.build.directory}</code></strong>：项目<strong>构建输出目录</strong>，默认<strong><code>target/</code></strong></li><li><strong><code>${project.outputDirectory}</code></strong>：项目<strong>代码编译输出目录</strong>，默认<strong><code>/target/classes/</code></strong></li><li><strong><code>${project.testOutputDirectory}</code></strong>：项目<strong>测试代码编译输出目录</strong>，默认<strong><code>/target/test-classes/</code></strong></li><li><strong><code>${project.groupId}</code></strong>：项目<strong><code>groupId</code></strong></li><li><strong><code>${project.artifactId}</code></strong>：项目<strong><code>artifactId</code></strong></li><li><strong><code>${project.version}</code></strong>：项目<strong><code>version</code></strong>，与<strong><code>${version}</code></strong>等价</li><li><strong><code>${project.build.finalName}</code></strong>：项目<strong>打包输出文件名称</strong>，默认为<strong><code>${project.artifactId}-${project.version}</code></strong></li></ul><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>在POM文件中的<strong><code>properties</code></strong>元素下定义的Maven属性。</p><h4 id="Setting属性"><a href="#Setting属性" class="headerlink" title="Setting属性"></a>Setting属性</h4><p>与POM属性同理，使用<strong><code>setting.</code></strong>开头的属性引用<strong><code>setting.xml</code></strong>文件中XML元素的值。例如<strong><code>${setting.localRepository}</code></strong>引用本地仓库地址</p><h4 id="Java系统属性"><a href="#Java系统属性" class="headerlink" title="Java系统属性"></a>Java系统属性</h4><p>所有Java系统属性都可以使用Maven属性引用。例如<strong><code>${user.home}</code></strong>引用用户目录。</p><p>可以使用<strong><code>mvn help:system</code></strong>命令<strong>查看所有的Java系统属性</strong></p><h4 id="环境变量属性"><a href="#环境变量属性" class="headerlink" title="环境变量属性"></a>环境变量属性</h4><p>所有环节变量都可以使用以<strong><code>env.</code></strong>开头的Maven属性引用。例如<strong><code>${env.JAVA_HOME}</code></strong>引用JAVA_HOMR环境变量的值。</p><p>可以使用<strong><code>mvn help:system</code></strong>命令<strong>查看所有的环境变量</strong></p><h3 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h3><p>为了应对环境的变化，Maven属性可以将变化的部分提取出来。针对不同环境设置不同的<strong>属性</strong>或<strong>插件</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">release.file</span>&gt;</span>test<span class="tag">&lt;/<span class="name">release.file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.long.model.IT.**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>product<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">release.file</span>&gt;</span>product<span class="tag">&lt;/<span class="name">release.file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Maven3支持<strong><code>pom.xml</code></strong>、<strong>用户<code>setting.xml</code></strong>、<strong>全局<code>setting.xml</code></strong>三种Profile。pom.xml中声明的Profile只对当前项目有效，用户setting.xml对本机上该用户的所有项目有效，全局setting.xml对本机上所有项目有效。</p><p>Maven支持多种方式激活Profile，可以通过<strong><code>mvn clean install -Pdev, test</code></strong>激活dev和test两个Profile；可以在setting文件或者POM中通过如下配置显示激活。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过系统属性激活，当系统属性test存在且值等于x时激活，value可以没有，用户也可以通过命令行设置系统属性<strong><code>mvn clean install -Dtest=x</code></strong>从而激活配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>x<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>操作系统环境激活，name、arch、version可以通过查看环境中的系统属性获取。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">os</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Windows XP<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">family</span>&gt;</span>Windows<span class="tag">&lt;/<span class="name">family</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arch</span>&gt;</span>x86<span class="tag">&lt;/<span class="name">arch</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2600<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">os</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>文件存在与否激活，如下所示当x文件不存在y文件存在时激活。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">missing</span>&gt;</span>x.properties<span class="tag">&lt;/<span class="name">missing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exists</span>&gt;</span>x.properties<span class="tag">&lt;/<span class="name">exists</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若项目中有很多profile，其激活方式各异，用户可以通过<strong><code>mvn help:active-profiles</code></strong>命令查看<strong>当前激活的profile</strong>，也可以通过<strong><code>mvn help:all-profiles</code></strong>列出<strong>当前所有的profile</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven为了支持构建的灵活性，内置了&lt;strong&gt;属性&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;Profile&lt;/code&gt;&lt;/strong&gt;、&lt;strong&gt;资源过滤&lt;/strong&gt;三大特性。&lt;/p&gt;
&lt;h3 id=&quot;Maven属性&quot;&gt;&lt;a href=&quot;#Ma
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>IT测试总结</title>
    <link href="http://yaoyinglong.github.io/Blog/Test/IT%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/Test/IT测试总结/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.593Z</updated>
    
    <content type="html"><![CDATA[<p>IT测试主要测试模块之间的接口和接口数据传递关系，以及模块组合后的整体功能。</p><p>在做集成测试时，若涉及到数据库的数据变更的，最好在测试过后将数据还原，可以先构建一条新的数据测试完成后删除，防止印象到数据库中原有的数据。</p><h3 id="Controller层测试"><a href="#Controller层测试" class="headerlink" title="Controller层测试"></a>Controller层测试</h3><p>对于<strong><code>SpringBoot</code></strong>项目，Controller层的IT测试可以通过在类上加<strong><code>@AutoConfigureMockMvc</code></strong>注解并直接注入<strong><code>MockMvc</code></strong>的方式进行测试。</p><p>若对于一些特殊的测试，需要使用不同的配置的可使用<strong><code>@TestPropertySource(locations=&quot;classpath:test.application.properties&quot;)</code></strong>注解指定特定的配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StandardCombinedControllerTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get_method_test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mockMvc.perform(get(<span class="string">"/test//v1"</span>)</span><br><span class="line">                        .param(<span class="string">"param1"</span>, <span class="string">"value1"</span>)</span><br><span class="line">               .param(<span class="string">"param2"</span>, <span class="string">"value2"</span>)</span><br><span class="line">                        .header(<span class="string">"uid"</span>, <span class="string">"123456"</span>))</span><br><span class="line">                .andExpect(status().isOk())</span><br><span class="line">                .andExpect(content().string(containsString(<span class="string">"&#123;\"response_code\":\"00\""</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<strong><code>MockMvc</code></strong>的使用还可以通过如下方式，这样可以不用在类上添加<strong><code>@AutoConfigureMockMvc</code></strong>注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WebApplicationContext context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mvc = MockMvcBuilders.webAppContextSetup(context)</span><br><span class="line">        .addFilter(<span class="keyword">new</span> BaseParamCheckFilter()).build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>mockMvc.perform</code></strong>需要传入的是一个<strong><code>RequestBuilder</code></strong>，可以将其封装好了再传入，需要放入<strong><code>RequestBody</code></strong>中的参数可以通过<strong><code>content</code></strong>进行参数构造：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HttpHeaders httpHeaders = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">httpHeaders.add(<span class="string">"uuid"</span>, <span class="string">"68A"</span>);</span><br><span class="line">httpHeaders.add(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">RequestBuilder request = post(<span class="string">"/test/v1"</span>)</span><br><span class="line">        .headers(httpHeaders)</span><br><span class="line">        .content(<span class="string">"&#123;\"uuid\": \"68A\",\"param1\":\"aa\"&#125;"</span>)</span><br><span class="line">        .accept(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line">mockMvc.perform(request).andExpect(status().isOk()).andDo(print()).andExpect(</span><br><span class="line">    content().string(containsString(<span class="string">"&#123;\"response_code\":\"02\",\"message\":\"请求参数缺失\""</span>)));</span><br></pre></td></tr></table></figure><p>对于返回结果的严重可以使用上面的示例通过<strong><code>MockMvcResultMatchers</code></strong>结合<strong><code>Matchers</code></strong>中的方法进行验证，也可以通过以下方式获取到具体结果后进行验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String responseString = mvc.perform(request)</span><br><span class="line">        .andExpect(status().isOk())</span><br><span class="line">        .andReturn().getResponse().getContentAsString();</span><br></pre></td></tr></table></figure><ul><li><strong><code>perform</code></strong>：执行一个<strong><code>RequestBuilder</code></strong>请求，会自动执行<strong><code>SpringMVC</code></strong>的流程并映射到相应的控制器执行处理；</li><li><strong><code>andExpect</code></strong>：添加<strong><code>ResultMatcher</code></strong>验证规则，验证控制器执行完成后结果是否正确；</li><li><strong><code>andDo</code></strong>：添加<strong><code>ResultHandler</code></strong>结果处理器，比如调试时打印结果到控制台；</li><li><strong><code>andReturn</code></strong>：最后返回相应的<strong><code>MvcResult</code></strong>；然后进行自定义验证/进行下一步的异步处理；</li></ul><h4 id="测试文件上传"><a href="#测试文件上传" class="headerlink" title="测试文件上传"></a>测试文件上传</h4><p>对于文件大小限制的测试可以直接构建一个指定大小的byte数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MockMultipartFile xmlFile = <span class="keyword">new</span> MockMultipartFile(<span class="string">"xmlFile"</span>,</span><br><span class="line">                    <span class="string">"emptyModel.xml"</span>, <span class="string">"text/plain"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">200</span> + <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.mockMvc.perform(MockMvcRequestBuilders.fileUpload(<span class="string">"/hawkeye/config/add"</span>)</span><br><span class="line">                     .file(xmlFile).param(<span class="string">"mid"</span>, mid).param(<span class="string">"status"</span>, <span class="string">"1"</span>))</span><br><span class="line">    .andExpect(status().isOk())</span><br><span class="line">    .andExpect(content().string(containsString(<span class="string">"&#123;\"message\":\"上传文件异常\""</span>)));</span><br></pre></td></tr></table></figure><p>如果对于真实的文件上传测试可以读取真实的文件传输：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">URL url = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">"modelXML/errorFileType.txt"</span>);</span><br><span class="line">File file = <span class="keyword">new</span> File(url.getPath());</span><br><span class="line"></span><br><span class="line">MockMultipartFile xmlFile = <span class="keyword">new</span> MockMultipartFile(<span class="string">"xmlFile"</span>,</span><br><span class="line">        <span class="string">"errorFileType.txt"</span>, <span class="string">"text/plain"</span>, getByte(file));</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">byte</span>[] getByte(File file) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        ByteArrayOutputStream bos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1000</span>];</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">while</span> ((n = fis.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, n);</span><br><span class="line">        &#125;</span><br><span class="line">        fis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用TestRestTemplate-对象测试"><a href="#使用TestRestTemplate-对象测试" class="headerlink" title="使用TestRestTemplate 对象测试"></a>使用<code>TestRestTemplate</code> 对象测试</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> TestRestTemplate template;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testController</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// template.getForObject() 会得到 controller 返回的 json 值</span></span><br><span class="line">    String content = template.getForObject(<span class="string">"/show/100"</span>, String.class);</span><br><span class="line">    <span class="comment">// 使用断言测试，使用正确的断言</span></span><br><span class="line">    Assert.assertEquals(<span class="string">"show100"</span>, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="非Controller层测试"><a href="#非Controller层测试" class="headerlink" title="非Controller层测试"></a>非Controller层测试</h4><p>对于非Controller测试一般更简单一些，只需要注入相关的类构造入参进行具体的方法调用测试，输出结果进行严重即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = NONE)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ITModelConfigServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HawkeyeModelConfigMapper hawkeyeModelConfigMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ModelConfigService modelConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getModelConfigTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;ModelConfig&gt; configList = hawkeyeModelConfigMapper.getAllModelConfigs();</span><br><span class="line">        assertNotNull(configList);</span><br><span class="line">        assertEquals(<span class="keyword">true</span>, configList.size() &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (ModelConfig config : configList) &#123;</span><br><span class="line">            ModelConfig modelConfig = modelConfigService.getModelConfig(config.getMid());</span><br><span class="line">            assertNotNull(modelConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IT测试主要测试模块之间的接口和接口数据传递关系，以及模块组合后的整体功能。&lt;/p&gt;
&lt;p&gt;在做集成测试时，若涉及到数据库的数据变更的，最好在测试过后将数据还原，可以先构建一条新的数据测试完成后删除，防止印象到数据库中原有的数据。&lt;/p&gt;
&lt;h3 id=&quot;Controlle
      
    
    </summary>
    
      <category term="Test" scheme="http://yaoyinglong.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://yaoyinglong.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>UT测试总结</title>
    <link href="http://yaoyinglong.github.io/Blog/Test/UT%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/Test/UT测试总结/</id>
    <published>2019-02-23T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.594Z</updated>
    
    <content type="html"><![CDATA[<p>UT测试主要测试单元内部的数据结构、逻辑控制、异常处理等。单元测试实现容易、运行速度快、能完全控制被测试的单元不包含外部依赖、测试用例相互独立无依赖关系。能够帮助发现代码缺陷、修改或者重构代码时确保没有影响现有功能。</p><p>对于一些对<strong><code>Bean</code></strong>没有依赖的类的测试（例如一些工具类），仅使用<strong><code>JUnit</code></strong>即可完成单元测试。</p><p>对于一些依赖<strong><code>Bean</code></strong>的类进行测试，若其复杂度低，在上层一两个IT测试即可覆盖掉，可以使用IT测试；若其复杂度比较高，可以使用<strong><code>JUnit</code></strong>加<strong><code>Mockito</code></strong>来完成单元测试，通过使用<strong><code>Mock</code></strong>技术测试可以<strong>无视代码依赖关系</strong>去测试代码的有效性，mock技术的目的和作用就是<strong>模拟一些在应用中不容易构造或者比较复杂的对象</strong>，从而把测试与测试边界以外的对象隔离开，对于依赖的Bean进行Mock处理，模拟构造各种<strong><code>Bean</code>的输出</strong>来以及<strong>待测试方法的输入</strong>来覆盖当前方法的所有分支。</p><h3 id="Mockito基础"><a href="#Mockito基础" class="headerlink" title="Mockito基础"></a>Mockito基础</h3><p>必须使用<strong><code>@RunWith(MockitoJUnitRunner.class)</code></strong>注解，否则Mock的依赖Bean将为空。<strong><code>@Mock</code></strong>将创建一个Mock，<strong><code>@InjectMocks</code></strong>创建一个实例且自动实例化，<strong><code>mockito</code></strong>会自动注入<strong><code>mock</code></strong>或<strong><code>spy</code></strong>成员。<strong><code>UserBaseServiceImpl</code></strong>中通过<strong><code>@Autowired</code></strong>注解或者构造方法等方式注入了<strong><code>IUserBaseDao</code></strong>，就可以通过如下方式使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBaseServiceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> IUserBaseDao userBaseDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserBaseServiceImpl userBaseService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mock与-Spy的区别"><a href="#Mock与-Spy的区别" class="headerlink" title="@Mock与@Spy的区别"></a>@Mock与@Spy的区别</h3><p>使用<strong><code>@Mock</code></strong>生成的类，所有方法都不是真实的方法，而且返回值都是NULL。通常在设置测试桩时通过如下方式设置，对于多次调用返回不同值，可以通过多次设置<strong><code>thenReturn</code></strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LinkedList mockedList = mock(LinkedList.class);</span><br><span class="line">mockedList.add(<span class="number">11</span>);</span><br><span class="line">assertEquals(<span class="keyword">null</span>, mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">"first"</span>).thenReturn(<span class="string">"second"</span>);</span><br><span class="line">assertEquals(<span class="string">"first"</span>, mockedList.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><p>使用<strong><code>@Spy</code></strong>生成的类，所有方法都是真实方法，返回值都是和真实方法一样的。测试桩设置与<strong><code>@Mock</code></strong>方式有所区别：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LinkedList mockedList = spy(LinkedList.class);</span><br><span class="line">mockedList.add(<span class="number">11</span>);</span><br><span class="line">assertEquals(<span class="number">11</span>, mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">doReturn(<span class="string">"foo"</span>).when(spy).get(<span class="number">0</span>);</span><br><span class="line">assertEquals(<span class="string">"foo"</span>, mockedList.get(<span class="number">0</span>));</span><br></pre></td></tr></table></figure><h3 id="Redis测试"><a href="#Redis测试" class="headerlink" title="Redis测试"></a>Redis测试</h3><p>有时在进行Mock测试时会遇到<strong><code>redisTemplate</code></strong>，通常在应用中会使用<strong><code>redisTemplate.boundValueOps</code></strong>或者<strong><code>redisTemplate.boundHashOps</code></strong>生成一个<strong><code>BoundValueOperations</code></strong>或者<strong><code>BoundHashOperations</code></strong>对象，再来继续调用具体的处理方法。在设置测试桩时，需要进行两次设置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">when(redisTemplate.boundValueOps(redisKey)).thenReturn(mock(BoundValueOperations.class));</span><br><span class="line">when(redisTemplate.boundValueOps(redisKey).increment(anyLong())).thenReturn(<span class="number">10L</span>);</span><br></pre></td></tr></table></figure><h3 id="参数捕捉"><a href="#参数捕捉" class="headerlink" title="参数捕捉"></a>参数捕捉</h3><p>有时会出现一大串复杂的逻辑处理后生成一个或几个参数，用于调用其他的依赖Bean，这时可以通过参数捕捉来验证逻辑中各种情况下生产的参数是否满足预期。若简单参数也可以通过<strong><code>verify</code></strong>直接验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BoundHashOperations boundHashOperations = mock(BoundHashOperations.class);</span><br><span class="line">when(redisTemplate.boundHashOps(anyString())).thenReturn(boundHashOperations);</span><br><span class="line"></span><br><span class="line">ArgumentCaptor&lt;Map&gt; argument = ArgumentCaptor.forClass(Map.class);</span><br><span class="line"> </span><br><span class="line">verify(boundHashOperations, times(<span class="number">2</span>)).putAll(argument.capture());</span><br><span class="line"></span><br><span class="line">Map&lt;String, CaseFlow&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">assertEquals(map, argument.getValue());</span><br></pre></td></tr></table></figure><h3 id="方法调用次数验证"><a href="#方法调用次数验证" class="headerlink" title="方法调用次数验证"></a>方法调用次数验证</h3><p>当验证的方法中存在循环、或者复杂度比较高等，导致方法在不同条件下可能存在多次调用的情况，最好验证一下方法的调用次数。或者是用于验证某个逻辑没有被执行或方法没有别调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">verify(mock, times(<span class="number">1</span>)).someMethod();</span><br><span class="line"><span class="comment">// 至少调用2次</span></span><br><span class="line">verify(mock, atLeast(<span class="number">2</span>)).someMethod();</span><br><span class="line"><span class="comment">// 至多调用5次</span></span><br><span class="line">verify(mock, atMost(<span class="number">5</span>)).someMethod();</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>在进行一些会抛出异常的测试时，可以通过捕获异常在进行后续校验，可以使用<strong><code>@Test(expected = Exception.class)</code></strong>，若有多个地方抛出相同异常但异常信息不同时，该测试方法就不适用了，可以通过如下方式进行异常捕获后进行相关的验证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">doThrow(<span class="keyword">new</span> RuntimeException()).when(mockedList).clear();</span><br><span class="line">when(redisTemplate.boundValueOps(any())).thenThrow(<span class="keyword">new</span> RuntimeException());</span><br><span class="line"></span><br><span class="line">Exception error = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    baselineModelHandler.output(segment, modelData);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    error = e;</span><br><span class="line">&#125;</span><br><span class="line">assertNotNull(error);</span><br><span class="line">assertEquals(<span class="string">""</span>, error.getMessage());</span><br></pre></td></tr></table></figure><h3 id="验证调用顺序"><a href="#验证调用顺序" class="headerlink" title="验证调用顺序"></a>验证调用顺序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List firstMock = mock(List.class);</span><br><span class="line">List secondMock = mock(List.class);</span><br><span class="line"></span><br><span class="line">firstMock.add(<span class="string">"was called first"</span>);</span><br><span class="line">secondMock.add(<span class="string">"was called second"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建多个mock对象的inOrder</span></span><br><span class="line">InOrder inOrder = inOrder(firstMock, secondMock);</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证firstMock先于secondMock调用</span></span><br><span class="line">inOrder.verify(firstMock).add(<span class="string">"was called first"</span>);</span><br><span class="line">inOrder.verify(secondMock).add(<span class="string">"was called second"</span>);</span><br></pre></td></tr></table></figure><h3 id="实现ApplicationContextAware接口的类测试"><a href="#实现ApplicationContextAware接口的类测试" class="headerlink" title="实现ApplicationContextAware接口的类测试"></a>实现ApplicationContextAware接口的类测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="string">"outputServiceImpl"</span>, <span class="keyword">new</span> OutputServiceImpl(requestService, updateCache, mock(ICache.class)));</span><br><span class="line">when(applicationContext.getBeansWithAnnotation(InvokeListener.class)).thenReturn(map);</span><br><span class="line">dataInvokeService.setApplicationContext(applicationContext);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UT测试主要测试单元内部的数据结构、逻辑控制、异常处理等。单元测试实现容易、运行速度快、能完全控制被测试的单元不包含外部依赖、测试用例相互独立无依赖关系。能够帮助发现代码缺陷、修改或者重构代码时确保没有影响现有功能。&lt;/p&gt;
&lt;p&gt;对于一些对&lt;strong&gt;&lt;code&gt;Be
      
    
    </summary>
    
      <category term="Test" scheme="http://yaoyinglong.github.io/categories/Test/"/>
    
    
      <category term="Test" scheme="http://yaoyinglong.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>SonarQube配置总结</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%9D%82%E8%AE%B0/SonarQube%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/杂记/SonarQube配置总结/</id>
    <published>2019-02-19T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.597Z</updated>
    
    <content type="html"><![CDATA[<p>SonarQube的安装很简单，这里不做赘述。主要总结一下SonarQube的一些实际应用。</p><h3 id="SonarQube-Jenkins配置"><a href="#SonarQube-Jenkins配置" class="headerlink" title="SonarQube Jenkins配置"></a>SonarQube Jenkins配置</h3><p>安装并配置好<strong><code>SonarQube</code></strong>后，在<strong><code>Jenkins</code>插件管理</strong>中添加<strong><code>SonarQube Scanner for Jenkins</code>插件</strong>，然后在Jenkins系统设置中设置SonarQube servers信息。</p><p><img src="../../../../images/杂记/SonarQube Service Jenkins配置.png" alt="SonarQube Service Jenkins配置"></p><p>最后在具体的项目<strong><code>配置</code></strong>中的<strong><code>Post Steps</code></strong>中添加<strong><code>Execute SonarQube Scanner</code></strong>：</p><p><img src="../../../../images/杂记/SonarQube项目配置.png" alt="SonarQube项目配置"></p><p>这样配置后在Jenkins上构建项目时会自动执行SonarQube代码扫描，但是由于很多时候Jenkins上<strong><code>Build</code></strong>中都配置<strong><code>-Dmaven.test.skip=true</code></strong>跳过测试，这样就统计不出测试覆盖率。</p><h3 id="SonarQube本地化"><a href="#SonarQube本地化" class="headerlink" title="SonarQube本地化"></a>SonarQube本地化</h3><p>由于Jenkins上配置扫描不出测试覆盖率，最后考虑直接在POM中配置插件，通过开发人员自己来进行代码扫描。首先需要配置<strong><code>sonar-maven-plugin</code></strong>插件，这里将插件的<strong><code>sonar</code></strong>目标绑定到Maven的<strong><code>default</code>生命周期的<code>post-integration-test</code>阶段</strong>，是为了方便代码扫描，也可以不进行绑定直接执行<strong><code>mvn sonar:sonar</code></strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sonar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0.1398<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar-scan<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>post-integration-test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里使用的<strong><code>jacoco-maven-plugin</code></strong>来进行代码测试覆盖率的统计，该插件的<strong><code>report</code></strong>目标也是绑定在Maven的<strong>default生命周期的test阶段</strong>，将该插件声明在<strong><code>sonar-maven-plugin</code></strong>的前面，让其先执行覆盖率统计工作，以便<strong>sonar-maven-plugin</strong>插件使用覆盖率统报告。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jacoco<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jacoco-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.8.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>**/support/xml/*<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Prepares the property pointing to the JaCoCo runtime agent which</span></span><br><span class="line"><span class="comment">            is passed as VM argument when Maven the Surefire plugin is executed.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pre-unit-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the path to the file which contains the execution data. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">destFile</span>&gt;</span>$&#123;project.build.directory&#125;/coverage-reports/jacoco-ut.exec<span class="tag">&lt;/<span class="name">destFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    Sets the name of the property containing the settings</span></span><br><span class="line"><span class="comment">                    for JaCoCo runtime agent.</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">propertyName</span>&gt;</span>surefireArgLine<span class="tag">&lt;/<span class="name">propertyName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Ensures that the code coverage report for unit tests is created after</span></span><br><span class="line"><span class="comment">            unit tests have been run.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>post-unit-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the path to the file which contains the execution data. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataFile</span>&gt;</span>$&#123;project.build.directory&#125;/coverage-reports/jacoco-ut.exec<span class="tag">&lt;/<span class="name">dataFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the output directory for the code coverage report. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.reporting.outputDirectory&#125;/jacoco-ut<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Prepares the property pointing to the JaCoCo runtime agent which</span></span><br><span class="line"><span class="comment">            is passed as VM argument when Maven the Failsafe plugin is executed.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>pre-integration-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>pre-integration-test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>prepare-agent<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the path to the file which contains the execution data. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">destFile</span>&gt;</span>$&#123;project.build.directory&#125;/coverage-reports/jacoco-it.exec<span class="tag">&lt;/<span class="name">destFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                    Sets the name of the property containing the settings</span></span><br><span class="line"><span class="comment">                    for JaCoCo runtime agent.</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">propertyName</span>&gt;</span>failsafeArgLine<span class="tag">&lt;/<span class="name">propertyName</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            Ensures that the code coverage report for integration tests after</span></span><br><span class="line"><span class="comment">            integration tests have been run.</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>post-integration-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>post-integration-test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>report<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the path to the file which contains the execution data. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dataFile</span>&gt;</span>$&#123;project.build.directory&#125;/coverage-reports/jacoco-it.exec<span class="tag">&lt;/<span class="name">dataFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- Sets the output directory for the code coverage report. --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.reporting.outputDirectory&#125;/jacoco-it<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<strong><code>maven-surefire-plugin</code></strong>来执行单元测试。 将<strong><code>surefireArgLine</code></strong>赋值给<strong><code>argLine</code></strong>参数，以保证在测试执行时<strong><code>Jacoco agent</code></strong>处于运行状态。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">argLine</span>&gt;</span>$&#123;surefireArgLine&#125;<span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>com.long.model.IT.**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<strong><code>maven-failsafe-plugin</code></strong>来执行集成测试。 将<strong><code>failsafeArgLine</code></strong>赋值给<strong><code>argLine</code></strong>参数，以保证在测试执行时<strong><code>Jacoco agent</code></strong>处于运行状态。若集成测试用例和单元测试用例放在同一个项目里，必须在单元测试的<strong><code>surefire</code></strong>中<strong><code>exclude</code></strong>所有集成测试用例。</p><p>通过<strong><code>additionalClasspathElements</code></strong>标签将<strong><code>/target/classes</code></strong>添加为一个额外的<strong><code>classpath</code></strong>元素，因为在<strong>classes</strong>文件夹中一些资源没有添加到jar中，但是测试使用了这些资源，若不加这个额外的<strong><code>classpath</code></strong>，则<strong><code>maven-failsafe-plugin</code></strong>插件的<strong><code>integration-test</code></strong>将不能正常执行。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-failsafe-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.19.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Sets the VM argument line used when integration tests are run. --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">argLine</span>&gt;</span>$&#123;failsafeArgLine&#125;<span class="tag">&lt;/<span class="name">argLine</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">skipTests</span>&gt;</span>false<span class="tag">&lt;/<span class="name">skipTests</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testFailureIgnore</span>&gt;</span>true<span class="tag">&lt;/<span class="name">testFailureIgnore</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">additionalClasspathElements</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">additionalClasspathElement</span>&gt;</span>$&#123;basedir&#125;/target/classes<span class="tag">&lt;/<span class="name">additionalClasspathElement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">additionalClasspathElements</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">parallel</span>&gt;</span>none<span class="tag">&lt;/<span class="name">parallel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>integration-test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>integration-test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>integration-test<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>verify<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后需要配置SonarQube配置信息，可以配置在Maven的<strong><code>setting.xml</code></strong>配置文件中，也可以配置在项目的中，当然可以不用<strong><code>profiles</code></strong>直接配置在<strong><code>properties</code></strong>中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.url</span>&gt;</span>jdbc:mysql://192.168.3.113:3306/sonar<span class="tag">&lt;/<span class="name">sonar.jdbc.url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.driver</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">sonar.jdbc.driver</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.username</span>&gt;</span>yao_yinglong<span class="tag">&lt;/<span class="name">sonar.jdbc.username</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jdbc.password</span>&gt;</span>yao_yinglong_passwd<span class="tag">&lt;/<span class="name">sonar.jdbc.password</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.host.url</span>&gt;</span>http://172.16.21.200:9000<span class="tag">&lt;/<span class="name">sonar.host.url</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.binaries</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sonar.binaries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.sources</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">sonar.sources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.tests</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">sonar.tests</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.language</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sonar.language</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.coverage.exclusions</span>&gt;</span>**/support/xml/**, **/entity/**<span class="tag">&lt;/<span class="name">sonar.coverage.exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.cpd.exclusions</span>&gt;</span>**/support/xml/**<span class="tag">&lt;/<span class="name">sonar.cpd.exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.dynamicAnalysis</span>&gt;</span>reuseReports<span class="tag">&lt;/<span class="name">sonar.dynamicAnalysis</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.junit.reportsPath</span>&gt;</span>src/test/java<span class="tag">&lt;/<span class="name">sonar.junit.reportsPath</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.java.coveragePlugin</span>&gt;</span>jacoco<span class="tag">&lt;/<span class="name">sonar.java.coveragePlugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jacoco.reportPaths</span>&gt;</span>target/coverage-reports/jacoco-ut.exec<span class="tag">&lt;/<span class="name">sonar.jacoco.reportPaths</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sonar.jacoco.itReportPath</span>&gt;</span>target/coverage-reports/jacoco-it.exec<span class="tag">&lt;/<span class="name">sonar.jacoco.itReportPath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然为了简化配置可以不配置<strong><code>jacoco-maven-plugin</code></strong>的集成测试相关执行目标，也没有必要配置<strong><code>maven-failsafe-plugin</code></strong>插件，去掉<strong><code>maven-surefire-plugin</code></strong>插件中排除的集成测试，同时可以将<strong><code>sonar.jacoco.itReportPath</code></strong>配置为<strong><code>target/coverage-reports/jacoco-ut.exec</code></strong>甚至不配。</p><p>但是即使这样以上的配置还是过于庞杂，如果很多项目使用该类容，可以创建一个超级POM，将这些内容放在超级POM中，用到的项目集成该超级POM即可极大的简化配置。</p><p>但是这样配置，项目在<strong>测试</strong>环境、<strong>预发布</strong>环境、<strong>生产</strong>环境或者一些其他的<strong>不需要使用导SonarQube的环境</strong>，也会执行SonarQube扫描。有可能这些环境与搭建的SonarQube的服务<strong>网络不通</strong>，<strong>导致项目不能正常构建</strong>。在构建参数中添加<strong><code>-Dsonar.skip=true</code></strong>命令即可跳过SonarQube正常构建项目。如果使用Jenkins可以在Build的<strong><code>Goals and options</code></strong>中进行添加该命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SonarQube的安装很简单，这里不做赘述。主要总结一下SonarQube的一些实际应用。&lt;/p&gt;
&lt;h3 id=&quot;SonarQube-Jenkins配置&quot;&gt;&lt;a href=&quot;#SonarQube-Jenkins配置&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="杂记" scheme="http://yaoyinglong.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="SonarQube" scheme="http://yaoyinglong.github.io/tags/SonarQube/"/>
    
      <category term="jacoco" scheme="http://yaoyinglong.github.io/tags/jacoco/"/>
    
  </entry>
  
  <entry>
    <title>Maven聚合与继承</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E8%81%9A%E5%90%88%E4%B8%8E%E7%BB%A7%E6%89%BF/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven聚合与继承/</id>
    <published>2019-02-18T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.592Z</updated>
    
    <content type="html"><![CDATA[<h3 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h3><p>Maven<strong>聚合</strong>又称为<strong>多模块</strong>，该特性是为了一次构件多个项目，而不用到每个项目下分别执行mvn命令。且聚合模块其打包方式<strong><code>packaging</code></strong>必须为<strong><code>pom</code></strong>否则无法构建。</p><p><strong><code>modules</code>元素是实现聚合最核心的配置</strong>，用户可以通过<strong>在一个打包方式为<code>pom</code>的Maven项目中声明任意数量的<code>module</code>元素来实现模块的聚合</strong>。且<strong>每一个<code>module</code>的值都是一个当前<code>POM</code>的相对目录</strong>。为了方便快速定位内容，模块所处<strong>目录名称应当与其<code>artifactId</code>一致</strong>。</p><p>为了方便构建项目，通常将聚合模块放在项目目录最顶层，其他模块作为聚合模块的子目录，聚合模块仅仅是帮助聚合其他模块构件的工具，其本身并无实质内容。</p><p>Maven在构件聚合项目时，首先会解析聚合模块的POM、分析要构建的模块、并计算出一个反应堆构建顺序，然后根据这个顺序依次构建各个模块，反应堆是所有模块组成的一个构建结构。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-aggregator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Account Aggregator<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>account-email<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>account-persist<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是为了抽取出重复的配置，需要<strong>创建POM的父子结构</strong>，在父POM中声明一些配置供子POM继承，以实现一处声明多处使用。</p><p>与聚合一样<strong>父模块的POM其打包类型<code>packaging</code>必须为<code>pom</code></strong>，父模块<strong>只是为了消除配置的重复</strong>，因此其<strong>本身不包含除POM以外的项目文件</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-aggregator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Account Aggregator<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在子模块中使用parent元素声明父模块，<strong><code>groupId</code></strong>、<strong><code>artifactId</code></strong>和<strong><code>version</code></strong>指定了父模块的坐标，且<strong>这三个元素是必须</strong>的，元素<strong><code>relativePath</code>表示父模块POM的相对路径</strong>，当构建时Maven<strong>首先会根据<code>relativePath</code>检查父POM</strong>，若<strong>找不到则从本地仓库查找</strong>，<strong><code>relativePath</code>默认值是<code>../pom.xml</code></strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-aggregator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可继承的POM元素：</p><ul><li><strong><code>groupId</code></strong>：项目组ID，项目坐标的核心元素</li><li><strong><code>version</code></strong>：项目版本号，项目坐标的核心元素</li><li><strong><code>description</code></strong>：项目描述信息</li><li><strong><code>organization</code></strong>：项目组织信息</li><li><strong><code>inceptionYear</code></strong>：项目创始年份</li><li><strong><code>url</code></strong>：项目url地址</li><li><strong><code>developers</code></strong>：项目开发者信息</li><li><strong><code>contributors</code></strong>：项目贡献者信息</li><li><strong><code>distributionManagement</code></strong>：项目部署配置</li><li><strong><code>issueManagement</code></strong>：项目缺陷跟踪系统信息</li><li><strong><code>ciManagement</code></strong>：项目持续集成系统信息</li><li><strong><code>scm</code></strong>：项目的版本控制系统信息</li><li><strong><code>mailingLists</code></strong>：项目的邮件列表信息</li><li><strong><code>properties</code></strong>：自定义的Maven属性</li><li><strong><code>dependencies</code></strong>：项目的依赖配置</li><li><strong><code>dependencyManagement</code></strong>：项目的依赖管理配置，</li><li><strong><code>repositories</code></strong>：项目的仓库配置</li><li><strong><code>build</code></strong>：包括项目的源码目录、输出目录、插件配置、插件管理配置等</li><li><strong><code>reporting</code></strong>：包括项目的报告输出目录配置、报告插件配置等 </li></ul><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p><strong><code>dependencyManagement</code></strong>既能让<strong>子模块继承到父类模块的依赖配置</strong>，<strong>又能保证子模块依赖使用的灵活性</strong>，该元素下的依赖声明<strong>不会引入实际的依赖</strong>，不过<strong>能约束<code>dependencies</code>下的依赖使用</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父模快account-parent中声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子模块account-email中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>dependencies</code></strong>中的依赖配置比原来简单了，<strong><code>junit</code></strong>依赖省去了<strong><code>version</code></strong>和<strong><code>scope</code></strong>，这样能统一项目范围中依赖的版本，当依赖版本在父POM中声明之后，<strong>子模块使用依赖时无需声明版本号</strong>，也不会发生<strong>多个子模块使用依赖版本不一致</strong>的情况。子模块不声明依赖的使用，即使该依赖已经在父POM的<strong><code>dependencyManagement</code></strong>中声明，也不会产生任何实际效果。</p><p><strong><code>import</code></strong>依赖范围的依赖只在<strong><code>dependencyManagement</code></strong>元素下有效，使用该范围的依赖通常指向一个POM，作用是将目标POM中的<strong><code>dependencyManagement</code></strong>配置导入并合并到当前POM的<strong><code>dependencyManagement</code></strong>元素中。</p><p>若多个项目使用的依赖版本一致，则可以定义一个使用<strong><code>dependencyManagement</code></strong>专门管理依赖的POM，然后在各个项目中导入这些依赖管理配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.long.mvnbook.account<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>account-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h4><p>Maven提供了<strong><code>pluginManagement</code></strong>元素来帮助管理插件，在<strong>该元素中配置的依赖不会造成实际的插件调用行为</strong>，当POM中配置了真正的plugin元素，且其<strong><code>groupId</code></strong>和<strong><code>artifactId</code></strong>与<strong><code>pluginManagement</code></strong>中配置的插件匹配时，<strong><code>pluginManagement</code></strong>才会影响实际的插件行为。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父模快account-parent中声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sonar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.0.1398<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>sonar-scan<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>test<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>sonar<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 子模块account-email中使用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.sonarsource.scanner.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sonar-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>若子模块需要不同的插件配置，<strong>可以自行配置以覆盖父模块的<code>pluginManagement</code></strong>配置，当项目中多个模块有相同的插件配置时，应当将配置移到父POM的<strong><code>pluginManagement</code></strong>元素中。</p><h3 id="聚合与继承的关系"><a href="#聚合与继承的关系" class="headerlink" title="聚合与继承的关系"></a>聚合与继承的关系</h3><p>对于聚合模块，它<strong>知道被聚合的模块</strong>，但<strong>被聚合的模块不知道这个聚合模块</strong>的存在。</p><p>对于继承关系的父POM，它<strong>不知道哪些子模块</strong>继承了它，但<strong>子模块都必须知道自己的父POM</strong>。</p><p>聚合POM与继承关系中的父POM的<strong><code>packaging</code></strong>都必须时<strong><code>pom</code></strong>，且都是<strong>除POM之外没有实际的内容</strong>。</p><h3 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h3><p>Maven<strong>提倡约定优于配置</strong>，使用约定可以<strong>大量减少配置</strong>，遵循约定虽然<strong>损失一定的灵活性</strong>，但却能减少配置，且<strong>能帮助遵守构建标准</strong>。</p><p>任何一个Maven项目都<strong>隐式地继承超级POM</strong>，Maven 3中超级POM文件在<strong><code>$MAVEN_HOME/lib/maven-model-builder-x.x.x.jar</code></strong>中的<strong><code>org/apache/maven/model/pom-4.0.0.xml</code></strong>路径下。Maven 2中超级POM文件在<strong><code>$MAVEN_HOME/lib/maven-x.x.x-uber.jar</code></strong>中的<strong><code>org/apache/maven/project/pom-4.0.0.xml</code></strong>路径下。</p><p>超级POM定义了仓库及插件仓库，都关闭了SNAPSHOT的支持。</p><h3 id="反应堆"><a href="#反应堆" class="headerlink" title="反应堆"></a>反应堆</h3><p>在一个<strong>多模块</strong>的Maven项目中，反应堆时指<strong>所有模块组成的一个构建结构</strong>，对于<strong>单模块项目，反应堆就是该模块本身</strong>，多模块的项目，反应堆就<strong>包括了各个模块之间的继承与依赖关系</strong>，从而能<strong>自动计算出合理的模块构建顺序</strong>。</p><p><strong>Maven按序读取POM，若该POM没有依赖模块，则构建该模块，否则先构建依赖模块，若该依赖模块还依赖其他模块，则进一步先构建依赖的依赖</strong>。</p><p><strong>模块间的依赖关系会将反应堆构成一个有向非循环图</strong>，各个<strong>模块是该图的节点</strong>，<strong>依赖关系构成了有向边</strong>，且该图<strong>不允许出现循环</strong>，当出现A模块依赖于B，B又依赖于A时，Maven会报错。</p><p>若仅仅构建完整反应堆中的某些模块，则需要实时的裁剪反应堆。Maven提供很多命令行选项支持裁剪反应堆:</p><ul><li><strong><code>-am, --also-make</code></strong> 同时构建<strong>所列模块的依赖模块</strong></li><li><strong><code>-amd -also-make-dependents</code></strong> 同时构建<strong>依赖于所列模块的模块</strong></li><li><strong><code>-pl, --project</code></strong> &lt; arg &gt; 构建<strong>指定的模块</strong>，模块间用逗号隔开</li><li><strong><code>-rf -resume-from</code></strong> &lt;args&gt; <strong>从指定模块回复反应堆</strong></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;聚合&quot;&gt;&lt;a href=&quot;#聚合&quot; class=&quot;headerlink&quot; title=&quot;聚合&quot;&gt;&lt;/a&gt;聚合&lt;/h3&gt;&lt;p&gt;Maven&lt;strong&gt;聚合&lt;/strong&gt;又称为&lt;strong&gt;多模块&lt;/strong&gt;，该特性是为了一次构件多个项目，而不用到每个项
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven插件基础</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E6%8F%92%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven插件基础/</id>
    <published>2019-01-02T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.591Z</updated>
    
    <content type="html"><![CDATA[<p>Maven核心<strong>仅仅定义了抽象的生命周期</strong>，<strong>具体任务交给插件来完成</strong>，插件以独立的构件形式存在，Maven核心分发包<strong>不到<code>3M</code></strong>大小，Maven会在需要时下载并使用插件。如<strong><code>maven-dependency-plugin</code></strong>能分析项目依赖，找出潜在无用依赖，列出项目依赖树，分析依赖来源等</p><p><strong>生命周期的阶段与插件的目标相互绑定</strong>，来完成某个具体的构建任务，例如项目<strong>编译任务</strong>对应了<strong><code>default</code>生命周期的<code>compile</code>阶段</strong>，而<strong><code>maven-compiler-plugin</code></strong>插件的<strong><code>compile</code>目标</strong>能完成该任务，将其绑定能实现项目编译目的</p><p>插件的每个<strong>目标</strong>都对应一个<strong>功能</strong>，如<strong><code>dependency:analyze</code></strong>、<strong><code>dependency:tree</code></strong>、<strong><code>dependency:list</code></strong>，<strong>冒号前面是插件前缀</strong>，<strong>冒号后面是插件目标</strong></p><h3 id="插件绑定"><a href="#插件绑定" class="headerlink" title="插件绑定"></a>插件绑定</h3><p>Maven核心<strong>默认</strong>为一些主要的生命周期阶段<strong>内置绑定</strong>了很多插件目标，当调用生命周期阶段时，对应的插件目标就会执行相应的任务。</p><table><thead><tr><th style="text-align:center">生命周期阶段</th><th style="text-align:center">插件目标</th><th style="text-align:center">执行任务</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>pre-clean</code></strong></td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><strong><code>clean</code></strong></td><td style="text-align:center"><strong><code>maven-clean-plugin:clean</code></strong></td><td style="text-align:center">删除项目输出目录</td></tr><tr><td style="text-align:center"><strong><code>post-clean</code></strong></td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><strong><code>pre-site</code></strong></td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><strong><code>site</code></strong></td><td style="text-align:center"><strong><code>maven-site-plugin:site</code></strong></td><td style="text-align:center">生成项目站点</td></tr><tr><td style="text-align:center"><strong><code>post-site</code></strong></td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center"><strong><code>site-deploy</code></strong></td><td style="text-align:center"><strong><code>maven-site-plugin:deploy</code></strong></td><td style="text-align:center">将项目站点部署到远程服务器</td></tr><tr><td style="text-align:center"><strong><code>pro-resources</code></strong></td><td style="text-align:center"><strong><code>maven-resources-plugin:resources</code></strong></td><td style="text-align:center">复制主资源文件至主输出目录</td></tr><tr><td style="text-align:center"><strong><code>compile</code></strong></td><td style="text-align:center"><strong><code>maven-compiler-plugin:compile</code></strong></td><td style="text-align:center">编译主代码至主输出目录</td></tr><tr><td style="text-align:center"><strong><code>process-test-resources</code></strong></td><td style="text-align:center"><strong><code>maven-resources-plugin:testResources</code></strong></td><td style="text-align:center">复制测试资源文件至测试输出目录</td></tr><tr><td style="text-align:center"><strong><code>test-compile</code></strong></td><td style="text-align:center"><strong><code>maven-compiler-plugin:testCompile</code></strong></td><td style="text-align:center">编译测试代码至测试输出目录</td></tr><tr><td style="text-align:center"><strong><code>test</code></strong></td><td style="text-align:center"><strong><code>maven-surefire-plugin:test</code></strong></td><td style="text-align:center">执行测试用例</td></tr><tr><td style="text-align:center"><strong><code>package</code></strong></td><td style="text-align:center"><strong><code>maven-jar-plugin:jar</code></strong></td><td style="text-align:center">创建项目jar包</td></tr><tr><td style="text-align:center"><strong><code>install</code></strong></td><td style="text-align:center"><strong><code>maven-install-plugin:install</code></strong></td><td style="text-align:center">将项目输出构件安装到本地仓库</td></tr><tr><td style="text-align:center"><strong><code>deploy</code></strong></td><td style="text-align:center"><strong><code>maven-deploy-plugin:deploy</code></strong></td><td style="text-align:center">将项目输出构件部署到远程仓库</td></tr></tbody></table><p>上表只列出了<strong><code>clean</code></strong>和<strong><code>site</code></strong>生命周期<strong>插件绑定关系</strong>，以及<strong><code>default</code></strong>生命周期<strong>拥有插件绑定关系的阶段</strong>，default生命周期还有很多其他阶段，默认<strong>没有绑定任何插件</strong>，故<strong>无任何实际行为</strong>。</p><p>还可以<strong>自定义将某个插件目标绑定到生命周期的某个阶段上</strong>，可以通过<strong><code>phrase</code></strong>标签将<strong><code>goals</code></strong>标签中<strong>指定的插件目标</strong>绑定到具体的生命周期阶段上。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xml-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xslt-generate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>transform<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>executions</code></strong>下每一个<strong><code>execution</code></strong>都可以用来配置执行一个任务，通过<strong><code>phase</code></strong>将<strong><code>xml-maven-plugin</code></strong>的<strong><code>transform</code>目标</strong>绑定到<strong><code>default</code>生命周期的<code>compile</code>阶段</strong>上。<strong><code>goals</code></strong>用于<strong>配置指定要执行的插件目标</strong>。</p><p>很多插件目标在<strong>编写时已定义了默认绑定阶段</strong>，即使不通过phase元素配置生命周期阶段，也能绑定到生命周期中去。</p><p>当<strong>多个插件目标</strong>绑定到<strong>同一个生命周期阶段</strong>时，插件<strong>声明的先后顺序决定了目标执行的顺序</strong>。</p><h3 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h3><p>完成插件目标和声明周期阶段绑定后，还能<strong>配置插件目标参数</strong>，几乎所有插件目标都有一些可配置的参数，可通过<strong>命令行</strong>和<strong>POM配置</strong>等方式来配置。</p><p>Maven命令行中可以使用：<strong><code>-D</code>参数键<code>=</code>参数值</strong>，来配置插件目标参数。例如：<strong><code>mvn install -Dmaven.test.skip=true</code></strong></p><p>并非所有插件参数都适合命令行配置，可以在插件声明时，对插件进行全局配置，所有基于该插件的目标任务都会使用全局配置。还可以为插件的某个目标配置特定的参数。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2.maven2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jaxb2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 全局配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schemaDirectory</span>&gt;</span>src/main/resources/xsd<span class="tag">&lt;/<span class="name">schemaDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateDirectory</span>&gt;</span>src/main/java/<span class="tag">&lt;/<span class="name">generateDirectory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xsd1-generate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 特定目标任务配置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">schemaIncludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>test.xsd<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">schemaIncludes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="获取插件信息"><a href="#获取插件信息" class="headerlink" title="获取插件信息"></a>获取插件信息</h3><p>主要的插件都来自Apache和Codehaus，文档链接分别为 <strong><code>http://maven.apache.org/plugin/index.html</code></strong> 和 <strong><code>http://mojo.codehaus.org/plugins.html</code></strong>，下载地址分别为 <strong><code>http://repo1.maven.org/maven2/org/apache/maven/plugins</code></strong> 和 <strong><code>http://repository.codehaus.org/org/codehuas/mojo</code></strong></p><p>可以使用<strong><code>maven-help-plugin</code></strong>查看插件详细信息。查看<strong>插件目标默认绑定阶段</strong>：<strong><code>mvn help:</code>目标<code>-DgroupId:artifactId:version</code></strong>，例如：<strong><code>mvn help:describe-Dplugin = org.apache.maven.plugins:maven-source-plugin:2.1.1</code></strong>，可以<strong>省去版本</strong>信息，可以<strong>使用插件目标前缀</strong>替换坐标，加上<strong><code>goal</code></strong>参数仅查询描述<strong>插件目标信息</strong>，加上<strong><code>detail</code></strong>参数查询<strong>详细信息</strong>，例如：<strong><code>mvn help:describe-Dplugin=compiler[-Dgoal=compiler][-Ddetail]</code></strong></p><p>明显可以发现<strong>命令行传入参数不同于该插件目标参数名称</strong>，命令行参数是由插件参数表达式（Expression）决定的，例如<strong><code>surefire:test skip</code></strong>参数表达式为<strong><code>${maven.test.skip}</code></strong>。并非所有插件目标都有表达式，一些插件目标参数只能在POM中配置。</p><h3 id="插件解析机制"><a href="#插件解析机制" class="headerlink" title="插件解析机制"></a>插件解析机制</h3><p>与依赖构件一样，插件构件同样基于坐标存储在Maven仓库中。需要时，Maven会从本地仓库寻找插件，若不存在，则从远程仓库查找，找到后下载到本地仓库使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p>所有子<strong>元素表达含义与依赖远程仓库配置完全</strong>一样。</p><p>若插件的<strong><code>groupId</code></strong>为<strong><code>org.apache.maven.plugins</code></strong>表示为<strong>官方插件</strong>，在配置插件信息时可以<strong>省略<code>groupId</code></strong>，不推荐使用。</p><p>插件版本的解析与依赖版本解析类似，未提供版本会自动解析版本，Maven在<strong>超级POM中为所有核心插件设定了版本</strong>，在使用核心插件时即使不做任何配置，其版本已经确定了。</p><p>若某个插件未设定版本，又<strong>不是核心插件</strong>，Maven会检查所有仓库中可用版本，然后做出选择，选择版本<strong>方式与依赖类似</strong>，都是<strong>到归并后的元数据文件中确定版本</strong>。</p><p>插件解析元数据时，会默认使用<strong><code>org.apache.maven.plugins</code></strong>和<strong><code>org.codehaus.mojo</code></strong>两个<strong><code>groupId</code></strong>，也可以通过<strong><code>settings</code></strong>配置让Maven检查其他groupId上的插件仓库元数据。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>com.your.plugins<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br></pre></td></tr></table></figure><p>基于该配置Maven不仅会检查<strong><code>org/apache/maven/plugins/maven-metadata.xml</code></strong> 和 <strong><code>org/codehaus/mojo/maven-metadata.xml</code></strong> 还会检查 <strong><code>com/your/plugins/maven-metadata.xml</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache Maven ACR Plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>acr<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-acr-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Apache Maven Ant Plugin<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">prefix</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">prefix</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-ant-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>prefix</code>表示插件前缀</strong>，当Maven解析到类似dependency:tree命令时，先<strong>基于默认<code>groupId</code>归并所有插件仓库元数据</strong>，再检查归并后的元数据，<strong>根据<code>prefix</code>找到对应的<code>artifactId</code></strong>，然后<strong>结合当前元数据的<code>groupId</code>解析得到<code>version</code></strong>，就得到了完整的坐标。若<strong><code>org/apache/maven/plugins/maven-metadata.xml</code></strong>没有记录该插件前缀，则接着<strong>检查剩下的两个元数据</strong>。若所有元数据<strong>都不包含该前缀则报错</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven核心&lt;strong&gt;仅仅定义了抽象的生命周期&lt;/strong&gt;，&lt;strong&gt;具体任务交给插件来完成&lt;/strong&gt;，插件以独立的构件形式存在，Maven核心分发包&lt;strong&gt;不到&lt;code&gt;3M&lt;/code&gt;&lt;/strong&gt;大小，Maven会在需要时下
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven仓库</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E4%BB%93%E5%BA%93/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven仓库/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.589Z</updated>
    
    <content type="html"><![CDATA[<p><strong>坐标</strong>和<strong>依赖</strong>是任何一个<strong>构件</strong>在Maven世界中的<strong>逻辑表示方式</strong>，<strong>任何一个构件都有一组坐标唯一标识</strong>，而构件的<strong>物理表示方式是文件</strong>，Maven通过<strong>仓库</strong>来统一管理这些<strong>文件</strong>。</p><h3 id="仓库布局"><a href="#仓库布局" class="headerlink" title="仓库布局"></a>仓库布局</h3><p>任何一个<strong>构件</strong>都有其<strong>唯一的坐标</strong>，<strong>根据这个坐标可以定义其在仓库中的唯一存储路径</strong>，且存储路径大致对应关系为<strong><code>groupId/artifactId/version/artifactId-version[-classifier].packaging</code></strong>，<strong>这便是Maven的仓库布局</strong>。</p><p>Maven仓库是基于<strong>简单的文件系统存储</strong>的，当遇到一些仓库问题时，能很方便地查找相关文件，方便问题定位。</p><h3 id="仓库分类"><a href="#仓库分类" class="headerlink" title="仓库分类"></a>仓库分类</h3><p>仓库只分为<strong>本地仓库</strong>和<strong>远程仓库</strong>两类。Maven根据坐标寻找构件时，<strong>先查看本地仓库</strong>，若存在直接使用；若不存在或需要查看是否有更新的构件版本，再去远程仓库查找，发现后下载到本地仓库再使用。<strong>若本地仓库和远程仓库都没有Maven就会报错</strong>。</p><p><strong>中央远程仓库</strong>是Maven核心的<strong>自带的远程仓库</strong>，其包含了绝大部分开源构件。<strong>默认使用中央仓库</strong>。</p><p><strong>私服是另一种特殊的远程仓库</strong>，为了节省带宽和时间，应在局域网内架设一个私有的仓库服务器，使其代理所有外部远程仓库，且内部项目还能部署到私服上供其他项目使用。</p><p>除中央仓库和私服外还有很多其他公开的远程仓库，<a href="http://download.java.net/maven/2/" rel="external nofollow noopener noreferrer" target="_blank">Java.net Maven库</a> 和 <a href="http://respository.jboss.com/maven2/" rel="external nofollow noopener noreferrer" target="_blank">JBoss Maven库</a></p><p><img src="../../../images/Maven/Maven仓库分类.png" alt="Maven仓库分类"></p><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><p>Maven安装文件自带中央仓库的配置，在<strong><code>$M2_HOME/lib/maven-model-builder-3.3.9.jar/org/apache/maven/pom-4.0.0.xml</code></strong>中，且这段配置的文件是<strong>所有Maven项目都会继承的超级<code>POM</code></strong>：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不从中央仓库下载快照版本的构件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Central Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://repo.maven.apache.org/maven2<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span>default<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不从中央仓库下载快照版本的构件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>never<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="私服"><a href="#私服" class="headerlink" title="私服"></a>私服</h3><p>私服代理广域网上的远程仓库，下载构件时从私服请求，若不存在则从外部远程仓库下载，缓存到私服后再提供下载服务，一些无法从外部下载的构件也能从本地上传到私服共大家使用。</p><p><img src="../../../images/Maven/Maven私服用途.png" alt="Maven私服用途"></p><p><strong>降低中央仓库负荷</strong></p><p><strong>节省外网带宽</strong>：私服能<strong>消除大量对外部仓库的重复请求</strong>，从而节省带宽</p><p><strong>加速Maven构件</strong>：Maven快照更新检查等机制要求在执行构件时<strong>不停检查远程仓库数据</strong>，若配置了很多外部远程仓库，由于不停的连接请求外部远程仓库非常耗时，导致构件速度大大降低，使用私服只需要检查局域网私服的数据</p><p><strong>部署第三方构件</strong>：如一些组织内部私有构件无法从外部仓库获取，但又不能发布到公共仓库，可以发布到私服中，供内部的Maven项目使用</p><p><strong>提高稳定性增强控制</strong>：Maven构建高度依赖远程仓库，当网络不稳定时，Maven构建会非常不稳定，甚至无法构建</p><h3 id="远程仓库配置"><a href="#远程仓库配置" class="headerlink" title="远程仓库配置"></a>远程仓库配置</h3><p>若默认中央仓库无法满足项目需求，需配置其他远程仓库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>bintray<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://dl.bintray.com/andsel/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">checksumPolicy</span>&gt;</span>warn<span class="tag">&lt;/<span class="name">checksumPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>repositories</code></strong>元素下，可以使用<strong><code>repository</code></strong>子元素声明<strong>一个或多个</strong>远程仓库，且任何一个仓库声明的<strong><code>id</code>必须唯一</strong>，且Maven<strong>自带中央仓库<code>id</code>为<code>central</code></strong>，<strong>若其它仓库声明也使用该<code>id</code>，会覆盖中央仓库的配置</strong>。</p><p><strong><code>url</code></strong>指<strong>仓库地址</strong>，一般都<strong>基于<code>http</code>协议</strong>。</p><p><strong><code>releases</code></strong>和<strong><code>snapshots</code></strong>元素用来<strong>控制</strong>Maven对于<strong>发布版本构件</strong>和<strong>快照版本构件</strong>的下载，<strong><code>releases</code>的<code>enabled</code>值为<code>true</code>表示开启仓库发布版本下载支持</strong>，<strong><code>snapshots</code>的<code>enabled</code>值为<code>false</code>表示关闭仓库快照版本下载支持</strong>。</p><p><strong><code>updatePolicy</code></strong>元素用来<strong>配置</strong>Maven从远程仓库<strong>检查更新的频率</strong>，<strong>默认<code>daily</code>每天检查更新一次</strong>，<strong><code>never</code></strong>表示<strong>从不检查更新</strong>，<strong><code>always</code></strong>表示<strong>每次构件都检查更新</strong>，<strong><code>interval：X</code></strong>表示<strong>每隔X分钟检查更新一次</strong>（X为任意整数）</p><p><strong><code>checksumPolicy</code></strong>元素用来<strong>配置</strong>Maven<strong>检查检验和文件的策略</strong>，当构件部署到Maven仓库时，会<strong>同时部署对应的检验和文件</strong>，<strong>下载构件时会验证校验和文件</strong>。<strong><code>checksumPolicy</code>默认值为<code>warn</code></strong>表示<strong>校验和文件验证失败</strong>在执行构建时<strong>输出警告信息</strong>，<strong><code>fail</code></strong>表示让<strong>构建失败</strong>，<strong><code>ignore</code></strong>表示<strong>完全忽略校验和错误</strong>。</p><h3 id="远程仓库认证"><a href="#远程仓库认证" class="headerlink" title="远程仓库认证"></a>远程仓库认证</h3><p>配置认证信息与配置仓库信息不同，仓库信息可直接配置在项目的POM文件中，但<strong>认证信息必须配置在<code>setting.xml</code>文件中</strong>，这样更为安全。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>deploymentRepo<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">username</span>&gt;</span>repouser<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">password</span>&gt;</span>repopwd<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>servers</code></strong>元素下同样可以<strong>配置多个<code>server</code></strong>，这里的<strong><code>id</code>元素必须与<code>POM</code>中需要认证的<code>repository</code>元素的<code>id</code>完全一致</strong>。</p><h3 id="部署至远程仓库"><a href="#部署至远程仓库" class="headerlink" title="部署至远程仓库"></a>部署至远程仓库</h3><p>要将项目生成的构件部署到仓库，需要在项目<strong><code>pom.xml</code></strong>中配置<strong><code>distributionManagement</code></strong>元素</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>company-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>company-deploy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://nexus.company.com/repository/company-deploy/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>company-snapshot-deploy<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>company-snapshot-deploy<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://nexus.company.com/repository/company-snapshot-deploy/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>distributionManagement</code></strong>元素包含repository发布版本构件仓库和snapshotRepository快照版本仓库，id为该仓库的唯一标识，name为了方便阅读，url为该仓库地址。</p><p>命令行运行<strong><code>mvn clean deploy</code></strong>，Maven就会<strong>将项目构建输出的构件部署到配置对应的远程仓库</strong>，若<strong>当前版本是快照版本，则部署到快照版本仓库地址，反之部署到发布版本仓库地址</strong>。</p><h3 id="快照版本"><a href="#快照版本" class="headerlink" title="快照版本"></a>快照版本</h3><p>任何一个项目或构件都<strong>必须有自己的版本</strong>，版本的值可能是<strong><code>1.0.0</code></strong>、<strong><code>1.3-alpha-4</code></strong>、<strong><code>3.0</code></strong>、<strong><code>2.1-SNAPSHOT</code></strong>或<strong><code>2.1-20091216.221212-13</code></strong>。<strong><code>1.0.0</code></strong>、<strong><code>1.3-alpha-4</code></strong>和<strong><code>3.0</code></strong>是<strong>稳定发布版本</strong>，<strong><code>2.1-SNAPSHOT</code></strong>和<strong><code>2.1-20091216.221212-13</code></strong>是<strong>不稳定快照版本</strong>。</p><p>使用快照版本，避免了在协同开发多个相互依赖的模块时，各个模块<strong>频繁更新<code>POM</code></strong>，以及频繁代码更新造成的<strong>版本好滥用</strong>。</p><p>当构件A的版本好设置为快照版本如<strong><code>2.1-SNAPSHOT</code></strong>时，在发布私服过程中，Maven会<strong>自动为构件打上时间戳</strong>，若构件B依赖与构件A的<strong><code>2.1-SNAPSHOT</code></strong>版本，当构建模块B时Maven会<strong>自动</strong>从远程仓库检查模块A的<strong><code>2.1-SNAPSHOT</code></strong>的最新构件，当发现更新时下载。默认每天检查一次，也可通过命令<strong><code>mvn clean install-U</code>强制让Maven检查更新</strong>。</p><p>快照版本只应该在组织内部的项目或模块间依赖使用，项目<strong>不应该依赖与任何组织外部的快照版本依赖</strong>，因为<strong>快照版本不稳定可能造成潜在风险</strong>。</p><h3 id="仓库解析依赖机制"><a href="#仓库解析依赖机制" class="headerlink" title="仓库解析依赖机制"></a>仓库解析依赖机制</h3><p>依赖范围是<strong><code>system</code></strong>时，Maven直接<strong>从本地文件系统解析构件</strong>。</p><p>根据依赖坐标计算仓库路径后，<strong>尝试直接从本地仓库寻找构件</strong>，若发现构件，则解析成功。</p><p><strong>本地仓库不存在</strong>，若<strong>依赖版本是显示的发布版本</strong>构件，<strong>遍历所有远程仓库</strong>，发现后下载并解析使用。</p><p>若依赖版本是<strong><code>RELEASE</code></strong>或<strong><code>LATEST</code></strong>，则<strong>基于更新策略</strong>读取所有远程仓库的<strong>元数据<code>groupId/artifactId/maven-metadata.xml</code></strong>，将其<strong>与本地仓库对应的元数据合并</strong>后，计算出<strong><code>RELEASE</code></strong>或<strong><code>LATEST</code></strong>真实值，然后<strong>基于该真实值检查本地仓库和远程仓库</strong>。</p><p>若依赖版本是<strong>SNAPSHOT</strong>，则基于<strong>更新策略</strong>读取所有远程仓库<strong>元数据<code>groupId/artifactId/version/maven-metadata-snapshot.xml</code></strong>，将其<strong>与本地仓库对应的元数据合并</strong>，得到最新快照版本值，然后基于该值<strong>检查本地仓库和远程仓库</strong>。</p><p>若最后解析得到的构件版本是<strong>时间戳格式</strong>的快照，则<strong>复制其时间戳格式</strong>的文件至<strong>非时间戳格式</strong>，并<strong>使用非时间戳格式</strong>的构件。</p><p>若当前<strong>版本不明晰</strong>的，如<strong><code>RELEASE</code></strong>、<strong><code>LATEST</code></strong>和<strong><code>SNAPSHOT</code></strong>，Maven需要基于<strong>更新远程仓库的更新策略</strong>来检查更新。还可以使用<strong><code>-U</code>参数强制检查更新</strong>，此时会忽略<strong><code>&lt;updatePolicy&gt;</code></strong>配置。</p><p>当Maven检查完更新策略，并决定检查依赖更新时，就<strong>需要检查仓库元数据<code>maven-metadata.xml</code></strong>。<strong><code>LATEST</code></strong>指向了<strong>元数据中最新的</strong>那个版本，<strong><code>RELEASE</code></strong>指向了<strong>元数据中最新的发布版本</strong>。Maven通过<strong>合并多个远程仓库及本地仓库的元数据</strong>，就能计算出<strong>基于所有仓库的<code>LATEST</code>和<code>RELEASE</code></strong>，然后<strong>再解析具体的构件</strong>。</p><p>不推荐在依赖声明中使用<strong><code>LATEST</code></strong>和<strong><code>RELEASE</code></strong>，因为Maven随时都可能解析到不同的构件。<strong><code>Maven3</code>不再支持在插件配置中使用<code>LATEST</code>和<code>RELEASE</code></strong>。</p><p>若<strong>不设置插件版本</strong>，其效果就和<strong><code>RELEASE</code></strong>一样，Maven会解析最新的发布版本构件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">metadata</span> <span class="attr">modelVersion</span>=<span class="string">"1.1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.test<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>web-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">versioning</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshot</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">timestamp</span>&gt;</span>20180831.035005<span class="tag">&lt;/<span class="name">timestamp</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">buildNumber</span>&gt;</span>11<span class="tag">&lt;/<span class="name">buildNumber</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">lastUpdated</span>&gt;</span>20180831035005<span class="tag">&lt;/<span class="name">lastUpdated</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">snapshotVersions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">snapshotVersion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extension</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>3.1.0-20180831.035005-11<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">updated</span>&gt;</span>20180831035005<span class="tag">&lt;/<span class="name">updated</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">snapshotVersion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">snapshotVersions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">versioning</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>timestamp</code></strong>和<strong><code>buildNumber</code></strong>分别代表了这一快照的<strong>时间戳</strong>和<strong>构件号</strong>。</p><p>仓库元数据并<strong>不是永远正确</strong>的，若<strong>无法解析</strong>或<strong>解析错误</strong>，可能出现了元数据错误，可以<strong>手工</strong>或<strong>使用工具</strong>修复。</p><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>若仓库A能提供仓库B存储的所有内容，则A就是B的一个镜像，任何一个能从B仓库获得的构件都能从镜像中获取。<a href="http://maven.net.cn/content/groups/public/" rel="external nofollow noopener noreferrer" target="_blank">http://maven.net.cn/content/groups/public/</a> 是中央仓库 <a href="http://repo1.maven.org/maven2" rel="external nofollow noopener noreferrer" target="_blank">http://repo1.maven.org/maven2</a> 在中国的镜像。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>mirrorId<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>repositoryId<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://my.repository.com/repo/path<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>mirrorOf</code></strong>的值为<strong><code>central</code></strong>，表示该配置为中央仓库的镜像，任何对于中央仓库的请求都会转至该镜像。<strong><code>id</code></strong>、<strong><code>name</code></strong>、<strong><code>url</code></strong>与一般仓库配置无异，表示该镜像仓库的<strong>唯一标识符</strong>、<strong>名称</strong>以及<strong>地址</strong>。<strong>若需要认证也可以基于该<code>id</code>配置仓库认证</strong>。</p><p>镜像的一个更常见的用法是<strong>结合私服</strong>，<strong>私服就是所有仓库的镜像</strong>。</p><p><strong><code>&lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</code></strong>：匹配<strong>所有远程仓库</strong></p><p><strong><code>&lt;mirrorOf&gt;external: *&lt;/mirrorOf&gt;</code></strong>：匹配<strong>所有远程仓库</strong>，使用localhost的除外，使用file://协议的除外。匹配<strong>所有不在本机上的远程仓库</strong>。</p><p><strong><code>&lt;mirrorOf&gt;repo1, repo2&lt;/mirrorOf&gt;</code></strong>：匹配仓库<strong><code>repo1</code></strong>、<strong><code>repo2</code></strong>，使用<strong>逗号分隔</strong>多个远程仓库。</p><p><strong><code>&lt;mirrorOf&gt;*, !repo1&lt;/mirrorOf&gt;</code></strong>：匹配所有远程仓库，<strong><code>repo1</code> 除外</strong>，使用<strong>感叹号</strong>将仓库<strong>从匹配中排除</strong>。</p><p>镜像仓库会<strong>完全屏蔽被镜像仓库</strong>，<strong>当镜像仓库不稳定或停止服务时</strong>，Maven<strong>无法访问被镜像仓库</strong>，因而<strong>将无法下载构件</strong>。</p><h3 id="仓库搜索服务"><a href="#仓库搜索服务" class="headerlink" title="仓库搜索服务"></a>仓库搜索服务</h3><p><strong><code>Sonatype Nexus</code></strong>：提供的关键字搜索、类名搜索、坐标搜索、校验和搜索等功能。</p><p><strong><code>Jarvana</code></strong>：提供基于关键字、类名的搜索，构件下载、依赖声明片段等功能。</p><p><strong><code>Mvnbrowser</code></strong>：只提供关键字搜索，能告知用户构件依赖于哪些构件，以及该构件被哪些其他构件依赖。</p><p><strong><code>MVNrepository</code></strong>：界面清新，提供关键字搜索、依赖声明代码片段、构件下载、依赖与被依赖关系信息、构件所包含信息等功能，提供一个简单图标，显示某个构件各个版本间的大小变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;坐标&lt;/strong&gt;和&lt;strong&gt;依赖&lt;/strong&gt;是任何一个&lt;strong&gt;构件&lt;/strong&gt;在Maven世界中的&lt;strong&gt;逻辑表示方式&lt;/strong&gt;，&lt;strong&gt;任何一个构件都有一组坐标唯一标识&lt;/strong&gt;，而构件的&lt;s
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven生命周期</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven生命周期/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.592Z</updated>
    
    <content type="html"><![CDATA[<p>Maven的<strong>生命周期是抽象的</strong>，生命周期本身不做任何实际的工作，其<strong>实际行为都由插件来完成</strong>，生命周期和插件两者<strong>协同工作</strong>，密不可分。<strong>每个生命周期步骤都可以绑定一个或多个插件行为</strong>，且Maven为大多数构建步骤编写并绑定了默认插件。</p><p>Maven拥有三套相互独立的生命周期，分别为<strong><code>clean</code></strong>、<strong><code>default</code></strong>和<strong><code>site</code></strong>。clean的目的是清理项目，default的目的是构建项目，site的目的是建立项目站点。每个生命周期包含一些<strong>有序的阶段</strong>，且<strong>后面的阶段依赖于前面的阶段</strong>，用户和Maven最直接的交互方式就是调用这些生命周期阶段。三套生命周期本身是<strong>相互独立</strong>的，可单独调用任何一个生命周期的任何一个阶段。</p><h3 id="clean生命周期"><a href="#clean生命周期" class="headerlink" title="clean生命周期"></a>clean生命周期</h3><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>pre-clean</code></strong></td><td>执行一些清理前需要完成的工作</td></tr><tr><td><strong><code>clean</code></strong></td><td>清理上一次构建生成的文件</td></tr><tr><td><strong><code>post-clean</code></strong></td><td>执行一些清理后需要完成的工作</td></tr></tbody></table><h3 id="default生命周期"><a href="#default生命周期" class="headerlink" title="default生命周期"></a>default生命周期</h3><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>validate</code></strong></td><td>验证项目是否正确，并提供所有必要信息</td></tr><tr><td><strong><code>initialize</code></strong></td><td>初始化构建状态，例如设置属性或创建目录</td></tr><tr><td><strong><code>generate-sources</code></strong></td><td>生成任何包含在编译中的源代码</td></tr><tr><td><strong><code>process-sources</code></strong></td><td>处理项目主资源文件，例如变量替换等</td></tr><tr><td><strong><code>generate-resources</code></strong></td><td>生成包含在包中的资源</td></tr><tr><td><strong><code>process-resources</code></strong></td><td>将资源复制并处理到目标目录，准备打包</td></tr><tr><td><strong><code>compile</code></strong></td><td>编译项目的源代码</td></tr><tr><td><strong><code>process-classes</code></strong></td><td>从编译中对生成的文件进行后续处理，例如对Java类进行字节码增强</td></tr><tr><td><strong><code>generate-test-sources</code></strong></td><td>生成任何包含在编译中的测试源代码</td></tr><tr><td><strong><code>process-test-sources</code></strong></td><td>处理测试源代码，例如过滤某些值</td></tr><tr><td><strong><code>generate-test-resources</code></strong></td><td>创建用于测试的资源</td></tr><tr><td><strong><code>process-test-resources</code></strong></td><td>将资源复制并处理到测试目标目录中</td></tr><tr><td><strong><code>test-compile</code></strong></td><td>将测试源代码编译到测试目标目录中</td></tr><tr><td><strong><code>process-test-classes</code></strong></td><td>对来自测试编译的生成文件进行后续处理，例如对Java类进行字节码增强</td></tr><tr><td><strong><code>test</code></strong></td><td>使用合适的单元测试框架运行测试</td></tr><tr><td><strong><code>prepare-package</code></strong></td><td>在实际包装之前执行准备包装所需的任何操作。例如解包，版本处理</td></tr><tr><td><strong><code>package</code></strong></td><td>获取已编译的代码并将其打包为可分发的格式，例如JAR、WAR</td></tr><tr><td><strong><code>pre-integration-test</code></strong></td><td>执行集成测试之前执行所需操作。例如设置所需环境。</td></tr><tr><td><strong><code>integration-test</code></strong></td><td>如有必要，将程序包处理并部署到可以运行集成测试的环境中</td></tr><tr><td><strong><code>post-integration-test</code></strong></td><td>执行集成测试后执行所需的操作。例如清理环境</td></tr><tr><td><strong><code>verify</code></strong></td><td>运行检查以验证包是否有效并符合质量标准</td></tr><tr><td><strong><code>install</code></strong></td><td>将软件包安装到本地存储库中，以便在本地用作其他项目的依赖项</td></tr><tr><td><strong><code>deploy</code></strong></td><td>将最终包复制到远程存储库以与其他开发人员和项目共享</td></tr></tbody></table><h3 id="site生命周期"><a href="#site生命周期" class="headerlink" title="site生命周期"></a>site生命周期</h3><table><thead><tr><th>阶段</th><th>描述</th></tr></thead><tbody><tr><td><strong><code>pre-site</code></strong></td><td>在实际项目站点生成之前执行所需的过程</td></tr><tr><td><strong><code>site</code></strong></td><td>生成项目的站点文档</td></tr><tr><td><strong><code>post-site</code></strong></td><td>执行完成站点生成所需的进程，并准备站点部署</td></tr><tr><td><strong><code>site-deploy</code></strong></td><td>将生成的站点文档部署到指定的Web服务器</td></tr></tbody></table><h3 id="命令行与生命周期"><a href="#命令行与生命周期" class="headerlink" title="命令行与生命周期"></a>命令行与生命周期</h3><p>从命令行执行Maven任务最主要方式就是调用Maven生命周期。</p><p><strong><code>mvn clean</code></strong>：调用<strong><code>clean</code></strong>生命周期的<strong><code>per-clean</code></strong>和<strong><code>clean</code></strong>阶段</p><p><strong><code>mvn test</code></strong>：调用<strong><code>default</code></strong>生命周期的<strong><code>validate</code></strong>到<strong><code>test</code></strong>的所有阶段</p><p><strong><code>mvn clean install</code></strong>：调用<strong><code>clean</code></strong>生命周期的<strong><code>per-clean</code></strong>和<strong><code>clean</code></strong>阶段和<strong><code>default</code></strong>生命周期的<strong><code>validate</code></strong>到<strong><code>install</code></strong>的所有阶段</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Maven的&lt;strong&gt;生命周期是抽象的&lt;/strong&gt;，生命周期本身不做任何实际的工作，其&lt;strong&gt;实际行为都由插件来完成&lt;/strong&gt;，生命周期和插件两者&lt;strong&gt;协同工作&lt;/strong&gt;，密不可分。&lt;strong&gt;每个生命周期步骤都可以绑定一个
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>XSD实用总结</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%9D%82%E8%AE%B0/XSD%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://yaoyinglong.github.io/Blog/杂记/XSD使用总结/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.598Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类生成插件配置"><a href="#类生成插件配置" class="headerlink" title="类生成插件配置"></a>类生成插件配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 将XSD文件自动生成POJO对象，每次变更用Maven重新编译一下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2.maven2<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jaxb2-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.14.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">schemaDirectory</span>&gt;</span>src/main/resources/xsd<span class="tag">&lt;/<span class="name">schemaDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">generateDirectory</span>&gt;</span>src/main/java/<span class="tag">&lt;/<span class="name">generateDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">packageLevelAnnotations</span>&gt;</span>false<span class="tag">&lt;/<span class="name">packageLevelAnnotations</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">noFileHeader</span>&gt;</span>true<span class="tag">&lt;/<span class="name">noFileHeader</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">episode</span>&gt;</span>false<span class="tag">&lt;/<span class="name">episode</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">readOnly</span>&gt;</span>true<span class="tag">&lt;/<span class="name">readOnly</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果不加生成的类注释会中文乱码 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置生成的类的注解语言en为英文 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">locale</span>&gt;</span>en<span class="tag">&lt;/<span class="name">locale</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>xsd1-generate<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>generate<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">args</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用XJC给生成Java类添加注解 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xannotate<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用XJC给生成Java类添加父类 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xinheritance<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 给生成Java类添加equals方法 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xequals<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 给生成Java类添加hashCode方法 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-XhashCode<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-Xvalue-constructor<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">arg</span>&gt;</span>-nv<span class="tag">&lt;/<span class="name">arg</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">args</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">extension</span>&gt;</span>true<span class="tag">&lt;/<span class="name">extension</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">schemaIncludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>test.xsd<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">schemaIncludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bindingIncludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>test.xjb<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bindingIncludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">generatePackage</span>&gt;</span>com.test.support.xml<span class="tag">&lt;/<span class="name">generatePackage</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 基础插件依赖 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2_commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb2-basics<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- -Xequals和-XhashCode参数用于生成equals和hashcode方法使用 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2_commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb2-value-constructor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 使用XJC给生成Java类添加注解 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2_commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb2-basics-annotate<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于生成equals和hashcode方法的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2_commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb2-basics-runtime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.11.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用于实现生成的类中加注解和实现继承等关系</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jaxb:bindings</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:jaxb</span>=<span class="string">"http://java.sun.com/xml/ns/jaxb"</span> <span class="attr">xmlns:xs</span>=<span class="string">"http://www.w3.org/2001/XMLSchema"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xjc</span>=<span class="string">"http://java.sun.com/xml/ns/jaxb/xjc"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:annox</span>=<span class="string">"http://annox.dev.java.net"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:inheritance</span>=<span class="string">"http://jaxb2-commons.dev.java.net/basic/inheritance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/jaxb http://java.sun.com/xml/ns/jaxb/bindingschema_2_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">jaxb:extensionBindingPrefixes</span>=<span class="string">"xjc annox inheritance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"2.1"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaxb:bindings</span> <span class="attr">schemaLocation</span>=<span class="string">"test.xsd"</span> <span class="attr">node</span>=<span class="string">"/xs:schema"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给生成的类添加serialVersionUID --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb:globalBindings</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jaxb:serializable</span> <span class="attr">uid</span>=<span class="string">"3710395777932380425"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxb:globalBindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给匹配的类添加注解 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb:bindings</span> <span class="attr">node</span>=<span class="string">"//xs:complexType"</span> <span class="attr">multiple</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">annox:annotateClass</span>&gt;</span>@lombok.Data<span class="tag">&lt;/<span class="name">annox:annotateClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">annox:annotateClass</span>&gt;</span>@lombok.EqualsAndHashCode<span class="tag">&lt;/<span class="name">annox:annotateClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb:bindings</span> <span class="attr">node</span>=<span class="string">"//xs:element"</span> <span class="attr">multiple</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">annox:annotateClass</span>&gt;</span>@lombok.Data<span class="tag">&lt;/<span class="name">annox:annotateClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">annox:annotateClass</span>&gt;</span>@lombok.EqualsAndHashCode<span class="tag">&lt;/<span class="name">annox:annotateClass</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给匹配的类添加父类 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb:bindings</span> <span class="attr">node</span>=<span class="string">"//xs:element[@name='BaselineModel']/xs:complexType"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inheritance:extends</span>&gt;</span>com.test.support.AbstractModel<span class="tag">&lt;/<span class="name">inheritance:extends</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jaxb:bindings</span> <span class="attr">node</span>=<span class="string">"//xs:element[@name='RuleModel']/xs:complexType"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">inheritance:extends</span>&gt;</span>com.test.support.AbstractModel<span class="tag">&lt;/<span class="name">inheritance:extends</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">jaxb:bindings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果<strong><code>schema</code></strong>文件和<strong><code>binding</code></strong>文件有变动只需要通过maven编译一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类生成插件配置&quot;&gt;&lt;a href=&quot;#类生成插件配置&quot; class=&quot;headerlink&quot; title=&quot;类生成插件配置&quot;&gt;&lt;/a&gt;类生成插件配置&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g
      
    
    </summary>
    
      <category term="杂记" scheme="http://yaoyinglong.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="XSD" scheme="http://yaoyinglong.github.io/tags/XSD/"/>
    
  </entry>
  
  <entry>
    <title>Maven常用工具</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven常用工具/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.590Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Mybatis-Plus"><a href="#Mybatis-Plus" class="headerlink" title="Mybatis Plus"></a>Mybatis Plus</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Mybatis 增强工具，在 Mybatis 的基础上只做增强不做改变，简化开发、提高效率。</p><h3 id="Okhttp"><a href="#Okhttp" class="headerlink" title="Okhttp"></a>Okhttp</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;okhttp.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>高效的HTTP客户端，默认特性：</p><ul><li>支持HTTP/2，允许所有同一个主机地址的请求共享同一个socket连接</li><li>连接池减少请求延时</li><li>透明的GZIP压缩减少响应数据的大小</li><li>缓存响应内容，避免一些完全重复的请求</li></ul><h3 id="Java工具包"><a href="#Java工具包" class="headerlink" title="Java工具包"></a>Java工具包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hutool.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Hutool是一个Java工具包类库，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，文档地址：<a href="https://www.hutool.cn/" rel="external nofollow noopener noreferrer" target="_blank">https://www.hutool.cn/</a></p><h3 id="分页插件"><a href="#分页插件" class="headerlink" title="分页插件"></a>分页插件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Lombok&quot;&gt;&lt;a href=&quot;#Lombok&quot; class=&quot;headerlink&quot; title=&quot;Lombok&quot;&gt;&lt;/a&gt;Lombok&lt;/h3&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>Maven基础</title>
    <link href="http://yaoyinglong.github.io/Blog/Maven/Maven%E5%9F%BA%E7%A1%80/"/>
    <id>http://yaoyinglong.github.io/Blog/Maven/Maven基础/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Maven坐标详解"><a href="#Maven坐标详解" class="headerlink" title="Maven坐标详解"></a>Maven坐标详解</h3><p><strong><code>groupId</code></strong>：定义当前Maven项目<strong><code>隶属的实际项目</code></strong>，不应该对应隶属的组织或公司，表示方式与Java包名表示方式类是。</p><p><strong><code>artifactId</code></strong>：定义实际项目中的一个Maven项目（模块），推荐使用实际项目名称作为前缀。</p><p><strong><code>version</code></strong>：项目当前版本号。</p><p><strong><code>type</code></strong>：依赖类型，默认为<strong><code>jar</code></strong>。</p><p><strong><code>scope</code></strong>：依赖范围。</p><p><strong><code>optional</code></strong>：标记依赖是否可选。</p><p><strong><code>exclusions</code></strong>：排除传递性依赖。</p><p><strong><code>packaging</code></strong>：项目打包方式，默认为<strong><code>jar</code></strong>。</p><p><strong><code>classifier</code></strong>：用来帮助定义构建输出的一些附属构件。不能直接定义项目classifier，附属构件不是项目直接默认生成，而是由附加插件帮组生成。附属构件名称一般规则<strong><code>artifactId-version[-classifier].packaging</code></strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.json-lib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-lib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classifier</span>&gt;</span>jdk15<span class="tag">&lt;/<span class="name">classifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="依赖范围"><a href="#依赖范围" class="headerlink" title="依赖范围"></a>依赖范围</h3><p>Maven在编译项目主代码时需使用一套classpath，在编译执行测试时会使用另一套classpath，实际运行项目时又会使用另一套classpath。依赖范围就是用来控制依赖与这三种classpath(<strong>编译classpath</strong>、<strong>测试classpath</strong>、<strong>运行classpath</strong>)的关系，<strong>依赖范围还对传递性依赖产生影响</strong>。</p><p><strong><code>compile</code></strong>：编译依赖范围，<strong>依赖默认值</strong>，使用此依赖范围的Maven依赖，对于<strong>编译、测试、运行三种classpath都有效</strong>。</p><p><strong><code>test</code></strong>：测试依赖范围，<strong>只对测试classpath有校</strong>，<strong>编译和运行时均无效</strong>。</p><p><strong><code>provided</code></strong>：以提供依赖范围，对<strong>编译</strong>和<strong>测试classpath有效</strong>，<strong>运行时无效</strong>。</p><p><strong><code>runtime</code></strong>：运行时依赖范围，<strong>测试和运行时有效</strong>，<strong>编译主代码时无效</strong>。</p><p><strong><code>system</code></strong>：系统依赖范围，该依赖与三种classpath的关系和provided依赖范围完全一致。但使用该依赖范围<strong>必须通过<code>systemPath</code>显示指定依赖文件路径</strong>，此依赖<strong>不通过Maven仓库解析</strong>，往往与<strong>本机绑定</strong>，可能造成构建的<strong>不可移植</strong>，且<strong>可引用环境变量</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;basedir&#125;/src/main/webapp/WEB-INF/lib/rt.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>import</code></strong>：导入依赖范围，不会对三种classpath产生实际影响。</p><table><thead><tr><th style="text-align:center">依赖范围(scope)</th><th style="text-align:center">对编译classpath有效</th><th style="text-align:center">对测试classpath有效</th><th style="text-align:center">对运行时classpath有效</th></tr></thead><tbody><tr><td style="text-align:center"><strong><code>compile</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td></tr><tr><td style="text-align:center"><strong><code>test</code></strong></td><td style="text-align:center"><strong>×</strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong>×</strong></td></tr><tr><td style="text-align:center"><strong><code>provided</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong>×</strong></td></tr><tr><td style="text-align:center"><strong><code>runtime</code></strong></td><td style="text-align:center"><strong>×</strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td></tr><tr><td style="text-align:center"><strong><code>system</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong><code>√</code></strong></td><td style="text-align:center"><strong>×</strong></td></tr></tbody></table><h3 id="传递性依赖"><a href="#传递性依赖" class="headerlink" title="传递性依赖"></a>传递性依赖</h3><p>Maven传递性依赖能很好的解决引入的依赖包依赖于其他开源类库的情况，大大<strong>简化和方便了依赖声明</strong>，大部分情况下只需要关心项目直接依赖，Maven会解析各个<strong>直接依赖的<code>POM</code></strong>，将<strong>必要的间接依赖</strong>以<strong>传递性依赖</strong>的形式引入到当前项目。</p><p><strong><code>A</code></strong>有一个<strong><code>compile</code></strong>范围的<strong><code>B</code></strong>依赖，而<strong><code>B</code></strong>有一个<strong><code>compile</code></strong>范围的<strong><code>C</code></strong>依赖，则<strong><code>C</code></strong>就成了<strong><code>A</code></strong>的<strong><code>compile</code></strong>范围依赖，即<strong><code>C</code></strong>是<strong><code>A</code></strong>的<strong>传递性依赖</strong>。<strong><code>A</code></strong>对于<strong><code>B</code></strong>是第一直接依赖，<strong><code>B</code></strong>对于<strong><code>C</code></strong>是第二直接依赖，下表种左边第一列表示第一直接依赖范围，第一行表示第二直接依赖范围，中间交叉单元格表示传递性依赖范围。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">compile</th><th style="text-align:center">test</th><th style="text-align:center">provided</th><th style="text-align:center">runtime</th></tr></thead><tbody><tr><td style="text-align:center"><strong>compile</strong></td><td style="text-align:center"><strong>compile</strong></td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center"><strong>runtime</strong></td></tr><tr><td style="text-align:center"><strong>test</strong></td><td style="text-align:center"><strong>test</strong></td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center"><strong>test</strong></td></tr><tr><td style="text-align:center"><strong>provided</strong></td><td style="text-align:center"><strong>provided</strong></td><td style="text-align:center">—</td><td style="text-align:center"><strong>provided</strong></td><td style="text-align:center"><strong>provided</strong></td></tr><tr><td style="text-align:center"><strong>runtime</strong></td><td style="text-align:center"><strong>runtime</strong></td><td style="text-align:center">—</td><td style="text-align:center">—</td><td style="text-align:center"><strong>runtime</strong></td></tr></tbody></table><p>当第二直接依赖范围是<strong><code>compile</code></strong>时，<strong>传递性依赖范围与第一直接依赖范围一致</strong>，当第二传递性依赖范围是<strong><code>test</code></strong>时，<strong>依赖不会传递</strong>，当第二直接依赖是<strong><code>provided</code></strong>时，<strong>只传递第一直接依赖范围为<code>provided</code>的依赖</strong>，且传递性依赖范围同样为provided，当第二直接依赖范围是<strong><code>runtime</code></strong>时，<strong>传递性依赖范围与第一直接依赖范围一致，但<code>compile</code>例外</strong>。</p><h3 id="依赖调解"><a href="#依赖调解" class="headerlink" title="依赖调解"></a>依赖调解</h3><p>当传递性依赖造成问题时，需要清楚的知道该传递性依赖时从哪条依赖路径引入，若项目A有这样的依赖关系：<strong><code>A —&gt; B —&gt; C —&gt; X(1.0)</code></strong>、<strong><code>A —&gt; D —&gt; X(2.0)</code></strong>。<strong><code>X</code></strong>是A的传递性依赖，但两条路径上有两个版本的<strong><code>X</code></strong>，这时Maven的依赖调解就会起作用。这时会用到依赖调解的<strong>第一原则：路径最近者优先</strong>。</p><p>但第一原则不能解决类似：<strong><code>A —&gt; B —&gt; Y(1.0)</code></strong>、<strong><code>A —&gt; C —&gt; Y(2.0)</code></strong>依赖路径<strong>长度一样</strong>的情况。从<strong><code>Maven 2.0.9</code></strong>开始定义的<strong>第二原则：第一声明者优先</strong>。</p><h3 id="可选依赖"><a href="#可选依赖" class="headerlink" title="可选依赖"></a>可选依赖</h3><p>若存在<strong><code>A —&gt; B</code></strong>、<strong><code>B —&gt; X(可选)</code></strong>、<strong><code>B —&gt; Y(可选)</code></strong>，由于传递性依赖的定义，<strong><code>X</code>、<code>Y</code>是可选依赖，依赖将不会得以传递</strong>。</p><p>但为什么要使用可选依赖呢？可能项目B实现了两个互斥特性<strong><code>X</code></strong>和<strong><code>Y</code></strong>，用户不可能同时使用这两个特性。理想情况下不应该使用可选依赖。</p><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>传递性依赖会给项目隐式地引入很多依赖，极大的简化项目依赖管理的同时也会带来一些问题。若项目<strong><code>A</code></strong>依赖于<strong><code>B</code></strong>，而<strong><code>B</code></strong>又依赖于另一个类库的<strong><code>SNAPSHOP</code></strong>版本，但由于<strong><code>SNAPSHOP</code></strong>的不稳定直接影响到当前项目，这时就需要排除<strong><code>SNAPSHOP</code></strong>引入一个正式版。在依赖冲突时，也需要排除冲突的依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jvnet.jaxb2-commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>property-listener-injector<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxb-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml.bind<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong><code>exclusions</code></strong>元素可以包含一个或多个<strong><code>exclusion</code></strong>子元素，声明<strong><code>exclusion</code></strong>时<strong>只需要<code>groupId</code>和<code>artifactId</code>不需要<code>version</code>元素</strong>，因为<strong>Maven解析后的依赖中，不可能存在<code>groupId</code>和<code>artifactId</code>相同<code>version</code>不同的两个依赖</strong>。</p><h3 id="依赖归类"><a href="#依赖归类" class="headerlink" title="依赖归类"></a>依赖归类</h3><p>引入的同一项目中的不同模块，这些依赖的版本应该是相同的，最好使用<strong><code>properties</code></strong>元素定义Maven属性，使用<strong>美元符号和大括弧环绕的方式引用Maven属性</strong>。</p><h3 id="依赖优化"><a href="#依赖优化" class="headerlink" title="依赖优化"></a>依赖优化</h3><p><strong><code>mvn dependency:list</code></strong>  查看当前项目的已解析依赖</p><p><strong><code>mvn dependency:tree</code></strong>  查看当前项目的依赖树</p><p><strong><code>mvn dependency:analyze</code></strong>  分析当前项目的依赖。<strong><code>Used undeclared dependencies</code>表示使用到了但未显示声明依赖</strong>，意味着存在潜在风险，当直接依赖升级相关依赖发生版本变化可能导致当前项目出错。<strong><code>Unused declared dependencies</code>表示未使用但显示声明的依赖</strong>。</p><p>在IDEA中可以直接使用<strong><code>Maven Helper</code></strong>工具来完成依赖的优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Maven坐标详解&quot;&gt;&lt;a href=&quot;#Maven坐标详解&quot; class=&quot;headerlink&quot; title=&quot;Maven坐标详解&quot;&gt;&lt;/a&gt;Maven坐标详解&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;groupId&lt;/code&gt;&lt;/strong&gt;：定义当前
      
    
    </summary>
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/categories/Maven/"/>
    
    
      <category term="Maven" scheme="http://yaoyinglong.github.io/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>IDEA常用插件</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%9D%82%E8%AE%B0/IDEA%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/"/>
    <id>http://yaoyinglong.github.io/Blog/杂记/IDEA常用插件/</id>
    <published>2018-12-07T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h3><p><strong>《阿里巴巴Java开发规约》</strong>扫描插件</p><h3 id="MyBatis-plugin"><a href="#MyBatis-plugin" class="headerlink" title="MyBatis plugin"></a>MyBatis plugin</h3><p>将<strong><code>Mybatis</code></strong>中的<strong><code>Mapper</code></strong>文件中的方法和<strong><code>XML</code></strong>中对应的方法相互关联</p><h3 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h3><p>通过注解减少很多重复代码的书写，比如说<strong><code>getter/setter/toString</code></strong>等方法的编写</p><h3 id="Maven-Helper"><a href="#Maven-Helper" class="headerlink" title="Maven Helper"></a>Maven Helper</h3><p>包含的<strong><code>Maven</code></strong>使用命令，以及引入插件的命令，可以通过按钮直接操作，且包含强大<strong><code>Dependency Analyzer</code></strong>功能</p><h3 id="String-Manipulation"><a href="#String-Manipulation" class="headerlink" title="String Manipulation"></a>String Manipulation</h3><p>把字符串处理成编程时常用的格式</p><h3 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h3><p>一个牛逼好用翻译插件，不用来回切换翻译软件，直接就能在<strong><code>IDE</code></strong>中使用</p><h3 id="iedis"><a href="#iedis" class="headerlink" title="iedis"></a>iedis</h3><p><strong><code>redis</code></strong>客户端可视化插件</p><h3 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h3><p>根据<strong><code>JSON</code></strong>生成<strong><code>POJO</code></strong></p><h3 id="GenerateSerialVersionUID"><a href="#GenerateSerialVersionUID" class="headerlink" title="GenerateSerialVersionUID"></a>GenerateSerialVersionUID</h3><p>生成<strong><code>serialVersionUID</code></strong>的小插件</p><h3 id="VisualVM-Launcher"><a href="#VisualVM-Launcher" class="headerlink" title="VisualVM Launcher"></a>VisualVM Launcher</h3><p><strong><code>Java</code></strong>性能分析插件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Alibaba-Java-Coding-Guidelines&quot;&gt;&lt;a href=&quot;#Alibaba-Java-Coding-Guidelines&quot; class=&quot;headerlink&quot; title=&quot;Alibaba Java Coding Guidelines&quot;&gt;
      
    
    </summary>
    
      <category term="杂记" scheme="http://yaoyinglong.github.io/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="IDEA" scheme="http://yaoyinglong.github.io/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Redis分布式锁实现</title>
    <link href="http://yaoyinglong.github.io/Blog/%E6%A1%86%E6%9E%B6/Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yaoyinglong.github.io/Blog/框架/Redis分布式锁实现/</id>
    <published>2018-11-30T16:00:00.000Z</published>
    <updated>2019-06-27T09:26:09.599Z</updated>
    
    <content type="html"><![CDATA[<h3 id="锁实现"><a href="#锁实现" class="headerlink" title="锁实现"></a>锁实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOCK_SUCCESS = <span class="string">"OK"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Long RELEASE_SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_IF_NOT_EXIST = <span class="string">"NX"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SET_WITH_EXPIRE = <span class="string">"PX"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPARE_AND_DELETE = <span class="string">"if redis.call('get',KEYS[1]) == ARGV[1]\n"</span> +</span><br><span class="line">    <span class="string">"then\n"</span> +</span><br><span class="line">    <span class="string">"    return redis.call('del',KEYS[1])\n"</span> +</span><br><span class="line">    <span class="string">"else\n"</span> +</span><br><span class="line">    <span class="string">"    return 0\n"</span> +</span><br><span class="line">    <span class="string">"end"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String key, String requestId)</span> </span>&#123;</span><br><span class="line">    String status = stringRedisTemplate.execute((RedisCallback&lt;String&gt;) connection -&gt; &#123;</span><br><span class="line">        Jedis jedis = (Jedis) connection.getNativeConnection();</span><br><span class="line">        <span class="keyword">return</span> jedis.set(key, requestId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE, <span class="number">20000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> LOCK_SUCCESS.equals(status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String key, String requestId)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; keys = Collections.singletonList(key);</span><br><span class="line">    Object result = stringRedisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;&gt;(COMPARE_AND_DELETE, String.class), keys, requestId);</span><br><span class="line">    <span class="keyword">return</span> RELEASE_SUCCESS.equals(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运用"><a href="#运用" class="headerlink" title="运用"></a>运用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">syncUpdateCheck</span><span class="params">(String pid, Company company)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> beforeTime = System.currentTimeMillis();</span><br><span class="line">        Date date = lastUpdateTime(company);</span><br><span class="line">        <span class="keyword">if</span> (date == <span class="keyword">null</span> || System.currentTimeMillis() - date.getTime() &gt; updatePeriod()) &#123;</span><br><span class="line">            String tag = <span class="string">"ENT:DATA:UPDATE:CHECK:"</span> + code() + <span class="string">":"</span> + company.getUuid();</span><br><span class="line">            <span class="keyword">long</span> maxSleepMills = System.currentTimeMillis() + <span class="number">20000</span>;</span><br><span class="line">            <span class="keyword">boolean</span> lock = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!lock) &#123;</span><br><span class="line">                    lock = redisLockService.getLock(tag, pid);</span><br><span class="line">                    <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">                        date = lastUpdateTime(company);</span><br><span class="line">                        <span class="keyword">if</span> (date == <span class="keyword">null</span> || System.currentTimeMillis() - date.getTime() &gt; updatePeriod()) &#123;</span><br><span class="line">                            requestService.request(pid, company, code());</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        date = lastUpdateTime(company);</span><br><span class="line">                        <span class="keyword">if</span> (date != <span class="keyword">null</span> &amp;&amp; System.currentTimeMillis() - date.getTime() &lt; updatePeriod()) &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (System.currentTimeMillis() &gt; maxSleepMills) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> UpdateCheckException(<span class="string">"syncUpdateCheck获取锁资源等待超时"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        TimeUnit.MILLISECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                LOGGER.error(<span class="string">"syncUpdateCheck线程wait异常导致中断:"</span> + e.getMessage());</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                redisLockService.releaseLock(tag, pid);</span><br><span class="line">                date = lastUpdateTime(company);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;锁实现&quot;&gt;&lt;a href=&quot;#锁实现&quot; class=&quot;headerlink&quot; title=&quot;锁实现&quot;&gt;&lt;/a&gt;锁实现&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="框架" scheme="http://yaoyinglong.github.io/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式锁" scheme="http://yaoyinglong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
  </entry>
  
</feed>
