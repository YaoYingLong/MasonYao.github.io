<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YingLong</title>
  
  <subtitle>虽奔放不羁，但也自我束缚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yaoyinglong.github.io/"/>
  <updated>2022-02-17T13:43:40.603Z</updated>
  <id>https://yaoyinglong.github.io/</id>
  
  <author>
    <name>YaoYingLong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kubernetes基础</title>
    <link href="https://yaoyinglong.github.io/Blog/%E4%BA%91%E5%8E%9F%E7%94%9F/Kubernetes%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/云原生/Kubernetes基础/</id>
    <published>2022-02-14T16:00:00.000Z</published>
    <updated>2022-02-17T13:43:40.603Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kubernetes.io/zh/docs/home/" rel="external nofollow noopener noreferrer" target="_blank">Kubernetes</a>简称K8S，用于<strong>自动部署</strong>、<strong>扩展</strong>和<strong>管理容器化应用程序</strong>的开源系统。 核心特点;</p><ul><li><strong>服务发现与负载均衡</strong>：无需修改应用程序即可使用陌生的服务发现机制</li><li><strong>存储编排</strong>：自动挂载所选存储系统，包括本地存储</li><li><strong>Secret和配置管理</strong>：部署更新Secrets和应用程序的配置时不必重新构建容器镜像，且不必将软件堆栈配置中的秘密信息暴露出来</li><li><strong>批量执行</strong>：除了服务外，Kubernetes还可管理批处理和CI工作负载，在期望时替换掉失效的容器</li><li><strong>水平扩缩</strong>：使用一个简单的命令、一个UI或基于CPU使用情况自动对应用程序进行扩缩</li><li><strong>自动化上线和回滚</strong>：Kubernetes会分步骤地将针对应用或其配置的更改上线，同时监视应用程序运行状况以确保不会同时终止所有实例</li><li><strong>自动装箱</strong>：根据资源需求和其他约束自动放置容器，同时避免影响可用性</li><li><strong>自我修复</strong>：重新启动失败的容器，在节点死亡时替换并重新调度容器，杀死不响应用户定义的健康检查的容器 </li></ul><h3 id="K8S核心架构原理"><a href="#K8S核心架构原理" class="headerlink" title="K8S核心架构原理"></a>K8S核心架构原理</h3><p><img src="../../../../images/云原生/k8s/k8s核心架构图.png" alt></p><p>K8S属于<strong>主从设备模型</strong>即Master-Slave架构，<strong>Master节点</strong>负责<strong>核心调度</strong>、<strong>管理</strong>和<strong>运维</strong>，<strong>Slave节点</strong>则<strong>执行用户程序</strong>，<strong>主节点</strong>一般被称为<strong><code>Master Node</code></strong>或<strong><code>Head Node</code></strong>，<strong>从节点</strong>被称为<strong><code>Worker Node</code></strong>或Node。</p><p><strong><code>Master Node</code></strong>和<strong><code>Worker Node</code></strong>是分别安装了K8S的Master和Woker组件的实体服务器，每个Node都对应了一台实体服务器，虽然Master Node可和其中一个Worker Node安装在同一台服务器，但<strong>建议<code>Master Node</code>单独部</strong>，所有Master Node和Worker Node组成了K8S集群，<strong>同一个集群可能存在多个<code>Master Node</code>和<code>Worker Node</code></strong>。</p><h5 id="Master-Node包含的组件"><a href="#Master-Node包含的组件" class="headerlink" title="Master Node包含的组件"></a>Master Node包含的组件</h5><ul><li><strong><code>API Server</code></strong>：<strong><code>K8S</code>请求入口服务</strong>，API Server负责接收K8S所有包括来自<strong><code>UI</code>界面</strong>或<strong><code>CLI</code>命令行工具</strong>的请求，然后根据用户具体请求，去通知其他组件干活</li><li><strong><code>Scheduler</code></strong>：K8S所有Worker Node的<strong>调度器</strong>，当用户部署服务时，Scheduler会选择最合适的<strong><code>Worker Node</code></strong>服务器来部署服务</li><li><strong><code>Controller Manager</code></strong>：K8S所有Worker Node的<strong>监控器</strong>，Controller Manager有<strong>很多具体的Controller</strong>， Node Controller、Service Controller、Volume Controller等。Controller负责<strong>监控</strong>和<strong>调整</strong>在<strong><code>Worker Node</code>上部署的服务的状态</strong>，如用户要求A服务部署2个副本，若当其中一个服务挂了时，Controller会马上调整，让 Scheduler再选择一个Worker Node重新部署服务</li><li><strong><code>etcd</code></strong>：K8S的<strong>存储服务</strong>，存储了K8S的<strong>关键配置</strong>和<strong>用户配置</strong>，<strong>仅<code>API Server</code>具备读写权限</strong>，其他组件必须通过API Server接口才能读写数据</li></ul><h5 id="Worker-Node包含的组件"><a href="#Worker-Node包含的组件" class="headerlink" title="Worker Node包含的组件"></a>Worker Node包含的组件</h5><ul><li><strong><code>Kubelet</code></strong>：<strong>Worker Node监视器</strong>，<strong>与<code>Master Node</code>的通讯器</strong>，Kubelet是Master Node安插在Worker Node上的眼线，它会<strong>定期向<code>Master Node</code>汇报自己<code>Node</code>上运行的服务的状态</strong>，并接受来自Master Node的指示采取调整措施，<strong>负责控制</strong>所有容器的<strong>启动停止</strong>，保证节点工作正常</li><li><strong><code>Kube-Proxy</code></strong>：K8S的<strong>网络代理</strong>，<strong>负责Node在K8S的网络通讯</strong>、以及<strong>对外部网络流量的负载均衡</strong></li><li><strong><code>Container Runtime</code></strong>：Worker Node的<strong>运行环境</strong>，即安装了容器化所需的软件环境确保容器化程序能够跑起来，如Docker Engine运行环境</li></ul><h5 id="协同工作流程"><a href="#协同工作流程" class="headerlink" title="协同工作流程"></a>协同工作流程</h5><p>用K8S部署Nginx的过程中，K8S内部各组件的协同工作流程，若在Master节点执行一条命令<strong><code>kubectl create deployment nginx --image=nginx</code></strong>要Master部署一个nginx应用</p><ul><li>该命令首先发到<strong>Master节点</strong>的网关<strong><code>API Server</code></strong></li><li><strong><code>API Server</code></strong>将命令请求交给<strong><code>Controller Mannager</code></strong>进行控制</li><li><strong><code>Controller Mannager</code></strong>进行<strong>应用部署解析</strong>，生成一次部署信息，并通过<strong><code>API Server</code></strong>将信息存入<strong><code>etcd</code></strong></li><li><strong><code>Scheduler</code>调度器</strong>通过<strong><code>API Server</code></strong>从<strong><code>etcd</code></strong>存储中<strong>获取要部署的应用</strong>，开始调度看哪个节点有资源适合部署</li><li>Scheduler把计算出来的调度信息通过<strong><code>API Server</code></strong>再存入<strong><code>etcd</code></strong>中</li><li>每个Node节点的<strong>监控组件<code>kubelet</code></strong>，随时和Master保持联系，给<strong><code>API Server</code></strong>发送请求不断获取最新数据，拿到Master节点存储在<strong><code>etcd</code></strong>中的<strong>部署信息</strong></li><li>若node2的<strong><code>kubelet</code></strong>拿到部署信息，显示其自己节点要部署该nginx应用</li><li><strong><code>kubelet</code>监控组件</strong>就自己run一个应用在<strong>当前机器</strong>上，并随时给Master汇报当前应用的状态信息</li><li>Node和Master也是通过Master的<strong><code>API Server</code></strong>组件联系的</li><li>每个机器上的<strong><code>kube-proxy</code></strong>能知道<strong>集群的所有网络</strong>，只要Node访问别人或别人访问Node，Node上的kube-proxy网络代理<strong>自动计算进行流量转发</strong></li></ul><h3 id="K8S核心概念"><a href="#K8S核心概念" class="headerlink" title="K8S核心概念"></a>K8S核心概念</h3><h5 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h5><p>Deployment负责<strong>创建</strong>和<strong>更新应用程序的实例</strong>。创建Deployment后，Kubernetes Master将应用程序实例调度到集群中的各个节点上，<strong>若托管实例的节点关闭或被删除</strong>，Deployment控制器会<strong>将该实例替换为群集中另一个节点上的实例</strong>。这提供了一种自我修复机制来解决机器故障维护问题。</p><p><img src="../../../../images/云原生/k8s/Deployment.png" alt></p><h5 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h5><p>Pod相当于<strong>逻辑主机</strong>的概念，<strong>负责托管应用实例</strong>，包括<strong>一个</strong>或<strong>多个应用程序容器</strong>如Docker，以及<strong>这些容器的一些共享资源</strong>，共享<strong>存储</strong>、<strong>网络</strong>、<strong>运行信息</strong>等。 </p><p><img src="../../../../images/云原生/k8s/pod.png" alt></p><h5 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h5><p>Service是一个<strong>抽象层</strong>，它定义了<strong>一组Pod的逻辑集</strong>，并为这些Pod支持<strong>外部流量暴露</strong>、<strong>负载平衡</strong>和<strong>服务发现</strong>。尽管每个Pod都有一个唯一的IP地址，但若没有Service，这些IP不会暴露在群集外部，<strong>Service允许应用程序接收流量</strong>。Service也可用在<strong><code>ServiceSpec</code></strong>标记<strong><code>type</code></strong>的方式暴露，type类型如下：</p><ul><li><strong><code>ClusterIP</code></strong>：<strong>默认</strong>，在集群的内部IP上公开Service，这种类型使得Service<strong>只能从集群内访问</strong></li><li><strong><code>NodePort</code></strong>：使用<strong><code>NAT</code></strong>在集群中每个选定Node的<strong>相同端口上公开<code>Service</code></strong>，使用<strong><code>&lt;NodeIP&gt;:&lt;NodePort&gt;</code></strong>从集群外部访问Service，是ClusterIP的超集</li><li><strong><code>LoadBalancer</code></strong>：在当前云中创建一个<strong>外部负载均衡器</strong>若支持的话，并为Service分配一个固定的外部IP，是NodePort的超集</li><li><strong><code>ExternalName</code></strong>：通过返回带有该名称的<strong><code>CNAME</code></strong>记录公开Service，不使用代理，使用任意名称，由spec中的<strong><code>externalName</code></strong>指定</li></ul><p><img src="../../../../images/云原生/k8s/service.png" alt></p><p><strong>Service是<code>K8S</code>服务的核心屏蔽了服务细节</strong>，<strong>统一对外暴露服务接口</strong>，如一个服务A部署了3个备份，即3个Pod，对于用户来说，只需要关注一个Service的入即可，而不需要操心究竟应该请求哪一个Pod。外部用户<strong>不需要感知</strong>因为Pod上服务的<strong>意外崩溃</strong>、K8S重新拉起Pod而造成的<strong>IP变更</strong>，外部用户也不需要感知因<strong>升级</strong>、<strong>变更服务</strong>带来的Pod替换而造成的IP变化。</p><p>Service还可以做<strong>流量负载均衡</strong>，<strong>主要负责K8S集群内部的网络拓扑</strong>，<strong>集群外部访问集群内部可通过Ingress来完成</strong>，Ingress是<strong>对集群中服务的外部访问进行管理的API对象</strong>，典型的访问方式是HTTP，Ingress可提供<strong>负载均衡</strong>、<strong>SSL终结</strong>和<strong>基于名称的虚拟托管</strong>，Ingress是整个K8S集群的<strong>接入层</strong>，负责<strong>集群内外通讯</strong>，Ingress和Service的网络拓扑关系图如下：</p><p><img src="../../../../images/云原生/k8s/Ingress与Service网络拓扑关系图.png" alt></p><h3 id="K8S安装"><a href="#K8S安装" class="headerlink" title="K8S安装"></a>K8S安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 关闭防火墙</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 关闭selinux</span><br><span class="line">sed -i 's/enforcing/disabled/' /etc/selinux/config # 永久关闭</span><br><span class="line">setenforce 0 # 临时关闭</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 关闭swap</span><br><span class="line">swapoff -a # 临时关闭</span><br><span class="line">vim /etc/fstab # 永久关闭，注释掉/etc/fstab文件下面这行代码</span><br><span class="line"><span class="meta">#</span> /dev/mapper/centos‐swap swap swap defaults 0 0</span><br><span class="line"></span><br><span class="line">systemctl reboot # 重启生效</span><br><span class="line">free -m # 查看下swap交换区是否都为0，如果都为0则swap关闭成功</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 给机器设置主机名</span><br><span class="line">hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 给机器名称配置hosts</span><br><span class="line">vim /etc/hosts</span><br><span class="line"><span class="meta">#</span> 添加如下行</span><br><span class="line">192.168.0.180 eleven</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将桥接的IPv4流量传递到iptables</span><br><span class="line">vim /etc/sysctl.d/k8s.conf</span><br><span class="line"><span class="meta">#</span> 添加下面两行配置</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line"></span><br><span class="line">sysctl --system # 生效</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 设置时间同步</span><br><span class="line">yum install ntpdate -y</span><br><span class="line">ntpdate time.windows.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 添加k8s yum源</span><br><span class="line">vim /etc/yum.repos.d/kubernetes.repo</span><br><span class="line"><span class="meta">#</span> 添加如下配置</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=0</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 若之前安装过k8s，先卸载旧版本</span><br><span class="line">yum remove -y kubelet kubeadm kubectl</span><br><span class="line"><span class="meta">#</span> 查看可以安装的版本</span><br><span class="line">yum list kubelet --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span> 安装kubelet、kubeadm、kubectl指定版本，这里使用kubeadm方式安装k8s集群</span><br><span class="line">yum install -y kubelet-1.18.0 kubeadm-1.18.0 kubectl-1.18.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 开机启动kubelet</span><br><span class="line">systemctl enable kubelet</span><br><span class="line">systemctl start kubelet</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在k8s的Master机器上执行初始化操作</span><br><span class="line">kubeadm init --apiserver-advertise-address=192.168.0.180 --image-repository registry.aliyuncs.com/google_containers --kubernetes-version v1.18.0 --service-cidr=10.96.0.0/12 --pod-network-cidr=10.244.0.0/16</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 配置使用kubectl命令工具(类似docker这个命令)</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">chmod 666 /etc/kubernetes/admin.conf</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看kubectl是否能正常使用，此时节点状态为NotReady，安装Pod网络插件后才会变为Ready状态</span><br><span class="line">kubectl get nodes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 安装Pod网络插件</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml</span><br><span class="line">kubectl apply -f https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/canal/rbac.yaml</span><br><span class="line"><span class="meta">#</span> 若上面这个calico网络插件安装不成功可以试下下面这个</span><br><span class="line"><span class="meta">#</span> kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kubeflannel.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将node节点加入进Master节点的集群里，复制kubeadm init命令执行后的输出中的kubeadm join内容</span><br><span class="line">kubeadm join 192.168.65.160:6443 --token hbovty.6x82bkdlsk6dfy32 \ --discovery-token-ca-cert-hash sha256:659511b431f276b2a5f47397677b1dff74838ae5eb18e24135e6dae1b8c45840</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 将Master也当作Node使用，xxx-nodename表示节点名称，或主机IP，也可使用--all参数</span><br><span class="line">kubectl taint node xxx-nodename node-role.kubernetes.io/master-</span><br><span class="line">kubectl taint nodes --all node-role.kubernetes.io/master-</span><br><span class="line"><span class="meta">#</span> 将Master恢复成Master Only状态，xxx-nodename表示节点名称，或主机IP</span><br><span class="line">kubectl taint node xxx-nodename node-role.kubernetes.io/master="":NoSchedule</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 要删除k8s-node1节点，首先在master节点上依次执行以下两个命令</span><br><span class="line">kubectl drain k8s‐node1 --delete-local-data --force --ignore-daemonsets</span><br><span class="line">kubectl delete node k8s-node1</span><br><span class="line"><span class="meta">#</span> 在k8s-node1这个Node节点上执行如下命令，这样该节点即完全从k8s集群中脱离开来</span><br><span class="line">kubeadm reset</span><br></pre></td></tr></table></figure><h5 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install bash-completion</span><br><span class="line">source /usr/share/bash-completion/bash_completion</span><br><span class="line">source &lt;(kubectl completion bash)</span><br><span class="line">echo "source &lt;(kubectl completion bash)" &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="K8S部署应用"><a href="#K8S部署应用" class="headerlink" title="K8S部署应用"></a>K8S部署应用</h3><p><a href="https://kubernetes.io/zh/docs/reference/kubectl/overview/" rel="external nofollow noopener noreferrer" target="_blank">kubectl</a>是<strong><code>API Server</code></strong>的<strong>客户端工具</strong>，工作在命令行下，能够连接<strong><code>API Server</code></strong>实现各种<strong>增删改查</strong>等操作 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 创建一次deployment部署</span><br><span class="line">kubectl create deployment nginx --image=nginx</span><br><span class="line">kubectl expose deployment nginx --port=80 --type=NodePort</span><br><span class="line"><span class="meta">#</span> 查看Nginx的pod和service信息</span><br><span class="line">kubectl get pod,svc -o wide</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> my‐tomcat表示pod的名称 --image表示镜像的地址</span><br><span class="line">kubectl create deployment my-tomcat --image=tomcat:7.0.75-alpine</span><br><span class="line">kubectl get deployment</span><br><span class="line">kubectl get pod -o wide</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看Pod打印的日志</span><br><span class="line">kubectl logs my-tomcat-6d9cf656c4-45xk5</span><br><span class="line"><span class="meta">#</span> 使用exec可在Pod的容器中执行命令，使用env命令查看环境变量</span><br><span class="line">kubectl exec my-tomcat-6d9cf656c4-45xk5 -- env</span><br><span class="line"><span class="meta">#</span> 查看容器的根目录下面内容</span><br><span class="line">kubectl exec my-tomcat-6d9cf656c4-45xk5 -- ls /</span><br><span class="line"><span class="meta">#</span> 进入Pod容器内部并执行bash命令，若想退出容器可以使用exit命令</span><br><span class="line">kubectl exec -it my-tomcat-6d9cf656c4-45xk5 -- sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 在集群外是无法访问Pod的，需要创建一个service服务，才能让外部客户端可访问Pod</span><br><span class="line"><span class="meta">#</span> --name指定service名称，若端口暴露类型为NodePort，可通过集群内任意一台主机加暴露端口进行访问</span><br><span class="line">kubectl expose deployment my-tomcat --name=tomcat --port=8080 --type=NodePort</span><br><span class="line"><span class="meta">#</span>查看service信息，port信息里冒号后面的端口号就是对集群外暴露的访问接口</span><br><span class="line">kubectl get svc -o wide</span><br><span class="line"><span class="meta">#</span> 查看pod信息，‐w意思是一直等待观察pod信息的变动</span><br><span class="line">kubectl get pod -w</span><br><span class="line"><span class="meta">#</span> 查看pod、deployment、service等所有信息</span><br><span class="line">kubectl get all -o wide</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 删除刚刚创建的Pod，k8s会重新启动一个新的pod，这是k8s的服务自愈功能</span><br><span class="line">kubectl delete pod my-tomcat-6d9cf656c4-45xk5</span><br><span class="line"><span class="meta">#</span> 真正删除pod</span><br><span class="line">kubectl delete deployment my-tomcat</span><br><span class="line"><span class="meta">#</span> 删除service</span><br><span class="line">kubectl delete service tomcat</span><br></pre></td></tr></table></figure><h5 id="扩容缩容"><a href="#扩容缩容" class="headerlink" title="扩容缩容"></a>扩容缩容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 扩容到3个pod</span><br><span class="line">kubectl scale --replicas=3 deployment my-tomcat</span><br><span class="line"><span class="meta">#</span> 缩容到2个pod</span><br><span class="line">kubectl scale --replicas=2 deployment my-tomcat</span><br></pre></td></tr></table></figure><h5 id="滚动升级与回滚"><a href="#滚动升级与回滚" class="headerlink" title="滚动升级与回滚"></a>滚动升级与回滚</h5><p>滚动升级并不是一次性将多个pod全部停掉升级，而是一个一个的滚动升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 滚动升级将tomcat版本由tomcat:7.0.75-alpine升级到tomcat:8.0.41-jre8-alpine</span><br><span class="line">kubectl set image deployment my-tomcat tomcat=tomcat:8.0.41-jre8-alpine</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 查看历史版本</span><br><span class="line">kubectl rollout history deploy my-tomcat</span><br><span class="line"><span class="meta">#</span> 回滚到上一个版本，也可通过--to-revision参数可指定回退的版本</span><br><span class="line">kubectl rollout undo deployment my-tomcat</span><br></pre></td></tr></table></figure><h5 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h5><p>通过给资源添加Label，可方便地管理资源，如Deployment、Pod、Service等</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看Deployment中所包含的Label，该命令是查询deployment详细信息，该信息中包括Label信息</span><br><span class="line">kubectl describe deployment my-tomcat</span><br><span class="line"><span class="meta">#</span> 通过Label查询Pod</span><br><span class="line">kubectl get pods -l app=my-tomcat</span><br><span class="line"><span class="meta">#</span> 通过Label查询services</span><br><span class="line">kubectl get services -l app=my-tomcat</span><br><span class="line"><span class="meta">#</span> 给Pod添加Label</span><br><span class="line">kubectl label pod my-tomcat-6d9cf656c4-45xk5 version=v1</span><br><span class="line"><span class="meta">#</span> 查看Pod的详细信息，包括Label信息</span><br><span class="line">kubectl describe pods my-tomcat-6d9cf656c4-45xk5</span><br><span class="line"><span class="meta">#</span> 通过Label查询Pod</span><br><span class="line">kubectl get pods -l version=v1</span><br><span class="line"><span class="meta">#</span> 通过Label删除服务</span><br><span class="line">kubectl delete service -l app=test-service</span><br></pre></td></tr></table></figure><h5 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看Pod内部某个container打印的日志</span><br><span class="line">kubectl log $&#123;POD_NAME&#125; -c $&#123;CONTAINER_NAME&#125;</span><br><span class="line"><span class="meta">#</span> 查看Pod打印的日志</span><br><span class="line">kubectl logs my-tomcat-6d9cf656c4-45xk5</span><br><span class="line"><span class="meta">#</span> 使用exec可在Pod的容器中执行命令，使用env命令查看环境变量</span><br><span class="line">kubectl exec my-tomcat-6d9cf656c4-45xk5 -- env</span><br><span class="line"><span class="meta">#</span> 查看容器的根目录下面内容</span><br><span class="line">kubectl exec my-tomcat-6d9cf656c4-45xk5 -- ls /</span><br><span class="line"><span class="meta">#</span> 进入Pod容器内部并执行bash命令，若想退出容器可以使用exit命令</span><br><span class="line">kubectl exec -it my-tomcat-6d9cf656c4-45xk5 -- sh</span><br></pre></td></tr></table></figure><h3 id="K8S中的资源"><a href="#K8S中的资源" class="headerlink" title="K8S中的资源"></a>K8S中的资源</h3><p><strong><code>K8S</code>中所有内容都抽象为资源</strong>， 资源实例化之后叫做对象，上面说的那些核心概念都是<br>K8S中的资源：</p><ul><li><strong><code>workload</code>工作负载型资源</strong>：<strong><code>Pod</code></strong>、<strong><code>ReplicaSet</code></strong>、<strong><code>Deployment</code></strong>、<strong><code>StatefulSet</code></strong>、<strong><code>DaemonSet</code></strong>等等</li><li><strong><code>ServiceDiscovery LoadBalance</code>服务发现及负载均衡型资源</strong>：<strong><code>Service</code></strong>、<strong><code>Ingress</code></strong>等等</li><li><strong>配置与存储型资源</strong>： <strong><code>Volume</code></strong>存储卷、<strong><code>CSI</code></strong>容器存储接口、可扩展各种各样的第三方存储卷</li><li><strong>特殊类型的存储卷</strong>：<strong><code>ConfigMap</code></strong>当配置中心来使用的资源类型、<strong><code>Secret</code></strong>保存敏感数据、<strong><code>DownwardAPI</code></strong>把外部环境中的信息输出给容器</li><li><strong>集群级资源</strong>：<strong><code>Namespace</code></strong>、<strong><code>Node</code></strong>、<strong><code>Role</code></strong>、<strong><code>ClusterRole</code></strong>、<strong><code>RoleBinding</code></strong>角色绑定、<strong><code>ClusterRoleBinding</code></strong>集群角色绑定</li><li><strong>元数据型资源</strong>：<strong><code>HPA</code></strong>即Pod水平扩展、<strong><code>PodTemplate</code></strong>即Pod模板，用于让控制器创建Pod时使用的模板、<strong><code>LimitRange</code></strong>用来定义硬件资源限制</li></ul><h5 id="资源清单"><a href="#资源清单" class="headerlink" title="资源清单"></a>资源清单</h5><p>上面直接用<strong>命令</strong>创建<strong><code>deployment</code></strong>，<strong><code>pod</code></strong>，<strong><code>service</code></strong>这些资源，在k8s中一般都会使用<strong><code>yaml</code></strong>格式的文件来创建符合预期期望的资源，这样的yaml文件一般称为<strong>资源清单</strong>。 </p><p>使用资源清单yaml来创建k8s的资源对象，用yaml创建deployment资源的对象，可用创建deployment的命令加上参数<strong><code>--dry-run -o yaml</code></strong>就可以输出这次部署的资源清单yaml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create deployment my-tomcat --image=tomcat:7.0.75‐alpine --dry-run -o yaml</span><br></pre></td></tr></table></figure><p>对上面的yaml适当的修改下保存为文件<strong><code>tomcat-deployment-demo.yaml</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-tomcat-yaml</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">my-tomcat-yaml</span><span class="comment">#修改deployment的名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span> <span class="comment"># 修改pod副本为两个</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">my-tomcat-yaml</span></span><br><span class="line">  <span class="attr">strategy:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">my-tomcat-yaml</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">tomcat:7.0.75-alpine</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">tomcat</span></span><br><span class="line">          <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">status:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 用yaml文件来创建这次部署</span><br><span class="line">kubectl apply -f tomcat-deployment-demo.yaml</span><br><span class="line"><span class="meta">#</span> 用yaml创建service资源的对象</span><br><span class="line">kubectl expose deployment my-tomcat-yaml --name=tomcat --port=8080 --type=NodePort --dry-run -o yaml</span><br></pre></td></tr></table></figure><p><strong>用<code>yaml</code>创建<code>service</code>资源的对象</strong>，保存为文件<strong><code>tomcat-service-demo.yaml</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-tomcat-yaml</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">tomcat-service-yaml</span> <span class="comment"># 修改Service名称</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">port:</span> <span class="number">8081</span>  <span class="comment"># service虚拟ip对应的端口，在集群内网机器可用service的虚拟ip加该端口号访问服务</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span> <span class="comment"># pod暴露的端口，一般与pod内部容器暴露的端口一致</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">my-tomcat-yaml</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line"><span class="attr">status:</span></span><br><span class="line">  <span class="attr">loadBalancer:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 用yaml文件来创建service</span><br><span class="line">kubectl apply -f tomcat-service-demo.yaml</span><br><span class="line"><span class="meta">#</span> 针对已有资源输出资源清单yaml，使用-o参数加yaml，可将资源的配置以yaml的格式输出出来，也可使用json，输出为json格式</span><br><span class="line">kubectl get pod nginx-deploy-7db697dfbd-2qh7v -o yaml</span><br><span class="line">kubectl get service nginx -o yaml</span><br><span class="line">kubectl get deployment nginx -o yaml</span><br></pre></td></tr></table></figure><h3 id="K8S高级特性"><a href="#K8S高级特性" class="headerlink" title="K8S高级特性"></a>K8S高级特性</h3><p>K8S中还有一些高级特性如<strong>弹性扩缩应用</strong>、<strong>滚动更新</strong>、配置管理、存储卷、网关路由等。</p><h4 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h4><p><strong><code>ReplicaSet</code></strong>确<strong>保任何时间都有指定数量的Pod副本在运行</strong>，通常用来保证给定数量的、完全相同的Pod的可用性。建议使用<strong><code>Deployment</code></strong>来管理<strong><code>ReplicaSet</code></strong>，而不是直接使用<strong><code>ReplicaSet</code></strong>。</p><h4 id="ConfigMap"><a href="#ConfigMap" class="headerlink" title="ConfigMap"></a>ConfigMap</h4><p><strong><code>ConfigMap</code></strong>是一种<strong>API对象</strong>，用来将<strong>非机密性</strong>的数据保存到<strong>键值对</strong>中。使用时Pod可<strong>将其用作环境变量</strong>、<strong>命令行参数</strong>或<strong>存储卷中的配置文件</strong>。使用<strong><code>ConfigMap</code></strong>可<strong>将配置数据和应用程序代码分开</strong>。</p><h4 id="Volume"><a href="#Volume" class="headerlink" title="Volume"></a>Volume</h4><p><strong><code>Volume</code></strong>指的是<strong>存储卷</strong>，<strong>包含可被Pod中容器访问的数据目录</strong>，容器中文件在磁盘上是<strong>临时存放</strong>，当容器崩溃时文件会丢失，同时<strong>无法在多个Pod中共享文件</strong>，通过使用存储卷可以解决这两个问题，常用存储卷：</p><ul><li><strong><code>configMap</code></strong>：<strong>提供向Pod注入配置数据的方法</strong>，ConfigMap对象中存储的数据可被configMap类型的卷引用，然后被Pod中运行的容器化应用使用</li><li><strong><code>emptyDir</code></strong>：emptyDir卷可用于<strong>存储缓存数据</strong>，<strong>当Pod分派到某个Node上时<code>emptyDir</code>卷会被创建</strong>，且Pod在该节点上<strong>运行期间卷一直存在</strong>，<strong>当Pod被从节点上删除时<code>emptyDir</code>卷中的数据也会被永久删除</strong></li><li><strong><code>hostPath</code></strong>：<strong>将主机节点文件系统上的文件或目录挂载到Pod中</strong>，在<strong><code>Minikube</code></strong>中的主机指的是<strong><code>Minikube</code>所在虚拟机</strong></li><li><strong><code>local</code></strong>：代表<strong>某个被挂载的本地存储设备</strong>，如磁盘、分区或目录，local卷只能用作<strong>静态创建的持久卷</strong>，尚<strong>不支持动态配置</strong></li><li><strong><code>nfs</code></strong>：<strong>将NFS网络文件系统挂载到Pod中</strong></li><li><strong><code>persistentVolumeClaim</code></strong>：将持久卷<strong><code>PersistentVolume</code></strong>挂载到Pod中，持久卷是集群中的一块存储，可以由管理员事先供应，或使用存储类Storage Class来动态供应，持久卷是集群资源类似于节点</li></ul><h4 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h4><p><img src="../../../../images/云原生/k8s/ingress.png" alt></p><p>通过<strong><code>Ingress</code></strong>资源可实现<strong>类似<code>Nginx</code>的基于域名访问</strong>，<strong>从而实现Pod的负载均衡访问</strong>，进入<a href="https://github.com/kubernetes/ingress-nginx/blob/nginx-0.20.0/deploy/mandatory.yaml" rel="external nofollow noopener noreferrer" target="_blank">ingress-nginx</a>将里面内容复制保存到k8s master机器上的ingress-controller.yaml文件中，修改镜像地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 安装ingress</span><br><span class="line">kubectl apply -f ingress-controller.yaml</span><br><span class="line"><span class="meta">#</span> 查看是否安装成功</span><br><span class="line">kubectl get pods -n ingress-nginx -o wide</span><br><span class="line"><span class="meta">#</span> 查看日志</span><br><span class="line">kubectl logs -f nginx-ingress-controller-2dvwn -n ingress-nginx</span><br></pre></td></tr></table></figure><p><strong>配置<code>ingress</code>访问规则</strong>，类似配置nginx的代理转发配置，让ingress将域名<strong><code>tomcat.eleven.com</code></strong>转发给后端的<strong><code>tomcat-service-yaml</code></strong>服务，新建<strong><code>ingress-tomcat.yaml</code></strong>文件： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">networking.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">web-ingress</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">tomcat.eleven.com</span>  <span class="comment"># 转发域名</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">            <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">tomcat-service-yaml</span>  <span class="comment"># service名称</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">8081</span>   <span class="comment"># service的端口</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 生效规则</span><br><span class="line">kubectl apply -f ingress-tomcat.yaml</span><br><span class="line"><span class="meta">#</span> 卸载资源</span><br><span class="line">kubectl delete -f ingress-tomcat.yaml</span><br><span class="line"><span class="meta">#</span> 查看生效的ingress规则</span><br><span class="line">kubectl get ing</span><br><span class="line">kubectl describe ing  web-ingress</span><br><span class="line"><span class="meta">#</span> 在hosts中配置：192.168.0.180 tomcat.eleven.com</span><br><span class="line">echo "192.168.0.180 tomcat.eleven.com" &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><h4 id="ConfigMap-1"><a href="#ConfigMap-1" class="headerlink" title="ConfigMap"></a>ConfigMap</h4><p>ConfigMap允许<strong>将配置文件</strong>与<strong>镜像文件分离</strong>，将ConfigMap属性注入到Pod的环境变量中去，使容器化的应用程序具有可移植性。添加<strong><code>nginx-config.yaml</code></strong>配置文件用于创建<strong><code>ConfigMap</code></strong>，ConfigMap名称为<strong><code>nginx-config</code></strong>，配置信息存放在data节点下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-config</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">nginx-env:</span> <span class="string">test</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 应用nginx-config.yaml文件创建ConfigMap</span><br><span class="line">kubectl create -f nginx-config.yaml</span><br><span class="line"><span class="meta">#</span> 获取所有ConfigMap</span><br><span class="line">kubectl get configmap</span><br><span class="line"><span class="meta">#</span> 通过yaml格式查看ConfigMap中的内容</span><br><span class="line">kubectl get configmaps nginx-config -o yaml</span><br></pre></td></tr></table></figure><p>添加配置文件<strong><code>nginx-deployment.yaml</code></strong>用于创建Deployment，部署一个Nginx服务，在Nginx的环境变量中引用<strong><code>ConfigMap</code></strong>中的属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">nginx:1.10</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">NGINX_ENV</span> <span class="comment"># 在Nginx中设置环境变量</span></span><br><span class="line">          <span class="attr">valueFrom:</span></span><br><span class="line">            <span class="attr">configMapKeyRef:</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">nginx-config</span> <span class="comment"># 设置ConfigMap的名称</span></span><br><span class="line">              <span class="attr">key:</span> <span class="string">nginx-env</span> <span class="comment"># 需要取值的键</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 应用配置文件文件创建Deployment</span><br><span class="line">kubectl apply -f nginx-deployment.yaml</span><br><span class="line"><span class="meta">#</span> 创建成功后查看Pod中的环境变量，发现NGINX_ENV变量已经被注入了</span><br><span class="line">kubectl exec nginx-deployment-7cf97748c4-tcq5v -- env</span><br></pre></td></tr></table></figure><h4 id="存储卷的使用"><a href="#存储卷的使用" class="headerlink" title="存储卷的使用"></a>存储卷的使用</h4><p>通过存储卷可把<strong>外部数据挂载到容器中</strong>去，供容器中的应用访问，这样就算容器崩溃了，数据依然可以存在，使用Docker部署Nginx时，将Nginx的html、logs、conf目录从外部挂载到容器中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 80:80 --name nginx \</span><br><span class="line">-v /data/nginx/html:/usr/share/nginx/html \</span><br><span class="line">-v /data/nginx/logs:/var/log/nginx \</span><br><span class="line">-v /data/nginx/conf:/etc/nginx \</span><br><span class="line">-d nginx:1.10</span><br></pre></td></tr></table></figure><p>Minikube可认为是一台虚拟机，可用<strong><code>Minikube</code></strong>的<strong><code>ssh</code></strong>命令来访问它</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">minikube ssh</span><br><span class="line"><span class="meta">#</span> Minikube中默认有一个docker用户，我们先重置下它的密码</span><br><span class="line">sudo passwd docker</span><br><span class="line"><span class="meta">#</span> 在Minikube中创建data目录</span><br><span class="line">midir /home/docker/data</span><br><span class="line"><span class="meta">#</span> 把Nginx数据目录复制到Minikube中，才能实现目录的挂载，注意docker用户只能修改/home/docker目录中的文件，通过scp命令来复制文件</span><br><span class="line">scp -r /home/macro/data/nginx docker@192.168.0.180:/home/docker/data/nginx</span><br></pre></td></tr></table></figure><p>添加<strong><code>nginx-volume-deployment.yaml</code></strong>配置文件用于创建Deployment</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-volume-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx:1.10</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">80</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/usr/share/nginx/html</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">html-volume</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/log/nginx</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/etc/nginx</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">conf-volume</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">html-volume</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/docker/data/nginx/html</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">logs-volume</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/docker/data/nginx/logs</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">conf-volume</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/home/docker/data/nginx/conf</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">Directory</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 应用配置文件创建Deployment</span><br><span class="line">kubectl apply -f nginx-volume-deployment.yaml</span><br><span class="line"><span class="meta">#</span> 应用配置文件创建Service</span><br><span class="line">kubectl apply -f nginx-service.yaml</span><br></pre></td></tr></table></figure><p>添加<strong><code>nginx-service.yaml</code></strong>配置文件用于创建Service </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">80</span></span><br><span class="line">      <span class="attr">nodePort:</span> <span class="number">30080</span></span><br></pre></td></tr></table></figure><h3 id="K8S与Docker"><a href="#K8S与Docker" class="headerlink" title="K8S与Docker"></a>K8S与Docker</h3><p>Docker作为非常流行的容器技术，经常有文章说它被K8S弃用了，取而代之的是另一种容器技术containerd，containerd只是从Docker中分离出来的底层容器运行时，使用起来和Docker并没有什么区别，从Docker转型containerd非常简单，只要把之前Docker命令中的<strong><code>docker</code></strong>改为<strong><code>crictl</code></strong>基本就可以了用法一样。</p><p>K8S发布CRI即<strong><code>Container Runtime Interface</code></strong>统一了容器运行时接口，凡是支持CRI的容器运行时，皆可作为K8S的<strong>底层容器运行时</strong>，若K8S使用Docker作为K8S容器运行时的话，kubelet需要先要通过<strong><code>dockershim</code></strong>去调用Docker，再通过Docker去调用<strong><code>containerd</code></strong>，若使用containerd作为K8S容器运行时的话，由于containerd内置了CRI插件，kubelet可直接调用containerd，使用containerd不仅调用链变短了性能提高了，且资源占用也会变小，毕竟Docker不是一个纯粹的容器运行时，具有大量其他功能，未来Docker可能自己直接实现K8S的CRI接口来兼容K8S的底层使用。</p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>Docker部署过的eureka应用为例，<strong>首先将镜像发布到镜像仓库中</strong>，然后创建用于创建Deployment的配置文件<strong><code>eureka-app-deployment.yaml</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-app-deployment</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-app</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">eureka-app</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">eureka-app</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">eureka-app</span></span><br><span class="line">          <span class="comment"># 指定Docker Hub中的镜像地址</span></span><br><span class="line">          <span class="attr">image:</span> <span class="number">3120130802229</span><span class="string">/eleven-eureka-server:0.0.1</span></span><br><span class="line">          <span class="comment"># Always总是拉取镜像，IfNotPresent(默认该值) 本地有则使用本地镜像，Never只使用本地镜像，从不拉取，即使本地没有镜像</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8761</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">TZ</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">LOG_FILE</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">/var/logs</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/var/logs</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">log-volume</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">log-volume</span></span><br><span class="line">          <span class="attr">hostPath:</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/data/k8s-app/eureka/logs</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">DirectoryOrCreate</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">Default</span> <span class="comment"># 继承Pod所在宿主机的DNS设置，使pod能访问外网</span></span><br></pre></td></tr></table></figure><p>创建用于创建Service的配置文件<strong><code>eureka-app-service.yaml</code></strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">eureka-app-service</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">NodePort</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">eureka-app</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">http</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8761</span><span class="comment"># service的端口</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8761</span> <span class="comment"># pod的端口，一般与pod内部容器的服务端口一致</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 通过应用配置文件来创建Deployment</span><br><span class="line">kubectl apply -f eureka-app-deployment.yaml</span><br><span class="line"><span class="meta">#</span> 通过应用配置文件来创建Service</span><br><span class="line">kubectl apply -f eureka-app-service.yaml</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://kubernetes.io/zh/docs/home/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Kubernetes&lt;/a&gt;简称K8S，用于&lt;strong&gt;自
      
    
    </summary>
    
      <category term="云原生" scheme="https://yaoyinglong.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
      <category term="k8s" scheme="https://yaoyinglong.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Docker搭建Prometheus&amp;Grafana</title>
    <link href="https://yaoyinglong.github.io/Blog/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker%E6%90%AD%E5%BB%BAPrometheus&amp;Grafana/"/>
    <id>https://yaoyinglong.github.io/Blog/云原生/Docker搭建Prometheus&amp;Grafana/</id>
    <published>2022-02-14T16:00:00.000Z</published>
    <updated>2022-02-15T11:00:47.194Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Prometheus"><a href="#Prometheus" class="headerlink" title="Prometheus"></a>Prometheus</h3><p><strong><code>Prometheus</code></strong>集成了数据的<strong>采集</strong>，<strong>处理</strong>，<strong>存储</strong>，<strong>展示</strong>，<strong>告警</strong>一系列流程，存储数据是使用<strong>多维数据模型</strong>即<strong>由度量名称和键值对标识的时间序列数据</strong>，通过灵活的查询语言<strong><code>PromSQL</code></strong>利用多维数据完成<strong>复杂查询</strong>，<strong>不依赖分布式存储</strong>，单个服务器节点可直接工作，基于<strong><code>HTTP</code></strong>的<strong><code>pull</code>方式</strong>釆集时间序列数据，通过<strong><code>PushGateway</code></strong>组件支持<strong>推送时间序列数据</strong>，通过<strong>服务发现</strong>或<strong>静态配罝发现目标</strong>，通过<strong><code>Grafana</code></strong>支持<strong>多种图形模式及仪表盘</strong>。</p><p><img src="../../../../images/云原生/Docker/Prometheus组成与架构.png" alt></p><p><strong><code>Prometheus Server</code></strong>主要功能是<strong>收集指标</strong>和<strong>存储时间序列数据</strong>到<strong><code>TSDB</code></strong>，并提供查询接口，通过<strong><code>PushGateway</code></strong>短期存储<strong>指标数据</strong>用于<strong>临时性任务</strong>，<strong><code>Exporters</code></strong>采集已有的<strong>三方服务监控指标</strong>并暴露metrics，<strong><code>Alertmanager</code></strong>提供<strong>告警</strong>支持，<strong><code>Web UI</code></strong>提供简单的WEB控制台。</p><h4 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h4><p>Prometheus将所有数据存储为<strong>时间序列</strong>，具有<strong>相同度量名称</strong>和<strong>标签</strong>属于同一<strong>指标</strong>，即Prometheus从数据源拿到数据后会存到内置的<strong><code>TSDB</code></strong>中，<strong><code>TSDB</code></strong>中存储的就是<strong>时间序列数据</strong>，它存储的数据会有一个度量名称，如监控一个nginx首先得起个名字，该名称即度量名，还会有N个标签，可理解<strong>名称为表名标签为字段</strong>，每个时间序列都由<strong>度量标准名称</strong>和一组键值对即<strong>标签</strong>唯一标识。</p><p>时间序列的格式<strong><code>&lt;metricename&gt; {&lt;labelname&gt;=&lt;labelvalue&gt;, ...}</code></strong>，<strong><code>metricename</code></strong>为度量标准名称，<strong><code>labelname</code></strong>为标签名，该标签可有多个，如<strong><code>jvm_memory_max_bytes{area=&quot;heap&quot;,id=&quot;Eden Space&quot;,}</code></strong>，还可以继续指定标签，<strong>指定的标签越多查询的维度就越多</strong>。</p><h4 id="指标类型"><a href="#指标类型" class="headerlink" title="指标类型"></a>指标类型</h4><table><thead><tr><th><strong>类型名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Counter</td><td>递增计数器，适合收集接口请求次数</td></tr><tr><td>Guage</td><td>可任意变化的数值，适用CPU使用率</td></tr><tr><td>Histogram</td><td>对一段时间内数据进行采集，并对有所数值求和用于统计数量</td></tr><tr><td>Summary</td><td>与Histogram类型类似</td></tr></tbody></table><h4 id="任务-amp-实例"><a href="#任务-amp-实例" class="headerlink" title="任务&amp;实例"></a>任务&amp;实例</h4><p><strong>实例</strong>即可抓取的目标target，会在Prometheus配置文件中体现，<strong>任务是具有相同目标的实例集合</strong>，可理解为一个组，如订单服务多台实例机器，可放入一个任务中，分多个实例target抓取。</p><h4 id="Prometheus部署"><a href="#Prometheus部署" class="headerlink" title="Prometheus部署"></a>Prometheus部署</h4><p>对于<strong><code>SpringBoot</code></strong>项目需要开启SpringBoot监控和增加<strong><code>Prometheus</code></strong>整合，添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启springboot的应用监控 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 增加prometheus整合 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>还需要在具体的服务配置文件中增加开启SpringBoot Admin监控的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span> <span class="comment"># 开启SpringBoot Admin的监控</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">promethus:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">'*'</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>通过Docker来安装，新建目录<strong><code>/data/docker/docker-prometheus</code></strong>，在里面创建文件<strong><code>docker-compose-app.yml</code></strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:v2.4.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 映射prometheus的配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker/docker-prometheus/prometheus/:/etc/prometheus/</span></span><br><span class="line">      <span class="comment"># 同步容器与宿主机的时间，非常重要，若时间不一致，会导致prometheus抓不到数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'9090:9090'</span></span><br></pre></td></tr></table></figure><p>创建Prometheus配置文件<strong><code>/data/docker/docker-prometheus/prometheus/prometheus.yml</code></strong>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global:</span>  <span class="comment"># 全局配置</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">15s</span>  <span class="comment"># 全局定时任务抓取性能数据间隔</span></span><br><span class="line"></span><br><span class="line"><span class="attr">scrape_configs:</span>  <span class="comment"># 抓取性能数据任务配置</span></span><br><span class="line">  <span class="comment"># 抓取订单服务性能指标数据任务，一个job下可以配置多个抓取的targets，如订单服务多个实例机器</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mall-order'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">10s</span>  <span class="comment">#每10s抓取一次</span></span><br><span class="line">    <span class="attr">metrics_path:</span> <span class="string">'/actuator/prometheus'</span>  <span class="comment"># 抓取的数据url</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.180:8011']</span>   <span class="comment"># 抓取的服务器地址</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">application:</span> <span class="string">'mall-order-label1'</span> <span class="comment"># 抓取任务标签</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.180:8012']</span>   <span class="comment"># 抓取的服务器地址</span></span><br><span class="line">        <span class="attr">labels:</span></span><br><span class="line">          <span class="attr">application:</span> <span class="string">'mall-order-label2'</span> <span class="comment"># 抓取任务标签</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 抓取prometheus自身性能指标数据任务</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">    <span class="attr">static_configs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['localhost:9090']</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 启动prometheus</span><br><span class="line">docker-compose -f docker-compose-app.yml up -d</span><br></pre></td></tr></table></figure><h4 id="Grafana部署"><a href="#Grafana部署" class="headerlink" title="Grafana部署"></a>Grafana部署</h4><p>在上面的docker-compose-app.yml配置文件中加入Grafana的安装配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">prometheus:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">prom/prometheus:v2.4.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">'prometheus'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 映射prometheus的配置文件</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/docker/docker-prometheus/prometheus/:/etc/prometheus/</span></span><br><span class="line">      <span class="comment"># 同步容器与宿主机的时间，非常重要，若时间不一致，会导致prometheus抓不到数据</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'9090:9090'</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">grafana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">grafana/grafana:5.2.4</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">'grafana'</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'3000:3000'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># grafana报警邮件配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/config/grafana.ini:/etc/grafana/grafana.ini</span></span><br><span class="line">      <span class="comment"># 配置grafana的prometheus数据源</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/provisioning/:/etc/grafana/provisioning/</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span></span><br><span class="line">    <span class="attr">env_file:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./grafana/config.monitoring</span>  <span class="comment"># grafana登录配置</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">prometheus</span>  <span class="comment"># grafana需要在prometheus之后启动</span></span><br></pre></td></tr></table></figure><p>在<strong><code>docker-prometheus</code></strong>目录下新增<strong><code>grafana</code></strong>目录，在<strong><code>grafana</code></strong>目录中创建<strong><code>config.monitoring</code></strong>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># grafana管理界面的登录用户密码，用户名是admin</span><br><span class="line">GF_SECURITY_ADMIN_PASSWORD=password</span><br><span class="line"># grafana管理界面是否允许注册，默认不允许</span><br><span class="line">GF_USERS_ALLOW_SIGN_UP=false</span><br></pre></td></tr></table></figure><p>在<strong><code>grafana</code></strong>目录下创建<strong><code>provisioning</code></strong>目录，在<strong><code>provisioning</code></strong>目录中创建<strong><code>datasources</code></strong>目录，在<strong><code>datasources</code></strong>目录中新建<strong><code>datasource.yml</code></strong>配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config file version</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deleteDatasources:</span>  <span class="comment"># 若之前存在name为Prometheus，orgId为1的数据源先删除</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prometheus</span></span><br><span class="line">    <span class="attr">orgId:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">datasources:</span>  <span class="comment"># 配置Prometheus的数据源</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Prometheus</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">access:</span> <span class="string">proxy</span></span><br><span class="line">    <span class="attr">orgId:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://prometheus:9090</span>  <span class="comment"># 在相同的docker compose下，可直接用prometheus服务名直接访问</span></span><br><span class="line">    <span class="attr">basicAuth:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">isDefault:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">version:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">editable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>在<strong><code>grafana</code></strong>目录下创建<strong><code>config</code></strong>目录，在<strong><code>config</code></strong>目录中创建<strong><code>grafana.ini</code></strong>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#################################### SMTP / Emailing ##########################</span><br><span class="line"># 配置邮件服务器</span><br><span class="line">[smtp]</span><br><span class="line">enabled = true</span><br><span class="line"># 发件服务器</span><br><span class="line">host = smtp.qq.com:465</span><br><span class="line"># smtp账号</span><br><span class="line">user = 906271196@qq.com</span><br><span class="line"># smtp 授权码</span><br><span class="line">password = test123</span><br><span class="line"># 发信邮箱</span><br><span class="line">from_address = 906271196@qq.com</span><br><span class="line"># 发信人</span><br><span class="line">from_name = eleven</span><br></pre></td></tr></table></figure><h4 id="监控MySQL性能指标"><a href="#监控MySQL性能指标" class="headerlink" title="监控MySQL性能指标"></a>监控MySQL性能指标</h4><p>在<strong><code>prometheus.yml</code></strong>文件末尾追加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'mysql'</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.180:9104']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载mysql客户端的exporter镜像</span><br><span class="line">docker pull prom/mysqld-exporter</span><br><span class="line"><span class="meta">#</span> 启动监控的数据库连接，容器创建时需指定</span><br><span class="line">docker run -d -p 9104:9104 -e DATA_SOURCE_NAME="root:password@(mysql服务器ip:3306)/databaseName" prom/mysqld-exporter</span><br><span class="line"><span class="meta">#</span> 重新启动Prometheus镜像</span><br><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure><p>导入Prometheus模板，添加mysql-dashboard.json格式模板，模板文件可到<a href="https://grafana.com/grafana/dashboards/" rel="external nofollow noopener noreferrer" target="_blank">Grafana官网</a>或<a href="https://github.com/percona/grafana-dashboards" rel="external nofollow noopener noreferrer" target="_blank">github</a>上下载</p><h4 id="监控Redis性能指标"><a href="#监控Redis性能指标" class="headerlink" title="监控Redis性能指标"></a>监控Redis性能指标</h4><p>在<strong><code>prometheus.yml</code></strong>文件末尾追加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">'redis'</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">5s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.180:9121']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载redis客户端的exporter镜像</span><br><span class="line">docker pull oliver006/redis_exporter</span><br><span class="line"><span class="meta">#</span> 启动监控的数据库连接，容器创建时需指定</span><br><span class="line">docker run -d -p 9121:9121 oliver006/redis_exporter --redis.addr redis://redis连接IP:6379</span><br><span class="line"><span class="meta">#</span> 重新启动Prometheus镜像</span><br><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure><p>导入Prometheus模板，添加redis-dashboard.json格式模板，模板文件可到<a href="https://grafana.com/grafana/dashboards/" rel="external nofollow noopener noreferrer" target="_blank">Grafana官网</a>或<a href="https://github.com/percona/grafana-dashboards" rel="external nofollow noopener noreferrer" target="_blank">github</a>上下载</p><h4 id="监控Linux服务器性能指标"><a href="#监控Linux服务器性能指标" class="headerlink" title="监控Linux服务器性能指标"></a>监控Linux服务器性能指标</h4><p>在<strong><code>prometheus.yml</code></strong>文件末尾追加如下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">job_name:</span> <span class="string">linux</span></span><br><span class="line">  <span class="attr">scrape_interval:</span> <span class="string">10s</span></span><br><span class="line">  <span class="attr">static_configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.180:9100']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">linux-180</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.181:9100']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">linux-181</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.182:9100']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">linux-182</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">targets:</span> <span class="string">['192.168.0.183:9100']</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">instance:</span> <span class="string">linux-183</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 下载linux监控的exporter镜像</span><br><span class="line">docker pull prom/node-exporter</span><br><span class="line"><span class="meta">#</span> 启动监控的数据库连接，容器创建时需指定</span><br><span class="line">docker run -d -p 9100:9100 prom/node-exporter</span><br><span class="line"><span class="meta">#</span> 重新启动Prometheus镜像</span><br><span class="line">docker-compose up --force-recreate -d</span><br></pre></td></tr></table></figure><p>导入Prometheus模板，添加linux-dashboard.json格式模板，模板文件可到<a href="https://grafana.com/grafana/dashboards/" rel="external nofollow noopener noreferrer" target="_blank">Grafana官网</a>或<a href="https://github.com/percona/grafana-dashboards" rel="external nofollow noopener noreferrer" target="_blank">github</a>上下载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Prometheus&quot;&gt;&lt;a href=&quot;#Prometheus&quot; class=&quot;headerlink&quot; title=&quot;Prometheus&quot;&gt;&lt;/a&gt;Prometheus&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Prometheus&lt;/code&gt;&lt;/stron
      
    
    </summary>
    
      <category term="云原生" scheme="https://yaoyinglong.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
      <category term="Docker" scheme="https://yaoyinglong.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker Compose基础</title>
    <link href="https://yaoyinglong.github.io/Blog/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker%20Compose%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/云原生/Docker Compose基础/</id>
    <published>2022-02-13T16:00:00.000Z</published>
    <updated>2022-02-14T03:54:56.922Z</updated>
    
    <content type="html"><![CDATA[<p>使用微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，若每个微服务都要手动启停，效率很低、维护量很大。可使用<strong><code>Docker Compose</code></strong>来轻松、高效地管理容器。Docker Compose是一个<strong>用于定义和运行多容器的Docker应用的工具</strong>，使用Compose可在一个<strong><code>yaml</code>格式</strong>的配置文件中配置应用服务，使用一个命令，即可创建并启动配置中引用的所有服务。</p><p><strong><code>Docker Compose</code></strong>的安装有多种方式，可通过<strong>Shell安装</strong>、<strong>pip安装</strong>、<strong>作为容器安装</strong>等，以下是通过Shell安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> docker compose安装步骤</span><br><span class="line">sudo curl -L "https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><p>Docker Compose的使用只需要编写一个<strong>描述容器的配置<code>docker-compose.yml</code></strong>配置文件，然后使用<strong>描述对容器的操作的<code>docker-compose</code></strong>命令操作即可。</p><p>这里依然使用<strong><code>eureka-server-0.0.1-SNAPSHOT.jar</code></strong>，在该<strong><code>jar</code>所在目录的上一级目录</strong>中创建<strong><code>docker-compose.yml</code></strong>配置文件文件，在该配置文件中配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">eureka:</span>             <span class="comment">#指定服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eleven-eureka-server:0.0.1</span>  <span class="comment">#指定镜像名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./eureka</span>   <span class="comment">#指定Dockfile所在路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">eleven-eureka-server</span>  <span class="comment">#指定启动容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8761:8761"</span>   <span class="comment">#指定端口映射</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8761</span>          <span class="comment">#声明容器对外暴露的端口</span></span><br></pre></td></tr></table></figure><p>然后在<strong><code>docker-compose.yml</code></strong>配置文件文件所在路径执行<strong><code>docker-compose up</code></strong>启动服务，使用compose启动时会先<strong>创建一个默认的网络<code>app_default</code></strong>，默认以compose所在文件目录名加<strong><code>_default</code></strong>命名，<strong><code>compose</code>内的所有容器都会加入此网络</strong>，<strong>可用服务名相互访问</strong>，若镜像<strong><code>eleven-eureka-server:0.0.1</code>不存在则先构建镜像</strong>，若镜像存在则不构建，加上<strong><code>--build</code></strong>参数可<strong>强制先构建镜像</strong>，若镜像之前构建过且构建文件没有变化或构建的<strong>内容没有变化</strong>，就算加上–build参数也不会重新构建，根据构建的镜像创建一个名称叫<strong><code>app_eureka_1</code></strong>的容器，<strong><code>app</code></strong>是<strong><code>docker-compose.yml</code></strong>配置文件文件所在目录，最后<strong>启动容器</strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -d用于设置后台启动</span><br><span class="line">docker-compose up -d</span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure><p>Docker Compose将所管理的容器分为<strong>工程</strong>、<strong>服务</strong>、<strong>容</strong>器三层，Docker Compose<strong>运行目录下的所有文件</strong>包括<strong><code>docker-compose.yml</code></strong>、 <strong><code>extends</code>文件</strong>或<strong>环境变量文件</strong>等<strong>组成一个工程</strong>，<strong>默认为<code>docker-compose.yml</code>所在目录的目录名称</strong>。<strong>一个工程可包含多个服务</strong>，每个服务中定义了<strong>容器运行的镜像</strong>、<strong>参数</strong>和<strong>依赖</strong>，<strong>一个服务可包括多个容器实例</strong>。</p><p><strong>同一个<code>docker compose</code>内部的容器之间可用服务名相互访问</strong>，<strong>服务名</strong>就<strong>相当于<code>hostname</code></strong>，<strong>可直接<code>ping</code>服务名</strong>，得到的就是服务对应容器的ip，若服务<strong>做了扩容一个服务对应了多个容器</strong>，则<strong><code>ping</code>服务名会轮询访问服务对应的每台容器<code>ip</code></strong> ，Docker底层用了<strong><code>LVS</code></strong>等技术实现该负载均衡。</p><h4 id="docker-compose-yml常用指令"><a href="#docker-compose-yml常用指令" class="headerlink" title="docker-compose.yml常用指令"></a>docker-compose.yml常用指令</h4><p>可以参考<strong><code>docker-compose.yml</code></strong>文件<a href="https://docs.docker.com/compose/compose-file/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># image指定镜像名称或镜像id，若该镜像在本地不存在，Compose会尝试pull下来</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">java</span></span><br><span class="line"><span class="comment"># 指定Dockerfile文件的路径</span></span><br><span class="line"><span class="attr">build:</span> <span class="string">./dir</span></span><br><span class="line"><span class="comment"># build也可以是一个对象，用以指定Dockerfile和参数</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">./dir</span></span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile-alternate</span></span><br><span class="line">  <span class="attr">args:</span></span><br><span class="line">    <span class="attr">buildno:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># 覆盖容器启动后默认执行的命令</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">bundle</span> <span class="string">exec</span> <span class="string">thin</span> <span class="string">-p</span> <span class="number">3000</span></span><br><span class="line"><span class="comment"># command也可以是一个list，类似于Dockerfile中的CMD指令</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">[bundle,</span> <span class="string">exec,</span> <span class="string">thin,</span> <span class="string">-p,</span> <span class="number">3000</span><span class="string">]</span></span><br><span class="line"><span class="comment"># links显示链接到其他服务中的容器，可指定服务名称和链接的别名使用SERVICE:ALIAS的形式，或者只指定服务名称</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">db:database</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line"><span class="comment"># 表示链接到docker-compose.yml外部的容器，甚至并非Compose管理的容器，特别是对于那些提供共享容器或共同服务</span></span><br><span class="line"><span class="attr">external_links:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">redis_1</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:mysql</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">project_db_1:postgresql</span></span><br><span class="line"><span class="comment"># 暴露端口信息，使用宿主端口:容器端口的格式，或者仅指定容器端口此时宿主机将会随机指定端口，类似于docker run -p</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000-3005"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"9090-9091:8080-8081"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"49100:22"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"127.0.0.1:8001:8001"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"127.0.0.1:5000-5010:5000-5010"</span></span><br><span class="line"><span class="comment"># 暴露端口，只将端口暴露给连接的服务，而不暴露给宿主机</span></span><br><span class="line"><span class="attr">expose:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"3000"</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">"8000"</span></span><br><span class="line"> <span class="comment"># 卷挂载路径设置，可设置宿主机路径HOST:CONTAINER或加上访问模式HOST:CONTAINER:ro</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line"> <span class="comment"># Just specify a path and let the Engine create a volume</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line"> <span class="comment"># Specify an absolute path mapping</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/opt/data:/var/lib/mysql</span></span><br><span class="line"> <span class="comment"># Path on the host, relative to the Compose file</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./cache:/tmp/cache</span></span><br><span class="line"> <span class="comment"># User-relative path</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro</span></span><br><span class="line"> <span class="comment"># Named volume</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">datavolume:/var/lib/mysql</span></span><br><span class="line"><span class="comment"># 从另一个服务或者容器挂载卷。可指定只读或可读写，若访问模式未指定，则默认是可读写</span></span><br><span class="line"><span class="attr">volumes_from:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">service_name</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">service_name:ro</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">container:container_name</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">container:container_name:rw</span></span><br><span class="line"><span class="comment"># 设置环境变量，可使用数组或字典，只有一个key的环境变量可在运行Compose的机器上找到对应的值，这有助于加密的或特殊主机的值</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">  <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">  <span class="attr">SHOW:</span> <span class="string">'true'</span></span><br><span class="line">  <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">SHOW=true</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">SESSION_SECRET</span></span><br><span class="line"><span class="comment"># 从文件中获取环境变量，可为单独的文件路径或列表，若通过docker-compose -f FILE指定了模板文件，则env_file中路径会基于模板文件路径，若有变量名称与environment指令冲突，则以envirment为准</span></span><br><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">env_file:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">/opt/secrets.env</span></span><br><span class="line"><span class="comment"># extends继承另一个服务，基于已有的服务进行扩展</span></span><br><span class="line"><span class="comment"># 设置网络模式</span></span><br><span class="line"><span class="attr">net:</span> <span class="string">"bridge"</span></span><br><span class="line"><span class="attr">net:</span> <span class="string">"host"</span></span><br><span class="line"><span class="attr">net:</span> <span class="string">"none"</span></span><br><span class="line"><span class="attr">net:</span> <span class="string">"container:[service name or container name/id]"</span></span><br><span class="line"><span class="comment"># 配置dns服务器，可为一个值，也可为一个列表</span></span><br><span class="line"><span class="attr">dns:</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"><span class="attr">dns:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span></span><br><span class="line"> <span class="bullet">-</span> <span class="number">9.9</span><span class="number">.9</span><span class="number">.9</span></span><br><span class="line"><span class="comment"># 配置DNS搜索域，可以是一个值，也可以是一个列表</span></span><br><span class="line"><span class="attr">dns_search:</span> <span class="string">example.com</span></span><br><span class="line"><span class="attr">dns_search:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dc1.example.com</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">dc2.example.com</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="comment"># 覆盖容器启动后默认执行的启动mysql命令</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mysqld</span> <span class="string">--character-set-server=utf8mb4</span> <span class="string">--collation-server=utf8mb4_unicode_ci</span> </span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>  <span class="comment"># 关机或者重启机器时，docker同时重启容器，一般mysql服务可这么设置，保持服务一直都在</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">root</span> <span class="comment"># 设置root帐号密码</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/data/db:/var/lib/mysql</span> <span class="comment"># 数据文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/data/conf:/etc/mysql/conf.d</span> <span class="comment"># 配置文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mysql/log:/var/log/mysql</span> <span class="comment"># 日志文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/etc/localtime:/etc/localtime:ro</span>  <span class="comment">#同步宿主机与容器时间，ro代表readonly只读</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">redis:</span>   </span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:5.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">--appendonly</span> <span class="literal">yes</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/redis/data:/data</span> <span class="comment"># 数据文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">6379</span><span class="string">:6379</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rabbitmq:3.7.25-management</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rabbitmq/data:/var/lib/rabbitmq</span> <span class="comment"># 数据文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rabbitmq/log:/var/log/rabbitmq</span> <span class="comment"># 日志文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5672</span><span class="string">:5672</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">15672</span><span class="string">:15672</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:6.4.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"cluster.name=elasticsearch"</span> <span class="comment"># 设置集群名称为elasticsearch</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"discovery.type=single-node"</span> <span class="comment"># 单一节点模式启动</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms512m -Xmx512m"</span> <span class="comment"># 置使用jvm内存大小，稍微配置大点，不然有可能启动不成功</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/elasticsearch/plugins:/usr/share/elasticsearch/plugins</span><span class="comment"># 插件文件挂载</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/elasticsearch/data:/usr/share/elasticsearch/data</span><span class="comment"># 数据文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:6.4.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="comment"># 一个compose文件管理的服务可直接用服务名访问，若给服务取别名则可用links实现，如下面的es就是elasticsearch服务别名</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment"># 用es这个域名访问elasticsearch服务</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment"># kibana在elasticsearch启动之后再启动</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"elasticsearch.hosts=http://es:9200"</span> <span class="comment"># 设置访问elasticsearch的地址</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">logstash:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">logstash:6.4.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">logstash</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># 挂载logstash的配置文件，docker对单个文件的挂载需要先在宿主机建好对应文件才能挂载成功</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/logstash/logstash-springboot.conf:/usr/share/logstash/pipeline/logstash.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span> <span class="comment"># kibana在elasticsearch启动之后再启动</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch:es</span> <span class="comment"># 可用es这个域名访问elasticsearch服务</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">4560</span><span class="string">:4560</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">mongo:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:3.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mongo</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/mongo/db:/data/db</span> <span class="comment"># 数据文件挂载</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">27017</span><span class="string">:27017</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">nacos:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nacos/nacos-server:1.4.2</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nacos</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MODE=standalone</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/nacos/logs/:/home/nacos/logs</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8848:8848"</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">zookeeper:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">zookeeper:3.5</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">2181</span><span class="string">:2181</span> </span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/zookeeper/data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/zookeeper/conf:/conf</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">rocketmq:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rocketmqinc/rocketmq</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>    </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9876</span><span class="string">:9876</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rocketmq/logs:/home/rocketmq/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rocketmq/store:/home/rocketmq/store</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqnamesrv</span></span><br><span class="line">    </span><br><span class="line">  <span class="attr">broker:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">rocketmqinc/rocketmq</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rmqbroker</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>    </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10909</span><span class="string">:10909</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10911</span><span class="string">:10911</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">10912</span><span class="string">:10912</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rocketmq/logs:/home/rocketmq/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rocketmq/store:/home/rocketmq/store</span></span><br><span class="line">      <span class="comment"># 该配置需要先在宿主机对应目录放好broker.conf配置文件，文件内容参考下面文档</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/data/rocketmq/conf/broker.conf:/opt/rocketmq-4.4.0/conf/broker.conf</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">mqbroker</span> <span class="string">-n</span> <span class="string">namesrv:9876</span> <span class="string">-c</span> <span class="string">../conf/broker.conf</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_HOME=/usr/lib/jvm/jre</span></span><br><span class="line">      </span><br><span class="line">  <span class="attr">console:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">styletang/rocketmq-console-ng</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rocketmq-console-ng</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span>    </span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8076</span><span class="string">:8080</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rocketmq</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_OPTS=</span> <span class="string">-Dlogging.level.root=info</span> <span class="string">-Drocketmq.namesrv.addr=rocketmq:9876</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">Dcom.rocketmq.sendMessageWithVIPChannel=false</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">brokerName = broker-a</span><br><span class="line">brokerId = 0</span><br><span class="line">deleteWhen = 04</span><br><span class="line">fileReservedTime = 48</span><br><span class="line">brokerRole = ASYNC_MASTER</span><br><span class="line">flushDiskType = ASYNC_FLUSH</span><br><span class="line"># 宿主机IP</span><br><span class="line">brokerIP1=192.168.65.42</span><br></pre></td></tr></table></figure><h4 id="docker-compose命令"><a href="#docker-compose命令" class="headerlink" title="docker-compose命令"></a>docker-compose命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看compose内的容器</span><br><span class="line">docker-compose -f docker-compose-app.yml ps</span><br><span class="line"><span class="meta">#</span> 关闭或启动或重启compose内的某个容器</span><br><span class="line">docker-compose -f docker-compose-app.yml stop|start|restart &lt;服务名&gt;</span><br><span class="line"><span class="meta">#</span> 关闭或重启compose所有容器</span><br><span class="line">docker-compose -f docker-compose-app.yml stop|restart</span><br><span class="line"><span class="meta">#</span> 查看compose所有容器的运行日志</span><br><span class="line">docker-compose -f docker-compose-app.yml logs -f</span><br><span class="line"><span class="meta">#</span> 查看compose下某个容器的运行日志</span><br><span class="line">docker-compose -f docker-compose-app.yml logs -f &lt;服务名&gt;</span><br><span class="line"><span class="meta">#</span> 也可以把compose的容器日志输出到日志文件里去，然后用tail -f随时查看</span><br><span class="line">docker-compose -f docker-compose-app.yml logs -f &gt;&gt; myDockerCompose.log &amp;</span><br><span class="line"><span class="meta">#</span> 重新构建有变化的镜像并更新到容器再启动</span><br><span class="line">docker-compose -f docker-compose-app.yml up --build -d</span><br><span class="line"><span class="meta">#</span> 重新创建docker-compose.yml配置有变化的容器并启动</span><br><span class="line">docker-compose -f docker-compose-app.yml up --force-recreate -d</span><br><span class="line"><span class="meta">#</span> 停掉容器再删除容器</span><br><span class="line">docker-compose -f docker-compose-app.yml down</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">eleven-auth:</span><span class="comment"># 指定服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eleven-auth:0.0.1</span>  <span class="comment"># 指定镜像名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./eleven</span>   <span class="comment"># 指定Dockfile所在路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">eleven-auth</span><span class="comment"># 指定启动容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8888:8888"</span>   <span class="comment"># 指定端口映射</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8888</span>          <span class="comment"># 声明容器对外暴露的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_TOOL_OPTIONS=-Xmx1g</span> <span class="string">-Xms1g</span> <span class="string">-XX:MaxMetaspaceSize=512m</span> <span class="string">-javaagent:/agent/skywalking-agent.jar</span> <span class="string">-DSW_AGENT_NAME=eleven-auth</span> <span class="string">-DSW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.0.180:11800</span></span><br><span class="line">    <span class="comment"># 访问不在同一个compose文件管理的服务需要用external_links，前提是这些服务都在同一个网络下才能正常访问 </span></span><br><span class="line">    <span class="attr">external_links:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span>  <span class="comment"># 可用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span>   <span class="comment"># 可用db这个域名访问mysql服务</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_PTRACE</span>  <span class="comment"># 该参数让docker能支持在容器里能执行jdk自带的类似jinfo，jmap这些命令</span></span><br><span class="line">  <span class="attr">eleven-user:</span><span class="comment"># 指定服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eleven-user:0.0.1</span>  <span class="comment"># 指定镜像名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./eleven</span>   <span class="comment"># 指定Dockfile所在路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">eleven-user</span><span class="comment"># 指定启动容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8877:8877"</span>   <span class="comment"># 指定端口映射</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8877</span>          <span class="comment"># 声明容器对外暴露的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_TOOL_OPTIONS=-Xmx1g</span> <span class="string">-Xms1g</span> <span class="string">-XX:MaxMetaspaceSize=512m</span> <span class="string">-javaagent:/agent/skywalking-agent.jar</span> <span class="string">-DSW_AGENT_NAME=eleven-user</span> <span class="string">-DSW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.0.180:11800</span></span><br><span class="line">    <span class="comment"># 访问不在同一个compose文件管理的服务需要用external_links，前提是这些服务都在同一个网络下才能正常访问 </span></span><br><span class="line">    <span class="attr">external_links:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span>  <span class="comment"># 可用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span>   <span class="comment"># 可用db这个域名访问mysql服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_PTRACE</span>  <span class="comment"># 该参数让docker能支持在容器里能执行jdk自带的类似jinfo，jmap这些命令</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eleven-auth</span>  <span class="comment"># authcenter启动之后再启动</span></span><br></pre></td></tr></table></figure><p>有时需要<strong>扩容微服务</strong>，则需要将<strong><code>docker-compose.yml</code></strong>里的服务的<strong>端口映射</strong>和<strong>容器名称</strong>都注释掉，因为不可能两个服务的容器映射到宿主机的同一个端口：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.8'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">eleven-auth:</span><span class="comment"># 指定服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eleven-auth:0.0.1</span>  <span class="comment"># 指定镜像名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./eleven</span>   <span class="comment"># 指定Dockfile所在路径</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">eleven-auth</span><span class="comment"># 指定启动容器名称</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8888:8888"</span>   <span class="comment"># 指定端口映射</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8888</span>          <span class="comment"># 声明容器对外暴露的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_TOOL_OPTIONS=-Xmx1g</span> <span class="string">-Xms1g</span> <span class="string">-XX:MaxMetaspaceSize=512m</span> <span class="string">-javaagent:/agent/skywalking-agent.jar</span> <span class="string">-DSW_AGENT_NAME=eleven-auth</span> <span class="string">-DSW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.0.180:11800</span></span><br><span class="line">    <span class="comment"># 访问不在同一个compose文件管理的服务需要用external_links，前提是这些服务都在同一个网络下才能正常访问 </span></span><br><span class="line">    <span class="attr">external_links:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span>  <span class="comment"># 可用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span>   <span class="comment"># 可用db这个域名访问mysql服务</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_PTRACE</span>  <span class="comment"># 该参数让docker能支持在容器里能执行jdk自带的类似jinfo，jmap这些命令</span></span><br><span class="line">  <span class="attr">eleven-user:</span><span class="comment"># 指定服务名</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">eleven-user:0.0.1</span>  <span class="comment"># 指定镜像名称</span></span><br><span class="line">    <span class="attr">build:</span> <span class="string">./eleven</span>   <span class="comment"># 指定Dockfile所在路径</span></span><br><span class="line">    <span class="comment"># container_name: eleven-user# 指定启动容器名称</span></span><br><span class="line">    <span class="comment"># ports:</span></span><br><span class="line">    <span class="comment">#   - "8877:8877"   # 指定端口映射</span></span><br><span class="line">    <span class="comment"># expose:</span></span><br><span class="line">    <span class="comment">#   - 8877          # 声明容器对外暴露的端口</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">JAVA_TOOL_OPTIONS=-Xmx1g</span> <span class="string">-Xms1g</span> <span class="string">-XX:MaxMetaspaceSize=512m</span> <span class="string">-javaagent:/agent/skywalking-agent.jar</span> <span class="string">-DSW_AGENT_NAME=eleven-user</span> <span class="string">-DSW_AGENT_COLLECTOR_BACKEND_SERVICES=192.168.0.180:11800</span></span><br><span class="line">    <span class="comment"># 访问不在同一个compose文件管理的服务需要用external_links，前提是这些服务都在同一个网络下才能正常访问 </span></span><br><span class="line">    <span class="attr">external_links:</span>  </span><br><span class="line">      <span class="bullet">-</span> <span class="string">nacos:nacos</span>  <span class="comment"># 可用nacos这个域名访问nacos服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql:db</span>   <span class="comment"># 可用db这个域名访问mysql服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">rabbitmq</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">SYS_PTRACE</span>  <span class="comment"># 该参数让docker能支持在容器里能执行jdk自带的类似jinfo，jmap这些命令</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">eleven-auth</span>  <span class="comment"># authcenter启动之后再启动</span></span><br><span class="line">    <span class="attr">deploy:</span></span><br><span class="line">      <span class="string">replicas:2</span></span><br></pre></td></tr></table></figure><p>执行如下扩容命令，<strong>服务一旦扩容对应了多个容器，则访问服务名docker会自动负载均衡去访问服务对应的每台容器</strong>，docker compose主要用在<strong>单物理机内扩容</strong>的情况，要做多机扩容还需自己在多个机器上做很多定制化配置，做多物理机扩容一般都会用<strong><code>docker swarm</code></strong>或<strong><code>kubernetes</code></strong>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 必须先正常编排微服务，然后才能动态扩容，文件有变动，需要重新创建容器</span><br><span class="line">docker-compose -f docker-compose-app.yml up --force-recreate -d     </span><br><span class="line">docker-compose -f docker-compose-app.yml scale eleven-user=2</span><br><span class="line"><span class="meta">#</span> 如果要缩容执行如下操作</span><br><span class="line">docker-compose -f docker-compose-app.yml scale eleven-user=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用微服务架构的应用系统一般包含若干个微服务，每个微服务一般都会部署多个实例，若每个微服务都要手动启停，效率很低、维护量很大。可使用&lt;strong&gt;&lt;code&gt;Docker Compose&lt;/code&gt;&lt;/strong&gt;来轻松、高效地管理容器。Docker Compose是
      
    
    </summary>
    
      <category term="云原生" scheme="https://yaoyinglong.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
      <category term="Docker" scheme="https://yaoyinglong.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>模本</title>
    <link href="https://yaoyinglong.github.io/Blog/%E6%A8%A1%E6%9D%BF/"/>
    <id>https://yaoyinglong.github.io/Blog/模板/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-02-11T13:11:28.139Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker基础</title>
    <link href="https://yaoyinglong.github.io/Blog/%E4%BA%91%E5%8E%9F%E7%94%9F/Docker%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/云原生/Docker基础/</id>
    <published>2022-02-10T16:00:00.000Z</published>
    <updated>2022-02-14T02:19:26.704Z</updated>
    
    <content type="html"><![CDATA[<p>Docker是一个开源的<strong>容器引擎</strong>，有助于更快地交付应用。 Docker可<strong>将应用程序和基础设施层隔离</strong>，且能<strong>将基础设施当作程序一样进行管理</strong>。使用Docker可<strong>更快地打包</strong>、<strong>测试</strong>以及<strong>部署应用程序</strong>，且<strong>可缩短从编写到部署运行代码的周期</strong>。Docker有如下优点：</p><ul><li><strong>简化程序</strong>：让开发者可打包应用以及依赖包到一个<strong>可移植</strong>的容器中，然后发布到任何流行Linux机器上，便可实现虚拟化。<strong>方便快捷</strong>是Docker最大优势，过去需要用数天乃至数周的任务，在Docker容器处理下只需要数秒就能完成。Docker镜像中包含了<strong>运行环境</strong>和<strong>配置</strong>，所以Docker可<strong>简化部署多种应用实例工作</strong>。</li><li><strong>节省开支</strong>：云计算时代到来，使开发者<strong>不必为了追求效果而配置高额的硬件</strong>，Docker改变了<strong>高性能必然高价格</strong>的思维定势。Docker与云的结合，让云空间得到更充分的利用。不仅解决了硬件管理问题，也改变了虚拟化的方式。</li></ul><h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><p><img src="../../../../images/云原生/Docker/Docker架构.png" alt></p><h5 id="Docker-daemon"><a href="#Docker-daemon" class="headerlink" title="Docker daemon"></a>Docker daemon</h5><p><strong><code>Docker daemon</code></strong>是<strong>Docker守护进程</strong>是一个<strong>运行在宿主机<code>DOCKER-HOST</code></strong>的后台进程，可通过Docker客户端与之通信。</p><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><p><strong>Docker客户端</strong>是Docker的<strong>用户界面</strong>，可接受<strong>用户命令</strong>和<strong>配置标识</strong>，并<strong>与<code>Docker daemon</code>通信</strong>。图中<strong><code>docker build</code></strong>等都是Docker的相关命令。</p><h5 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h5><p><strong>Docker镜像</strong>是一个<strong>只读模板</strong>，它包<strong>含创建Docker容器的说明</strong>，<strong>和系统安装光盘有点像</strong>，使用系统安装光盘可安装系统，同理使用Docker镜像可运行Docker镜像中的程序。</p><h5 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h5><p><strong>容器</strong>是<strong>镜像的可运行实例</strong>，<strong>镜像和容器的关系有点类似于面向对象中，类和对象的关系</strong>，可通过Docker API或CLI命令来<strong>启停</strong>、<strong>移动</strong>、<strong>删除容器</strong>。</p><h5 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h5><p><strong><code>Docker Registry</code></strong>是一个<strong>集中存储与分发镜像的服务</strong>，构建完Docker镜像后，可在当前宿主机上运行。若想要在其他机器上运行该镜像，需要手动复制。此时可借助Docker Registry来避免镜像的手动复制。</p><p><strong>一个Docker Registry可包含多个Docker仓库</strong>，每个仓库可包含<strong>多个镜像标签</strong>，每个标签对应一个Docker镜像。这跟Maven的仓库有点类似，若把Docker Registry比作Maven仓库的话，则Docker仓库就可理解为某jar包的路径，而镜像标签则可理解为jar包的版本号。</p><p>Docker Registry可分为公有Docker Registry和私有Docker Registry，最常用的Docker Registry莫过于官方的默认的Docker Hub，Docker Hub上存放着⼤量优秀的镜像，可使用Docker命令下载并使用。</p><h3 id="Docker虚拟化原理"><a href="#Docker虚拟化原理" class="headerlink" title="Docker虚拟化原理"></a>Docker虚拟化原理</h3><p><strong>传统虚拟化技术</strong>是在<strong>硬件层面实现虚拟化</strong>，增加了<strong>系统调用链路的环节</strong>，<strong>有性能损耗</strong>；<strong>容器虚拟化技术</strong>以<strong>共享宿主机<code>Kernel</code>的方式实现</strong>，<strong>几乎没有性能损耗</strong>。</p><p><img src="../../../../images/云原生/Docker/Docker虚拟化原理.png" alt></p><p>Docker利用的是<strong>宿主机的内核</strong>，而<strong>不需要<code>Guest OS</code></strong>，当新建一个容器时，docker不需要和虚拟机一样重新加载一个操作系统内核，避免了<strong>寻址</strong>、<strong>加载</strong>操作系统内核这些比较费时费资源的过程。当<strong>新建一个虚拟机时</strong>，虚拟机软件需要<strong>加载<code>Guest OS</code></strong>，该新建过程是<strong>分钟级</strong>别的。而Docker由于直接利用宿主机的操作系统，则省略了该过程，因此新建一个Docker容器只需要几秒钟。</p><p><img src="../../../../images/云原生/Docker/容器虚拟化技术与传统虚拟化技术对比.png" alt></p><p>Docker是使用<strong>联合文件系统将机器的资源进行隔离的</strong>，常见的<strong>联合文件系统</strong>有<strong><code>AUFS</code></strong>、<strong><code>Overlay</code></strong>、<strong><code>devicemapper</code></strong>、<strong><code>BTRFS</code></strong>和<strong><code>ZFS</code></strong>等。以Overlay2的架构图为例：</p><p><img src="../../../../images/云原生/Docker/Overlay2联合文件系统架构图.jpeg" alt></p><p><strong><code>Overlayfs</code></strong>在Linux主机上只有<strong>两层</strong>，一个目录在<strong>下层</strong>，用来<strong>保存镜像</strong>(docker)，另外一个目录在<strong>上层</strong>，用来<strong>存储容器信息</strong>。在Overlayfs中，底层的目录叫做<strong><code>lowerdir</code></strong>，顶层的目录称之为<strong><code>upperdir</code></strong>，对外提供统一的文件系统为<strong><code>merged</code></strong>。当需要修改一个文件时，使用<strong>COW(Copy-on-write)写时复制</strong>将文件从<strong>只读的<code>Lower</code>复制到可写的<code>Upper</code>进行修改</strong>，<strong>结果也保存在<code>Upper</code>层</strong>。在<strong><code>Docker</code>中</strong>底下的<strong>只读层</strong>就是<strong><code>image</code></strong>，<strong>可写层</strong>就是<strong><code>Container</code></strong>。</p><h5 id="写时复制技术"><a href="#写时复制技术" class="headerlink" title="写时复制技术"></a>写时复制技术</h5><p><strong>所有驱动都用到写时复制技术</strong>，<strong><code>COW</code></strong>全称copy-on-write，表示<strong>只是在需要写时才去复制</strong>，这是<strong>针对已有文件的修改场景</strong>。如<strong>基于一个Image启动多个Container</strong>，若每个Container都去分配一个Image一样的文件系统，将会占用大量磁盘空间。而COW技术可让所有容器共享Image的文件系统，所有数据都从Image中读取，只有<strong>当要对文件进行写操作时</strong>，<strong>才从<code>Image</code>里把要写的文件复制到自己的文件系统进行修改</strong>。</p><p>无论有多少个容器共享一个Image，所做的<strong>写操作都是对从<code>Image</code>中复制到自己的文件系统的副本上进行</strong>，<strong>并不会修改<code>Image</code>源文件</strong>，且多个容器操作同一个文件，会<strong>在每个容器的文件系统里生成一个副本</strong>，<strong>每个容器修改的都是自己的副本</strong>，<strong>互相隔离互不影响</strong>。使用<strong>COW可有效的提高磁盘的利用率</strong>，故<strong>容器占用空间很少</strong>。</p><h5 id="用时分配"><a href="#用时分配" class="headerlink" title="用时分配"></a>用时分配</h5><p><strong>用时分配</strong>是<strong>针对原本没有该文件的场景</strong>，只有在要新写入一个文件时才分配空间，这样<strong>可提高存储资源的利用率</strong>。如<strong>启动一个容器，并不会因为该容器分配一些磁盘空间</strong>，而是<strong>当有新文件写入时，才按需分配新空间</strong>。</p><h5 id="查看容器占用磁盘大小指令"><a href="#查看容器占用磁盘大小指令" class="headerlink" title="查看容器占用磁盘大小指令"></a>查看容器占用磁盘大小指令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看所有容器的大小</span><br><span class="line">cd /var/lib/docker/containers  # 进入docker容器存储目录</span><br><span class="line">du -sh *  # 查看所有容器的大小</span><br><span class="line">du -sh &lt;容器完整id&gt;  #查看某一个容器的大小</span><br></pre></td></tr></table></figure><h3 id="镜像分层原理"><a href="#镜像分层原理" class="headerlink" title="镜像分层原理"></a>镜像分层原理</h3><p>Docker使用<strong>共享技术减少镜像存储空间</strong>，所有<strong>镜像层</strong>和<strong>容器层</strong>都保存在<strong>宿主机的文件系统<code>/var/lib/docker/</code>中</strong>，<strong>由存储驱动进行管理</strong>，尽管存储方式不尽相同，但在所有版本的Docker中都可<strong>共享镜像层</strong>。在下载镜像时，Docker Daemon会检查镜像中的镜像层与宿主机文件系统中的镜像层进行对比，若存在则不下载，只下载不存在的镜像层，这样可非常<strong>节约存储空间</strong>。<br><img src="../../../../images/云原生/Docker/Docker镜像分层原理1.png" alt></p><h3 id="Docker安装卸载"><a href="#Docker安装卸载" class="headerlink" title="Docker安装卸载"></a>Docker安装卸载</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看当前内核版本，Docker要求CentOS系统的内核版本高于3.10</span><br><span class="line">uname -r</span><br><span class="line"><span class="meta">#</span> 使用root权限登录Centos确保yum包更新到最新</span><br><span class="line">yum -y update</span><br><span class="line"><span class="meta">#</span> 若安装过Docker，卸载旧版本</span><br><span class="line">sudo yum remove -y docker*</span><br><span class="line"><span class="meta">#</span> 安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</span><br><span class="line">yum install -y yum-utils</span><br><span class="line"><span class="meta">#</span> 设置yum源，并更新yum包索引</span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta">#</span> 查看所有仓库中所有docker版本，并选择特定版本安装</span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta">#</span> 安装docker，且指定安装版本</span><br><span class="line">yum install -y docker-ce-3:19.03.9-3.el7.x86_64</span><br><span class="line"><span class="meta">#</span> 启动Docker</span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta">#</span> 将Docker启动加入开机启动</span><br><span class="line">systemctl enable docker</span><br><span class="line"><span class="meta">#</span> 验证安装是否成功：有client和service两部分表示docker安装启动都成功了</span><br><span class="line">docker version</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> Docker卸载</span><br><span class="line">yum remove -y docker*</span><br><span class="line">rm -rf /etc/systemd/system/docker.service.d</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">rm -rf /var/run/docker</span><br></pre></td></tr></table></figure><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>可借助阿里云的镜像加速器，<a href="https://cr.console.aliyun.com/#/accelerator" rel="external nofollow noopener noreferrer" target="_blank">登录阿里云</a>，在配置<strong><code>daemon.json</code></strong>文件时，若<strong><code>JSON</code></strong>格式有问题会导致Docker启动失败。</p><p><img src="../../../../images/云原生/Docker/阿里云镜像加速器配置.png" alt></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line"><span class="meta">#</span> 查看有没有daemon.json，docker默认的配置文件，若没有则新建，若有则修改</span><br><span class="line">vim daemon.json</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://x0y2v4jf.mirror.aliyuncs.com"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 重启docker服务</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用docker search命令搜索存放在Docker Hub中的镜像，搜索含有java关键词的镜像仓库</span><br><span class="line"><span class="meta">#</span> NAME：镜像仓库名称</span><br><span class="line"><span class="meta">#</span> DESCRIPTION：镜像仓库描述</span><br><span class="line"><span class="meta">#</span> STARS：镜像仓库收藏数，表示该镜像仓库的受欢迎程度，类似于GitHub的stars0</span><br><span class="line"><span class="meta">#</span> OFFICAL：表示是否为官方仓库，该列标记为[0K]的镜像均由各软件的官方项目组创建和维护</span><br><span class="line"><span class="meta">#</span> AUTOMATED：表示是否是自动构建的镜像仓库</span><br><span class="line">docker search java</span><br><span class="line"><span class="meta">#</span> docker pull命令可从Docker Registry上下载镜像，执行该命令后，Docker会从Docker Hub中的nginx仓库下载最新版本的nginx镜像</span><br><span class="line">docker pull nginx</span><br><span class="line"><span class="meta">#</span> 若要下载指定版本则在java后面加冒号指定版本</span><br><span class="line">docker pull java:8</span><br><span class="line"><span class="meta">#</span> 列出已下载的镜像：REPOSITORY镜像所属仓库名称，TAG镜像标签默认是latest最新，IMAGE ID镜像ID镜像唯一标识，CREATED镜像创建时间，SIZE镜像大小</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="删除本地镜像"><a href="#删除本地镜像" class="headerlink" title="删除本地镜像"></a>删除本地镜像</h5><p>通过<strong><code>docker rmi</code></strong>命令删除镜像时，<strong>若不是<code>latest</code>版本</strong>，<strong>删除时需要加上版本号</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除指定镜像</span><br><span class="line">docker rmi java</span><br><span class="line"><span class="meta">#</span> 删除指定版本即Tag的镜像</span><br><span class="line">docker rmi java:8</span><br><span class="line">docker rmi -f nginx</span><br><span class="line"><span class="meta">#</span> 删除所有镜像</span><br><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h5 id="新建并启动容器"><a href="#新建并启动容器" class="headerlink" title="新建并启动容器"></a>新建并启动容器</h5><p>使用<strong><code>docker run</code></strong>命令即可<strong>新建并启动一个容器</strong>，该命令会<strong>先检查本地是否存在指定镜像</strong>，若本地不存在该名称的镜像，Docker就会自动从Docker Hub下载镜像并启动一个 Docker容器，该命令常用选项：</p><ul><li><strong><code>-d</code></strong>选项：表示<strong>后台运行</strong></li><li><strong><code>-P</code></strong>选项：<strong>随机端口映射</strong></li><li><strong><code>-p</code></strong>选项：<strong>指定端口映射</strong>，有以下四种格式<ul><li>–ip:hostPort:containerPort</li><li>–ip::containerPort</li><li>–hostPort:containerPort </li><li>–containerPort</li></ul></li><li><strong><code>--net</code></strong>选项：<strong>指定网络模式</strong>，该选项有以下可选参数<ul><li>–net=<strong><code>bridge</code></strong>：<strong>默认选项</strong>，表示连接到默认的网桥</li><li>–net=host：容器<strong>使用宿主机的网络</strong></li><li>–net=container:NAME-or-ID：告诉Docker让新建的容器使用已有容器的网络配置</li><li>–net=none：不配置该容器的网络，用户可自定义网络配置</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 91:80 nginx</span><br><span class="line"><span class="meta">#</span> 通过--name指定容器名称为nginx_eleven</span><br><span class="line">docker run -d --name nginx_eleven -p 91:80 nginx</span><br><span class="line"><span class="meta">#</span> 启动已停止的容器，若容器已近被创建，但是被停止后不能创建相同名称的容器</span><br><span class="line">docker start nginx_eleven</span><br><span class="line">docker start 31dc1cff48b7</span><br></pre></td></tr></table></figure><h5 id="停止镜像"><a href="#停止镜像" class="headerlink" title="停止镜像"></a>停止镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 31dc1cff48b7是容器ID</span><br><span class="line">docker stop 31dc1cff48b7</span><br><span class="line"><span class="meta">#</span> 使用docker stop容器名称来停止指定容器</span><br><span class="line">docker stop nginx_eleven</span><br><span class="line"><span class="meta">#</span> 发送SIGKILL信号来强制停止容器</span><br><span class="line">docker kill 31dc1cff48b7</span><br><span class="line">docker kill nginx_eleven</span><br></pre></td></tr></table></figure><h5 id="列出容器"><a href="#列出容器" class="headerlink" title="列出容器"></a>列出容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 列出运行中的容器</span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span> 列出包括已停止的容器</span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/docker ps.png" alt></p><p><strong><code>CONTAINER_ID</code></strong>表示<strong>容器ID</strong>，<strong><code>IMAGE</code></strong>表示<strong>镜像名称</strong>，<strong><code>COMMAND</code></strong>表示<strong>启动容器时运行的命令</strong>，<strong><code>CREATED</code></strong>表示<strong>容器创建时间</strong>，<strong><code>STATUS</code></strong>表示<strong>容器运行状态</strong>，<strong><code>UP</code></strong>表示<strong>运行中</strong>，<strong><code>Exited</code></strong>表示<strong>已停止</strong>，<strong><code>PORTS</code></strong>表示<strong>容器对外端口号</strong>，<strong><code>NAMES</code></strong>表示<strong>容器名称</strong>，该名称默认由Docker自动生成，也可使用<strong><code>docker run</code></strong>命令的<strong><code>--name</code></strong>选项自行指定。</p><h5 id="查看容器信息"><a href="#查看容器信息" class="headerlink" title="查看容器信息"></a>查看容器信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 查看容器所有信息</span><br><span class="line">docker inspect 31dc1cff48b7</span><br><span class="line">docker inspect nginx_eleven</span><br><span class="line"><span class="meta">#</span> 查看容器日志</span><br><span class="line">docekr container logs nginx_eleven</span><br><span class="line"><span class="meta">#</span> 查看容器里的进程</span><br><span class="line">docker top nginx_eleven</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/docker top.png" alt></p><h5 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h5><p>使用<strong><code>docker exec</code></strong>命令用于<strong>进入一个正在运行的docker容器</strong>，若<strong><code>docker run</code></strong>命令运行容器时未使用<strong><code>-it</code></strong>参数，就要用该命令进入容器。一旦进入容器就可在容器的Shell执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用exit命令退出容器</span><br><span class="line">docker exec -it 31dc1cff48b7 /bin/bash</span><br><span class="line">docker exec -it nginx_eleven /bin/bash</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/docker exec -it进入容器.png" alt></p><h5 id="容器与宿主机相互复制文件"><a href="#容器与宿主机相互复制文件" class="headerlink" title="容器与宿主机相互复制文件"></a>容器与宿主机相互复制文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 从容器里面拷文件到宿主机</span><br><span class="line"><span class="meta">#</span> docker cp 容器id或容器名称:要拷贝的文件在容器里面的路径 宿主机的相应路径 </span><br><span class="line">docker cp nginx_eleven:/etc/nginx/nginx.conf /mydata/nginx</span><br><span class="line"><span class="meta">#</span> docker cp 要拷贝的宿主机文件路径 容器id:要拷贝到容器里面对应的路径</span><br><span class="line">docker cp /data/nginx/test.txt nginx_eleven:/etc/nginx/</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/宿主机文件拷贝到容器中.png" alt></p><h5 id="在容器中安装软件"><a href="#在容器中安装软件" class="headerlink" title="在容器中安装软件"></a>在容器中安装软件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 进入容器</span><br><span class="line">docker exec -it nginx_eleven /bin/bash</span><br><span class="line"><span class="meta">#</span> 在容器中执行以下命令</span><br><span class="line">apt-get update</span><br><span class="line">apt-get install vim           # 安装vim</span><br><span class="line">apt-get install iputils-ping  # 安装ping</span><br><span class="line">apt-get install net-tools     # 安装ifconfig</span><br></pre></td></tr></table></figure><h5 id="删除容器"><a href="#删除容器" class="headerlink" title="删除容器"></a>删除容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 删除指定容器，只能删除已停止的容器，若需删除正在运行的容器，可使用-f参数</span><br><span class="line">docker rm 31dc1cff48b7</span><br><span class="line">docker rm nginx_eleven</span><br><span class="line"><span class="meta">#</span> 强制删除所有容器</span><br><span class="line">docker rm -f $(docker ps -a -q)</span><br></pre></td></tr></table></figure><h5 id="查看容器资源使用情况"><a href="#查看容器资源使用情况" class="headerlink" title="查看容器资源使用情况"></a>查看容器资源使用情况</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stats  # 返回容器资源的实时使用情况，1秒刷新一次</span><br><span class="line">docker stats --no-stream  # 返回容器当时的资源使用情况</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/docker stats容器资源使用情况.png" alt></p><p><strong><code>CONTAINER ID</code></strong>表示容器ID，<strong><code>CPU %</code></strong>表示CPU使用情况，<strong><code>MEM USAGE / LIMIT</code></strong>当前使用内存和最大可使用内存，<strong><code>MEM %</code></strong>以百分比的形式显示内存使用情况，<strong><code>NET I/O</code></strong>网络I/O数据，<strong><code>BLOCK I/O</code></strong>磁盘I/O数据，<strong><code>PIDS</code></strong>表示PID号。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>可以使用<strong><code>Dockerfile</code></strong>构建Docker镜像，从而将微服务运行在docker上，<strong><code>Dockerfile</code></strong>是一个<strong>文本文件</strong>，其中包含了若干条指令，<strong>指令描述了构建镜像的细节</strong>。在/data/docker/nginx_eleven目录下创建一个名为<strong><code>Dockerfile</code></strong>的文件，在里面增加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FROM nginx</span><br><span class="line">RUN echo '&lt;h1&gt;This is Tuling Nginx!!!&lt;/h1&gt;' &gt; /usr/share/nginx/html/index.html</span><br></pre></td></tr></table></figure><p>其中的<strong><code>FROM</code></strong>、<strong><code>RUN</code></strong>都是Dockerfile的指令，<strong><code>FROM</code></strong>指令用于<strong>指定基础镜像</strong>，<strong><code>RUN</code></strong>指令用于<strong>执行命令</strong>，创建好Dockerfile后通过                <strong><code>docker build</code></strong>命令构建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> -t指定镜像名字，eleven表示打包的版本号，/data/docker/nginx_eleven为Dockerfile文件路径</span><br><span class="line">docker build -t nginx:eleven /data/docker/nginx_eleven</span><br></pre></td></tr></table></figure><p><img src="../../../../images/云原生/Docker/构建镜像1.png" alt></p><h5 id="Dockerfile常用指令"><a href="#Dockerfile常用指令" class="headerlink" title="Dockerfile常用指令"></a>Dockerfile常用指令</h5><table><thead><tr><th>命令</th><th>用途</th></tr></thead><tbody><tr><td><strong><code>FROM</code></strong></td><td><strong>基础镜像文件</strong></td></tr><tr><td><strong><code>RUN</code></strong></td><td><strong>构建镜像阶段执行命令</strong>，执行结果会打包进入image文件，<strong>一个<code>Dockerfile</code>可包含多个<code>RUN</code>命令</strong></td></tr><tr><td><strong><code>ADD</code></strong></td><td><strong>添加文件</strong>，从src目录复制文件到容器的dest，其中src可Dockerfile所在目录相对路径，也可以是一个URL，还可是一个压缩包</td></tr><tr><td><strong><code>COPY</code></strong></td><td><strong>拷贝文件</strong>，和ADD命令类似，但不支持URL和压缩包</td></tr><tr><td><strong><code>CMD</code></strong></td><td>容器<strong>启动后执行命令</strong>，一个<strong><code>Dockerfile</code></strong>只能包含<strong>一个<code>CMD</code>命令</strong>，指定了CMD命令以后，<strong><code>docker container run</code></strong>命令就不能附加命令了，如前面的/bin/bash，否则会覆盖CMD命令</td></tr><tr><td><strong><code>EXPOSE</code></strong></td><td>声明容器在运行时<strong>对外提供的服务端口</strong></td></tr><tr><td><strong><code>WORKDIR</code></strong></td><td>指定<strong>容器工作路径</strong></td></tr><tr><td><strong><code>ENV</code></strong></td><td>指定<strong>环境变量</strong></td></tr><tr><td><strong><code>ENTRYPINT</code></strong></td><td>容器入口， ENTRYPOINT和CMD指令目的一样，都是指定Docker容器启动时执行的命令，可多次设置但只有最后一个有效</td></tr><tr><td><strong><code>USER</code></strong></td><td>该指令用于<strong>设置启动镜像时的用户或<code>UID</code></strong>，写在该指令后的<strong><code>RUN</code></strong>、<strong><code>CMD</code></strong>、<strong><code>ENTRYPOINT</code></strong>指令都将使用该用户执行命令</td></tr><tr><td><strong><code>VOLUME</code></strong></td><td><strong>指定挂载点</strong>，该指令使容器中的一个目录具有持久化存储的功能，该目录可被容器本身使用，也可共享给其他容器，当容器中的应用有持久化数据的需求时可在Dockerfile中使用该指令，格式为<strong><code>VOLUME[&quot;/data&quot;]</code></strong></td></tr></tbody></table><h5 id="使用Dockerfile构建微服务镜像"><a href="#使用Dockerfile构建微服务镜像" class="headerlink" title="使用Dockerfile构建微服务镜像"></a>使用Dockerfile构建微服务镜像</h5><p>以eureka-server为例，将该微服务的可运行jar包构建成docker镜像，首先将该jar包上传到<strong><code>/data/docker/eureka</code></strong>目录，并在jar包所在目录创建名为<strong><code>Dockerfile</code></strong>的文件，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 基于哪个镜像</span><br><span class="line">From java:8</span><br><span class="line"><span class="meta">#</span> 复制文件到容器</span><br><span class="line">ADD eureka-server-0.0.1-SNAPSHOT.jar /app.jar</span><br><span class="line"><span class="meta">#</span> 声明需要暴露的端口</span><br><span class="line">EXPOSE 8761</span><br><span class="line"><span class="meta">#</span> 配置容器启动后执行的命令</span><br><span class="line">ENTRYPOINT java $&#123;JAVA_OPTS&#125; -jar /app.jar</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> 使用docker build命令构建镜像</span><br><span class="line">docker build -t eleven-eureka-server:0.0.1 /data/docker/eureka</span><br><span class="line"><span class="meta">#</span> 启动镜像，加-d可在后台启动</span><br><span class="line">docker run -d -p 8761:8761 eleven-eureka-server:0.0.1</span><br><span class="line"><span class="meta">#</span> 使用-v可挂载一个主机上的目录到容器的目录</span><br><span class="line">docker run -d -p 8761:8761 -v /log:/container-log eleven-eureka-server:0.0.1</span><br><span class="line"><span class="meta">#</span> 加上JVM参数</span><br><span class="line"><span class="meta">#</span> 参数--cap-add=SYS_PTRACE是让docker能支持在容器里能执行jdk自带类似jinfo，jmap等命令，若不需要在容器里执行这些命令可不加</span><br><span class="line">docker run -e JAVA_OPTS='-Xms1028M -Xmx1028M -Xmn512M -Xss512K -XX:MetaspaceSize=256M -XX:MaxMetaspaceSize=256M' --cap-add=SYS_PTRACE -d -p 8761:8761 eleven-eureka-server:0.0.1</span><br></pre></td></tr></table></figure><h5 id="将微服务镜像发布到远程镜像仓库"><a href="#将微服务镜像发布到远程镜像仓库" class="headerlink" title="将微服务镜像发布到远程镜像仓库"></a>将微服务镜像发布到远程镜像仓库</h5><p>制作好微服务镜像，一般需要发布到镜像仓库供别人使用，可选择自建镜像仓库，也可直接使用docker<a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">官方镜像仓库</a>，首先需要在docke官方镜像仓库里注册一个账号，然后在Linux服务器上用<strong><code>docker login</code></strong>命令登录镜像仓库，要把镜像推送到镜像仓库，需要将镜像前面加个分组名，一般为docker hub的账户名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br><span class="line"><span class="meta">#</span> 修改镜像名字</span><br><span class="line">docker tag eleven-eureka-server:0.0.1 eleven/eleven-eureka-server:0.0.1</span><br><span class="line"><span class="meta">#</span> 将镜像推送到远程仓库</span><br><span class="line">docker push eleven/eleven-eureka-server:0.0.1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker是一个开源的&lt;strong&gt;容器引擎&lt;/strong&gt;，有助于更快地交付应用。 Docker可&lt;strong&gt;将应用程序和基础设施层隔离&lt;/strong&gt;，且能&lt;strong&gt;将基础设施当作程序一样进行管理&lt;/strong&gt;。使用Docker可&lt;strong&gt;更
      
    
    </summary>
    
      <category term="云原生" scheme="https://yaoyinglong.github.io/categories/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
    
      <category term="云原生" scheme="https://yaoyinglong.github.io/tags/%E4%BA%91%E5%8E%9F%E7%94%9F/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务解决方案</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/分布式事务解决方案/</id>
    <published>2022-02-08T16:00:00.000Z</published>
    <updated>2022-02-11T13:11:28.069Z</updated>
    
    <content type="html"><![CDATA[<p>大多数场景下应用都只需要操作单一数据库，该情况下的事务称之为<strong>本地事务</strong>(Local Transaction)。<strong>本地事务的ACID特性是数据库直接提供支持</strong>。在JDBC编程中通过<strong><code>java.sql.Connection</code></strong>对象来<strong>开启</strong>、<strong>关闭</strong>或<strong>提交</strong>事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = ... ; <span class="comment">//获取数据库连接</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>); <span class="comment">//开启事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 执行增删改查sql</span></span><br><span class="line">    conn.commit(); <span class="comment">// 提交事务</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    conn.rollback();<span class="comment">// 事务回滚</span></span><br><span class="line">&#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">    conn.close();<span class="comment">// 关闭链接</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>绝大部分公司都进行了<strong>数据库拆分</strong>和<strong>服务化</strong>，完成某一个业务功能可能需要横跨多个服务，操作多个数据库，<strong>需要操作的资源位于多个资源服务器上</strong>，<strong>分布式事务</strong>就是为了保证<strong>不同资源服务器</strong>的<strong>数据一致性</strong>。典型的分布式事务场景：<strong>垮库事务</strong>、<strong>分库分表</strong>、<strong>服务化</strong>。</p><h3 id="DTP模型"><a href="#DTP模型" class="headerlink" title="DTP模型"></a>DTP模型</h3><p>构成DTP模型的5个基本元素：</p><ul><li><strong><code>AP</code>应用程序Application Program</strong>：用于<strong>定义事务边界</strong>即定义事务的开始和结束，并在事务边界内对资源进行操作</li><li><strong><code>RM</code>资源管理器Resource Manager</strong>：如<strong>数据库</strong>、<strong>文件系统</strong>等，并提供访问资源的方式</li><li><strong><code>TM</code>事务管理器Transaction Manager</strong>：负责分配事务唯一标识，监控事务的执行进度，并负责事务的提交、回滚等</li><li><strong><code>CRM</code>通信资源管理器Communication Resource Manager</strong>：控制一个TM域内或者跨TM域的<strong>分布式应用之间的通信</strong></li><li><strong><code>CP</code>通信协议Communication Protocol</strong>：提供CRM提供的分布式应用节点之间的<strong>底层通信服务</strong></li></ul><h3 id="XA规范"><a href="#XA规范" class="headerlink" title="XA规范"></a>XA规范</h3><p>在DTP本地模型实例中，由<strong><code>AP</code>应用程序</strong>、<strong><code>RMs</code>资源管理器</strong>和<strong><code>TM</code>事务管理器</strong>组成，不需要其他元素，AP、RM和TM之间彼此都需要进行交互。XA规范主要作用是定义了<strong><code>RM-TM</code>的交互接口</strong>，还<strong>对两阶段提交协议进行了优化</strong>。</p><p><img src="../../../../images/Cloud/秒杀/分布式事务XA模型.png" alt></p><p><strong>两阶段协议</strong>是在<strong><code>OSI TP</code></strong>标准中提出的，在DTP参考模型中，指定了<strong>全局事务</strong>的提交要使用<strong>两阶段提交协议</strong>；而XA规范只是定义了<strong>两阶段提交协议中需要使用到的接口</strong>，也就是上述提到的<strong><code>RM-TM</code>交互的接口</strong>。</p><h4 id="两阶段提交协议"><a href="#两阶段提交协议" class="headerlink" title="两阶段提交协议"></a>两阶段提交协议</h4><p><strong>两阶段提交协议</strong>不是在XA规范中提出，但XA规范对其进行了优化，<strong>将提交过程划分为两个阶段</strong>。</p><p><strong>第一阶段</strong>：<strong>TM通知各个RM准备提交它们的事务分支</strong>；若RM判断自己进行的工作<strong>可以被提交</strong>，则<strong>对工作内容进行持久化</strong>，再<strong>给TM肯定答复</strong>；若<strong>发生了其他情况</strong>则给TM的都是<strong>否定答复</strong>。在发送了否定答复并回滚了工作后，RM就可以丢弃该事务分支信息。</p><p><strong>第二阶段</strong>：<strong>TM根据第一阶段各个RM prepare的结果，决定是提交还是回滚事务</strong>；若<strong>所有<code>RM</code>都<code>prepare</code>成功</strong>，则TM通知所有RM进行提交；若<strong>有<code>RM prepare</code>失败</strong>则TM通知所有RM<strong>回滚事务分支</strong>。</p><p><img src="../../../../images/Cloud/秒杀/两阶段提交协议一.png" alt></p><p>二阶段提交看起来确实能够提供原子性的操作，但二阶段提交还是有几个缺点：</p><p><strong>同步阻塞问题</strong>：两阶段提交方案下<strong>全局事务的ACID特性是依赖于RM的</strong>，一个<strong>全局事务</strong>内部包含了<strong>多个独立的事务分支</strong>，这一组事务分支要不都成功要不都失败，<strong>各个事务分支的ACID特性共同构成了全局事务的ACID特性</strong>。<strong>可重复读隔离级别不足以保证分布式事务一致性</strong>，若使用MySQL来支持XA分布式事务最好将事务隔离级别设置为<strong><code>SERIALIZABLE</code></strong>，而<strong><code>SERIALIZABLE</code></strong>是四个事务隔离级别中最高且执行效率最低一个级别。</p><p><strong>单点故障</strong>：由于协调者的重要性，一旦<strong>协调者TM发生故障</strong>，参与者RM会一直阻塞下去。尤其在第二阶段，协调者发生故障，所有参与者还都处于锁定事务资源状态中，而无法继续完成事务操作。若协调者挂掉，可重新选举一个协调者，但无法解决因为协调者宕机导致的参与者处于阻塞状态的问题</p><p><strong>数据不一致</strong>：在第二阶段中当<strong>协调者</strong>向<strong>参与者</strong>发送commit请求之后，发生了<strong>局部网络异常</strong>或在发送commit请求过程中<strong>协调者发生故障</strong>，会导致只有一部分参与者接受到了commit请求，而在这部分参与者接到commit请求之后就会执行commit操作，但是其他部分未接到commit请求的机器则无法执行事务提交。于是整个分布式系统便出现了数据不一致性的现象。</p><hr><p><img src="../../../../images/Cloud/秒杀/常见分布式事务解决方案.png" alt="常见分布式事务解决方案"></p><h3 id="JTA-XA规范实现"><a href="#JTA-XA规范实现" class="headerlink" title="JTA/XA规范实现"></a>JTA/XA规范实现</h3><p>针对实现了JDBC规范中规定的实现<strong><code>XADataSource</code></strong>接口的数据库连接池，典型的<strong><code>XADataSource</code></strong>实现包括：</p><ul><li>MySQL官方提供的<strong><code>com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</code></strong></li><li>阿里巴巴开源的druid连接池，对应的实现类为<strong><code>com.alibaba.druid.pool.xa.DruidXADataSource</code></strong></li><li>tomcat-jdbc连接池提供的<strong><code>org.apache.tomcat.jdbc.pool.XADataSource</code></strong></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- MySQL JDBC实现了XA规范 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.39<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// true表示打印XA语句,，用于调试</span></span><br><span class="line"><span class="keyword">boolean</span> logXaCommands = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// 获得资源管理器操作接口实例 RM1</span></span><br><span class="line">Connection conn1 = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_user"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">XAConnection xaConn1 = <span class="keyword">new</span> MysqlXAConnection((com.mysql.jdbc.Connection) conn1, logXaCommands);</span><br><span class="line">XAResource rm1 = xaConn1.getXAResource();</span><br><span class="line"><span class="comment">// 获得资源管理器操作接口实例 RM2</span></span><br><span class="line">Connection conn2 = DriverManager.getConnection(<span class="string">"jdbc:mysql://localhost:3306/db_account"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>);</span><br><span class="line">XAConnection xaConn2 = <span class="keyword">new</span> MysqlXAConnection((com.mysql.jdbc.Connection) conn2, logXaCommands);</span><br><span class="line">XAResource rm2 = xaConn2.getXAResource();</span><br><span class="line"><span class="comment">// AP请求TM执行一个分布式事务，TM生成全局事务id</span></span><br><span class="line"><span class="keyword">byte</span>[] gtrid = <span class="string">"g12345"</span>.getBytes();</span><br><span class="line"><span class="keyword">int</span> formatId = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// ==============分别执行RM1和RM2上的事务分支====================</span></span><br><span class="line">    <span class="comment">// TM生成rm1上的事务分支id</span></span><br><span class="line">    <span class="keyword">byte</span>[] bqual1 = <span class="string">"b00001"</span>.getBytes();</span><br><span class="line">    Xid xid1 = <span class="keyword">new</span> MysqlXid(gtrid, bqual1, formatId);</span><br><span class="line">    <span class="comment">// 执行rm1上的事务分支</span></span><br><span class="line">    rm1.start(xid1, XAResource.TMNOFLAGS);<span class="comment">// One of TMNOFLAGS, TMJOIN, or TMRESUME.</span></span><br><span class="line">    PreparedStatement ps1 = conn1.prepareStatement(<span class="string">"INSERT into user(name) VALUES ('Eleven')"</span>);</span><br><span class="line">    ps1.execute();</span><br><span class="line">    rm1.end(xid1, XAResource.TMSUCCESS);</span><br><span class="line">    <span class="comment">// TM生成rm2上的事务分支id</span></span><br><span class="line">    <span class="keyword">byte</span>[] bqual2 = <span class="string">"b00002"</span>.getBytes();</span><br><span class="line">    Xid xid2 = <span class="keyword">new</span> MysqlXid(gtrid, bqual2, formatId);</span><br><span class="line">    <span class="comment">// 执行rm2上的事务分支</span></span><br><span class="line">    rm2.start(xid2, XAResource.TMNOFLAGS);</span><br><span class="line">    PreparedStatement ps2 = conn2.prepareStatement(<span class="string">"INSERT into account(user_id, money) VALUES (1, 10000000)"</span>);</span><br><span class="line">    ps2.execute();</span><br><span class="line">    rm2.end(xid2, XAResource.TMSUCCESS);</span><br><span class="line">    <span class="comment">// ===================两阶段提交================================</span></span><br><span class="line">    <span class="comment">// phase1：询问所有的RM 准备提交事务分支</span></span><br><span class="line">    <span class="keyword">int</span> rm1_prepare = rm1.prepare(xid1);</span><br><span class="line">    <span class="keyword">int</span> rm2_prepare = rm2.prepare(xid2);</span><br><span class="line">    <span class="comment">// phase2：提交所有事务分支</span></span><br><span class="line">    <span class="keyword">boolean</span> onePhase = <span class="keyword">false</span>;</span><br><span class="line">    <span class="comment">//TM判断有2个事务分支，所以不能优化为一阶段提交</span></span><br><span class="line">    <span class="keyword">if</span> (rm1_prepare == XAResource.XA_OK &amp;&amp; rm2_prepare == XAResource.XA_OK) &#123;</span><br><span class="line">        <span class="comment">// 所有事务分支都prepare成功，提交所有事务分支</span></span><br><span class="line">        rm1.commit(xid1, onePhase);</span><br><span class="line">        rm2.commit(xid2, onePhase);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果有事务分支没有成功，则回滚</span></span><br><span class="line">        rm1.rollback(xid1);</span><br><span class="line">        rm2.rollback(xid2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (XAException e) &#123; <span class="comment">// 如果出现异常，也要进行回滚</span></span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开源框架<strong><code>Atomikos</code></strong>：<strong><code>TransactionEssentials</code></strong>开源的免费产品，<strong><code>ExtremeTransactions</code></strong>上商业版需要收费。</p><p><img src="../../../../images/Cloud/秒杀/TransactionEssentials.png" alt></p><p>TransactionEssentials实现了<strong><code>JTA/XA</code></strong>规范中的<strong>事务管理器</strong>应该实现的相关接口，如<strong><code>UserTransaction</code></strong>实现了<strong><code>com.atomikos.icatch.jta.UserTransactionImp</code></strong>，用户只需要直接操作该类，<strong><code>TransactionManager</code></strong>实现了<strong><code>com.atomikos.icatch.jta.UserTransactionManager</code></strong>，<strong><code>Transaction</code></strong>实现了com.atomikos.icatch.jta.TransactionImp。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JTA规范扩展包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.transaction<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jta<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- atomikos JTA/XA全局事务 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atomikos<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>transactions-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> AtomikosDataSourceBean <span class="title">createAtomikosDataSourceBean</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 连接池基本属性</span></span><br><span class="line">    Properties p = <span class="keyword">new</span> Properties();</span><br><span class="line">    p.setProperty(<span class="string">"url"</span>, <span class="string">"jdbc:mysql://localhost:3306/"</span> + dbName);</span><br><span class="line">    p.setProperty(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">    p.setProperty(<span class="string">"password"</span>, <span class="string">"root"</span>);</span><br><span class="line">    <span class="comment">// 使用AtomikosDataSourceBean封装com.mysql.jdbc.jdbc2.optional.MysqlXADataSource</span></span><br><span class="line">    AtomikosDataSourceBean ds = <span class="keyword">new</span> AtomikosDataSourceBean();</span><br><span class="line">    <span class="comment">// 设置resourceName 唯一</span></span><br><span class="line">    ds.setUniqueResourceName(dbName);</span><br><span class="line">    ds.setXaDataSourceClassName(<span class="string">"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource"</span>);</span><br><span class="line">    ds.setXaProperties(p);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    AtomikosDataSourceBean ds1 = createAtomikosDataSourceBean(<span class="string">"db_user"</span>);</span><br><span class="line">    AtomikosDataSourceBean ds2 = createAtomikosDataSourceBean(<span class="string">"db_account"</span>);</span><br><span class="line">    Connection conn1 = <span class="keyword">null</span>;</span><br><span class="line">    Connection conn2 = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps1 = <span class="keyword">null</span>;</span><br><span class="line">    PreparedStatement ps2 = <span class="keyword">null</span>;</span><br><span class="line">    UserTransaction userTransaction = <span class="keyword">new</span> UserTransactionImp();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 开启事务</span></span><br><span class="line">        userTransaction.begin();</span><br><span class="line">        <span class="comment">// 执行db1上的sql</span></span><br><span class="line">        conn1 = ds1.getConnection();</span><br><span class="line">        ps1 = conn1.prepareStatement(<span class="string">"INSERT into user(name) VALUES (?)"</span>, Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">        ps1.setString(<span class="number">1</span>, <span class="string">"Eleven"</span>);</span><br><span class="line">        ps1.executeUpdate();</span><br><span class="line">        ResultSet generatedKeys = ps1.getGeneratedKeys();</span><br><span class="line">        <span class="keyword">int</span> userId = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (generatedKeys.next()) &#123;</span><br><span class="line">            <span class="comment">// 获得自动生成的userId</span></span><br><span class="line">            userId = generatedKeys.getInt(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 模拟异常 ，直接进入catch代码块，2个都不会提交</span></span><br><span class="line">        <span class="comment">// int i=1/0;</span></span><br><span class="line">        <span class="comment">// 执行db2上的sql</span></span><br><span class="line">        conn2 = ds2.getConnection();</span><br><span class="line">        ps2 = conn2.prepareStatement(<span class="string">"INSERT into account(user_id,money) VALUES (?,?)"</span>);</span><br><span class="line">        ps2.setInt(<span class="number">1</span>, userId);</span><br><span class="line">        ps2.setDouble(<span class="number">2</span>, <span class="number">10000000</span>);</span><br><span class="line">        ps2.executeUpdate();</span><br><span class="line">        <span class="comment">// 两阶段提交</span></span><br><span class="line">        userTransaction.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            userTransaction.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SystemException e1) &#123;</span><br><span class="line">            e1.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ps1.close();</span><br><span class="line">            ps2.close();</span><br><span class="line">            conn1.close();</span><br><span class="line">            conn2.close();</span><br><span class="line">            ds1.close();</span><br><span class="line">            ds2.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ignore) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Seata-AT模式"><a href="#Seata-AT模式" class="headerlink" title="Seata AT模式"></a>Seata AT模式</h3><p>Seata相比与其它分布式事务框架有以下几个<strong>优势</strong>:</p><ul><li><strong>应用层基于SQL解析实现了自动补偿</strong>，从而最大程度的<strong>降低业务侵入性</strong></li><li>将分布式事务中<strong>TC事务协调者独立部署</strong>，负责事务的注册、回滚</li><li>通过<strong>全局锁</strong>实现了<strong>写隔离</strong>与<strong>读隔离</strong></li></ul><p>Seata提供了<strong><code>AT</code></strong>、<strong><code>TCC</code></strong>、<strong><code>SAGA</code></strong>和<strong><code>XA</code></strong>事务模式，AT模式是Seata首推模式，Seata有<strong><code>TC</code>事务协调者</strong>、<strong><code>TM</code>事务管理器</strong>、<strong><code>RM</code>资源管理器</strong>三大角色，<strong><code>TC</code>为单独部署的<code>Server</code>服务端，<code>TM</code>和<code>RM</code>为嵌入到应用中的Client客户端</strong></p><ul><li><strong><code>TC</code>事务协调者</strong>：维护全局和分支事务的状态驱动全局事务提交或回滚</li><li><strong><code>TM</code>事务管理器</strong>：<strong>定义全局事务的范围</strong>开始全局事务、提交或回滚全局事务</li><li><strong><code>RM</code>资源管理器</strong>：管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务状态，并驱动分支事务提交或回滚</li></ul><p><img src="../../../../../images/Seata/分布式事务生命周期.png" alt="Seata分布式事务生命周期"></p><p>TM请求TC开启一个全局事务，TC会生成一个XID作为该全局事务的编号，<strong><code>XID</code>会在微服务的调用链路中传播</strong>，保证将多个微服务的子事务关联在一起；<strong>RM请求TC将本地事务注册为全局事务的分支事务</strong>，<strong>通过全局事务的XID进行关联</strong>；TM请求TC告诉XID对应的全局事务是进行提交还是回滚；TC驱动RM们将XID对应的自己的本地事务进行提交还是回滚。</p><p><img src="../../../../../images/Seata/Seata分布式事务整体执行流程.png" alt></p><p>AT模式的核心是<strong>对业务无侵入</strong>，是一种<strong>改进后的两阶段提交</strong>，前提是<strong>基于支持本地<code>ACID</code>事务的关系型数据库</strong>，<strong><code>Java</code>应用通过<code>JDBC</code>访问数据库</strong>。通过两阶段提交：</p><ul><li><strong>一阶段</strong>：<strong>业务数据</strong>和<strong>回滚日志记录</strong>在<strong>同一个本地事务中提交</strong>，释放本地锁和连接资源，本地事务提交前，需确保先拿到<strong>全局锁</strong>，否则不能提交本地事务，且拿全局锁的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务释放本地锁</li><li><strong>二阶段</strong>：<strong>提交异步化</strong>非常快速地完成，回滚通过一阶段的<strong>回滚日志进行反向补偿</strong></li></ul><p><img src="../../../../../images/Seata/Seata分布式事务第一阶段.png" alt="第一阶段"></p><p><strong>一阶段</strong>会<strong>解析<code>SQL</code>类型</strong>是更新删除还是新增、<strong>表名</strong>、<strong>条件</strong>等相关信息，根据解析得到的条件信息，生成查询语句定位数据生成<strong>前置镜像</strong>，然后执行业务SQL，根据前镜像的结果，通过<strong>主键</strong>定位数据得到<strong>后置镜像</strong>，把<strong>前置镜像</strong>和<strong>后置镜像</strong>数据以及<strong>业务<code>SQL</code></strong>相关的信息组成一条<strong>回滚日志记录</strong>，插入到<strong><code>UNDO_LOG</code></strong>表中。提交前向TC注册分支申请目标表中，对应主键值的记录的<strong>全局锁</strong>，业务数据的更新和前面步骤中生成的<strong><code>UNDO LOG</code></strong>一并提交，将本地事务提交的结果上报给TC。</p><p><img src="../../../../../images/Seata/Seata分布式事务第二阶段回滚.png" alt="第二阶段回滚"></p><p>二阶段回滚，收到TC分支回滚请求，开启一个本地事务，通过XID和Branch ID查找到相应的UNDO LOG记录，拿 UNDO LOG中的后镜与当前数据进行比较，若有<strong>不同</strong>说明数据<strong>被当前全局事务之外的动作做了修改</strong>。该情况需要<strong>根据配置策略来做处理</strong>，根据UNDO LOG中前镜像和业务SQL相关信息生成并执行回滚的语句，提交本地事务并把本地事务的执行结果即<strong>分支事务回滚结果上报给TC事务协调者</strong>。</p><p><img src="../../../../../images/Seata/Seata分布式事务第二阶段提交.png" alt="第二阶段提交"></p><p>二阶段提交，即<strong>分布式事务操作成功</strong>，<strong><code>TC</code>通知<code>RM</code>异步删除<code>undolog</code></strong>，收到TC分支提交请求，把请求放入一个异步任务队列中，马上返回提交成功结果给TC，<strong>异步任务阶段的分支提交请求</strong>将异步和批量地<strong>删除相应<code>UNDO LOG</code>记录</strong>。</p><p>Seata AT模式存在的问题：</p><ul><li><strong>性能损耗</strong>：一条Update的SQL需要与TC通讯获取全局事务xid、before image解析SQL查询一次数据库、after image查询一次数据库、insert undo log写一次数据库、before commit与TC通讯判断锁冲突，这些操作都需要<strong>同步远程通讯RPC</strong>，且undo log写入时blob字段插入性能也不高。每条写SQL都会增加这么多开销，粗略估计会增加5倍响应时间</li><li><strong>性价比</strong>：为了进行自动补偿，需要对所有交易生成前后镜像并持久化，在实际业务场景下<strong>分布式事务失败需要回滚的有多少比率</strong>，按照二八原则预估，为了20%的交易回滚，需要将80%的成功交易的响应时间增加5倍，这样的代价相比于让应用开发一个补偿交易是否是值得</li><li><strong>全局锁</strong>：相比XA，Seata虽然在<strong>一阶段成功后会释放数据库锁</strong>，但<strong>一阶段在commit前全局锁的判定也拉长了对数据锁的占有时间</strong>，这个开销比XA的prepare低多少需要根据实际业务场景进行测试。全局锁的引入实现了隔离性，但带来的问题就是阻塞，降低并发性，<strong>尤其是热点数据</strong>，这个问题会更加严重。</li><li><strong>回滚锁释放时间</strong>：Seata在回滚时，需要先删除各节点的undo log，然后才能释放TC内存中的锁，所以若第二阶段是回滚，释放锁的时间会更长</li><li><strong>死锁问题</strong>：Seata的引入全局锁<strong>会额外增加死锁风险</strong>，若出现死锁会不断进行重试，最后靠等待全局锁超时，这种方式并不优雅，也延长了对数据库锁的占有时间</li></ul><h3 id="柔性事务TCC"><a href="#柔性事务TCC" class="headerlink" title="柔性事务TCC"></a>柔性事务TCC</h3><p>TCC是比较常用的一种<strong>柔性事务方案</strong>。开源的TCC框架：<strong><code>Tcc-Transaction</code></strong>、<strong><code>Hmily</code></strong>、<strong><code>ByteTCC</code></strong>、<strong><code>EasyTransaction</code></strong>、<strong><code>Seata TCC</code></strong>。</p><p><img src="../../../../images/Cloud/秒杀/两阶段提交TCC vs XA.png" alt></p><p>TCC两阶段提交与XA两阶段提交的区别是：<strong>XA是资源层面的分布式事务，强一致性，在两阶段提交的整个过程中，一直会持有资源的锁，TCC是业务层面的分布式事务，最终一致性，不会一直持有资源的锁</strong>。</p><p><strong>TCC事务的优点</strong>是<strong>有效了的避免了XA两阶段提交占用资源锁时间过长导致的性能底下的问题</strong>。相对于AT模式，TCC模式<strong>对业务代码有一定的侵入性</strong>，但TCC模式无AT模式的全局行锁，TCC性能会比AT模式高很多。</p><p><strong>TCC事务的缺点</strong>是主业务服务和从业务服务都需要进行改造，从业务方改造成本更高。原来只需要提供一个接口，现在需要改造成<strong><code>try</code></strong>、<strong><code>confirm</code></strong>、<strong><code>canel</code></strong>三个接口开发成本高。</p><h4 id="空回滚"><a href="#空回滚" class="headerlink" title="空回滚"></a>空回滚</h4><p>在没有调用TCC资源Try方法的情况下，调用了二阶段的Cancel方法，<strong>Cancel方法需要识别出这是一个空回滚</strong>，<strong>然后直接返回成功</strong>，空回滚出现的原因是<strong><code>Try</code>超时丢包</strong>，<strong>分布式事务回滚触发<code>Cancel</code>，出现未收到<code>Try</code>，收到<code>Cancel</code>的情况</strong>。</p><p><img src="../../../../images/Cloud/秒杀/TCC分布式事务-空回滚.png" alt></p><h4 id="悬挂"><a href="#悬挂" class="headerlink" title="悬挂"></a>悬挂</h4><p><strong>悬挂</strong>即<strong><code>Cancel</code>比<code>Try</code>先执行</strong>，要运行空回滚，但<strong>要拒绝空回滚之后的Try操作</strong>，悬挂出现的原因是<strong>Try超时拥堵</strong>，<strong>分布式事务回滚触发<code>Cancel</code>，之后拥堵的<code>Try</code>到达</strong>。</p><p><img src="../../../../images/Cloud/秒杀/TCC分布式事务-悬挂.png" alt></p><h4 id="幂等控制"><a href="#幂等控制" class="headerlink" title="幂等控制"></a>幂等控制</h4><p>Try，Confirm，Cancel都需要保证幂等性，因为<strong>网络抖动</strong>或<strong>拥堵</strong>可能会超时，<strong>事务管理器</strong>会对资源进行<strong>重试</strong>操作，所以很可能一个业务操作会被重复调用，为了不因为重复调用而多次占用资源，需要对服务设计时进行幂等控制，通常可用<strong>事务<code>xid</code></strong>或<strong>业务主键</strong>判重来控制。</p><p><img src="../../../../images/Cloud/秒杀/TCC分布式事务-幂等.png" alt></p><h3 id="TCC设计注意事项"><a href="#TCC设计注意事项" class="headerlink" title="TCC设计注意事项"></a>TCC设计注意事项</h3><p>以扣钱场景为例，场景为A转账30元给B，A和B账户在不同的服务。在微服务架构下，很有可能出现<strong>网络超时</strong>、<strong>重发</strong>，<strong>机器宕机</strong>等一系列的异常，出现<strong>空回滚</strong>、<strong>幂等</strong>、<strong>悬挂</strong>的问题。</p><p><img src="../../../../images/Cloud/秒杀/扣钱基础场景.png" alt></p><p>对于以下示例，都是<strong>先执行账户A的try方法</strong>，从而执行账户B的try方法，若成功则<strong>执行账户A的<code>confirm</code>方法</strong>，<strong>然后执行账户B的<code>confirm</code>方法</strong>，若失败则<strong>执行账户A的<code>concel</code>方法</strong>，然后再<strong>执行账户B的<code>cancel</code>方法</strong>。</p><h4 id="方案A"><a href="#方案A" class="headerlink" title="方案A"></a>方案A</h4><p>方案C优于方案B优于方案A</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 账户A</span><br><span class="line">try： </span><br><span class="line">    检查余额是否够30元      </span><br><span class="line">    扣减30元</span><br><span class="line">confirm：</span><br><span class="line">    空</span><br><span class="line">cancel： </span><br><span class="line">    增加30元</span><br><span class="line"># 账户B</span><br><span class="line">try：</span><br><span class="line">    增加30元        </span><br><span class="line">confirm：</span><br><span class="line">    空        </span><br><span class="line">cancel： </span><br><span class="line">    减少30元</span><br></pre></td></tr></table></figure><h4 id="方案B"><a href="#方案B" class="headerlink" title="方案B"></a>方案B</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 账户A</span><br><span class="line">try： </span><br><span class="line">    检查余额是否够30元</span><br><span class="line">    扣减30元</span><br><span class="line">confirm： </span><br><span class="line">    空        </span><br><span class="line">cancel： </span><br><span class="line">    增加30元</span><br><span class="line"># 账户B</span><br><span class="line">try： </span><br><span class="line">    空        </span><br><span class="line">confirm： </span><br><span class="line">    增加30元        </span><br><span class="line">cancel： </span><br><span class="line">    空</span><br></pre></td></tr></table></figure><h4 id="方案C"><a href="#方案C" class="headerlink" title="方案C"></a>方案C</h4><p>需要创建<strong><code>local_transaction_log</code></strong>日志表用于<strong>幂等性</strong>、<strong>空回滚</strong>、<strong><code>try</code>悬挂处理</strong>时校验</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 账户A</span><br><span class="line">try： </span><br><span class="line">    try幂等校验      </span><br><span class="line">    try悬挂处理      </span><br><span class="line">    检查余额是否够30元      </span><br><span class="line">    扣减30元        </span><br><span class="line">confirm： </span><br><span class="line">    空        </span><br><span class="line">cancel：</span><br><span class="line">    cancel幂等校验</span><br><span class="line">    cancel空回滚处理</span><br><span class="line">    增加可用余额30元</span><br><span class="line"># 账户B</span><br><span class="line">try：</span><br><span class="line">    空</span><br><span class="line">confirm： </span><br><span class="line">    confirm幂等校验      </span><br><span class="line">    正式增加30元</span><br><span class="line">cancel： </span><br><span class="line">    空</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AccountMapper accountMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    Bank2FeignClient bank2FeignClient;</span><br><span class="line">    <span class="comment">// try方法执行逻辑：try幂等校验，try悬挂处理，检查余额是否足够扣减，扣减金额</span></span><br><span class="line">    <span class="comment">// 只要标记@Hmily就是try方法，在注解中指定confirm、cancel两个方法的名字</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">60</span>)</span><br><span class="line">    <span class="meta">@Hmily</span>(confirmMethod = <span class="string">"commit"</span>, cancelMethod = <span class="string">"rollback"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String fromAccountNo, String toAccountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">"bank1 try begin 开始执行...xid:&#123;&#125;"</span>, transId);</span><br><span class="line">        <span class="comment">// 幂等判断 判断local_transaction_log表中是否有try日志记录，如果有则不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountMapper.isExistTransactionLogByType(transId, TransactionEnum.TRY.getValue()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"bank1 try 已经执行，无需重复执行,xid:&#123;&#125;"</span>, transId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// try悬挂处理，如果cancel、confirm有一个已经执行了，try不再执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountMapper.isExistTransactionLogByType(transId, TransactionEnum.CONFIRM.getValue()) &gt; <span class="number">0</span></span><br><span class="line">                || accountMapper.isExistTransactionLogByType(transId, TransactionEnum.CANCEL.getValue()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"bank1 try悬挂处理  cancel或confirm已经执行，不允许执行try,xid:&#123;&#125;"</span>, transId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扣减金额</span></span><br><span class="line">        <span class="keyword">if</span> (accountMapper.subtractAccountBalance(fromAccountNo, amount) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 扣减失败</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"bank1 try 扣减金额失败,xid:"</span> + transId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 插入try执行记录,用于幂等判断</span></span><br><span class="line">        accountMapper.addTransactionLog(transId, TransactionEnum.TRY.getValue());</span><br><span class="line">        <span class="comment">// 转账,远程调用bank2</span></span><br><span class="line">        <span class="keyword">if</span> (!bank2FeignClient.transferTo(toAccountNo, amount)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"bank1 远程调用bank2微服务失败,xid:"</span> + transId);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"bank2 request end 结束执行...xid:&#123;&#125;"</span>, transId);</span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">20</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"人为制造异常,xid:"</span> + transId);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"bank1 try end 结束执行...xid:&#123;&#125;"</span>, transId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(String fromAccountNo, String toAccountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">"bank1 confirm begin 开始执行...xid:&#123;&#125;,accountNo:&#123;&#125;,amount:&#123;&#125;"</span>, transId, fromAccountNo, amount);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// cancel方法执行逻辑： 1.cancel幂等校验 2.cancel空回滚处理 3.增加可用余额</span></span><br><span class="line">    <span class="meta">@Transactional</span>(timeout = <span class="number">60</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rollback</span><span class="params">(String fromAccountNo, String toAccountNo, Double amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取全局事务id</span></span><br><span class="line">        String transId = HmilyTransactionContextLocal.getInstance().get().getTransId();</span><br><span class="line">        log.info(<span class="string">"bank1 cancel begin 开始执行...xid:&#123;&#125;"</span>, transId);</span><br><span class="line">        <span class="comment">// cancel幂等校验</span></span><br><span class="line">        <span class="keyword">if</span> (accountMapper.isExistTransactionLogByType(transId, TransactionEnum.CANCEL.getValue()) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"bank1 cancel 已经执行，无需重复执行,xid:&#123;&#125;"</span>, transId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// cancel空回滚处理，如果try没有执行，cancel不允许执行</span></span><br><span class="line">        <span class="keyword">if</span> (accountMapper.isExistTransactionLogByType(transId, TransactionEnum.TRY.getValue()) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            log.info(<span class="string">"bank1 空回滚处理，try没有执行，不允许cancel执行,xid:&#123;&#125;"</span>, transId);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 增加可用余额</span></span><br><span class="line">        accountMapper.addAccountBalance(fromAccountNo, amount);</span><br><span class="line">        <span class="comment">//插入一条cancel的执行记录</span></span><br><span class="line">        accountMapper.addTransactionLog(transId, TransactionEnum.CANCEL.getValue());</span><br><span class="line">        log.info(<span class="string">"bank1 cancel end 结束执行...xid:&#123;&#125;"</span>, transId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的设计并不能进行并发控制，即隔离性的保证，对业务模型进行优化，<strong>在业务模型中增加冻结金额字段</strong>，用来表示<strong>账户有多少金额处以冻结状态</strong>。</p><p><img src="../../../../images/Cloud/秒杀/扣钱场景一.png" alt></p><p><img src="../../../../images/Cloud/秒杀/扣钱场景二.png" alt></p><p>对于<strong>用户下单场景</strong>，整个业务逻辑由仓储服务、订单服务、帐户服务三个微服务构成，分别完成对给定的商品扣除库存数量、根据采购需求创建订单、从用户帐户中扣除余额。</p><p><img src="../../../../images/Cloud/秒杀/用户下单场景.png" alt></p><hr><h3 id="柔性事务：可靠消息最终一致性方案实现"><a href="#柔性事务：可靠消息最终一致性方案实现" class="headerlink" title="柔性事务：可靠消息最终一致性方案实现"></a>柔性事务：可靠消息最终一致性方案实现</h3><h4 id="本地消息表方案"><a href="#本地消息表方案" class="headerlink" title="本地消息表方案"></a>本地消息表方案</h4><p>本地消息表这个方案最初是eBay提出的，此方案的核心是通过<strong>本地事务</strong>保证数据业务操作和消息的<strong>一致性</strong>，然后通过<strong>定时任务</strong>将消息发送至消息中间件，待确认消息发送给消费方成功再将消息删除。</p><h4 id="Rocketmq事务消息实现"><a href="#Rocketmq事务消息实现" class="headerlink" title="Rocketmq事务消息实现"></a>Rocketmq事务消息实现</h4><hr><h3 id="柔性事务：最大努力通知"><a href="#柔性事务：最大努力通知" class="headerlink" title="柔性事务：最大努力通知"></a>柔性事务：最大努力通知</h3><p><strong>最大努力通知型</strong>是最简单的一种柔性事务，是分布式事务中对一致性<strong>要求最低</strong>的一种，适用于一些<strong>最终一致性时间敏感度低</strong>的业务，且<strong>被动方处理结果不影响主动方的处理结果</strong>，典型的使用场景：<strong>银行通知</strong>、<strong>商户通知</strong>等。最大努力通知型的实现方案，一般符合以下特点，且需要实现<strong>消息重复通知机制</strong>、<strong>息校对机制</strong>：</p><ul><li><strong>不可靠消息</strong>：业务活动主动方，在完成业务处理之后，向业务活动的被动方发送消息，直到通知N次后不再通知，允许消息丢失</li><li><strong>定期校对</strong>：业务活动的被动方，根据定时策略，向业务活动主动方查询，主动方提供查询接口，恢复丢失的业务消息</li></ul><p><img src="../../../../images/Cloud/秒杀/柔性事务-最大努力通知.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大多数场景下应用都只需要操作单一数据库，该情况下的事务称之为&lt;strong&gt;本地事务&lt;/strong&gt;(Local Transaction)。&lt;strong&gt;本地事务的ACID特性是数据库直接提供支持&lt;/strong&gt;。在JDBC编程中通过&lt;strong&gt;&lt;code&gt;jav
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
    
      <category term="分布式事务" scheme="https://yaoyinglong.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Canal基础</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Canal%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Canal基础/</id>
    <published>2022-02-07T16:00:00.000Z</published>
    <updated>2022-02-08T11:19:48.174Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href="https://github.com/alibaba/canal/releases" rel="external nofollow noopener noreferrer" target="_blank">Canal</a>模拟MySQL Slave的交互协议伪装自己为MySQL Slave</strong>，向MySQL Master发送Dump协议MySQL Master收到Dump请求，开始推送Binary Log给Slave即Canal，Canal解析Binary Log对象，原始为byte流。</p><p><img src="../../../../images/Cloud/秒杀/Canal工作原理.png" alt></p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local</span><br><span class="line">mkdir canal</span><br><span class="line">tar -zxvf canal.deployer-1.1.5.tar.gz</span><br><span class="line">vim conf/example/instance.properties</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 修改mysql配置</span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">log-bin=mysql-bin  # 添加这一行就ok </span><br><span class="line">binlog-format=ROW  # 选择row模式 </span><br><span class="line">server-id=1        # 配置mysql replaction需要定义，不能和canal的slaveId重复</span><br><span class="line">binlog-do-db=micromall</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 执行mysql 创建canal用户</span><br><span class="line">create user canal identified by 'canal';</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'canal'@'%';</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="meta">#</span> 查看是否授权成功</span><br><span class="line">select * from user where user='canal' </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 启动canal</span><br><span class="line">cd bin</span><br><span class="line">./startup.sh</span><br></pre></td></tr></table></figure><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><p>修改<strong>instance.properties</strong>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#################################################</span><br><span class="line">## mysql serverId , v1.0.26+ will autoGen</span><br><span class="line"># canal.instance.mysql.slaveId=0</span><br><span class="line"># enable gtid use true/false</span><br><span class="line">canal.instance.gtidon=false</span><br><span class="line"># position info</span><br><span class="line">canal.instance.master.address=127.0.0.1:3306</span><br><span class="line">canal.instance.master.journal.name=</span><br><span class="line">canal.instance.master.position=</span><br><span class="line">canal.instance.master.timestamp=</span><br><span class="line">canal.instance.master.gtid=</span><br><span class="line"></span><br><span class="line"># rds oss binlog</span><br><span class="line">canal.instance.rds.accesskey=</span><br><span class="line">canal.instance.rds.secretkey=</span><br><span class="line">canal.instance.rds.instanceId=</span><br><span class="line"></span><br><span class="line"># table meta tsdb info</span><br><span class="line">canal.instance.tsdb.enable=true</span><br><span class="line">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class="line">#canal.instance.tsdb.dbUsername=canal</span><br><span class="line">#canal.instance.tsdb.dbPassword=canal</span><br><span class="line"></span><br><span class="line">#canal.instance.standby.address =</span><br><span class="line">#canal.instance.standby.journal.name =</span><br><span class="line">#canal.instance.standby.position =</span><br><span class="line">#canal.instance.standby.timestamp =</span><br><span class="line">#canal.instance.standby.gtid=</span><br><span class="line"></span><br><span class="line"># 数据库username/password</span><br><span class="line">canal.instance.dbUsername=root</span><br><span class="line">canal.instance.dbPassword=root</span><br><span class="line">canal.instance.connectionCharset = UTF-8</span><br><span class="line">canal.instance.defaultDatabaseName=eleven</span><br><span class="line"># enable druid Decrypt database password</span><br><span class="line">canal.instance.enableDruid=false</span><br><span class="line">#canal.instance.pwdPublicKey=MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBALK4BUxdDltRRE5/zXpVEVPUgunvscYFtEip3pmLlhrWpacX7y7GCMo2/JM6LeHmiiNdH1FWgGCpUfircSwlWKUCAwEAAQ==</span><br><span class="line"></span><br><span class="line"># table regex</span><br><span class="line"># canal.instance.filter.regex=.*\\..*</span><br><span class="line"># 配置表</span><br><span class="line">canal.instance.filter.regex=micromall.pms_product,micromall.sms_flash_promotion_product_relation</span><br><span class="line"># table black regex</span><br><span class="line">canal.instance.filter.black.regex=mysql\\.slave_.*</span><br><span class="line"># table field filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)</span><br><span class="line">#canal.instance.filter.field=test1.t_product:id/subject/keywords,test2.t_company:id/name/contact/ch</span><br><span class="line"># table field black filter(format: schema1.tableName1:field1/field2,schema2.tableName2:field1/field2)</span><br><span class="line">#canal.instance.filter.black.field=test1.t_product:subject/product_image,test2.t_company:id/name/contact/ch</span><br><span class="line"></span><br><span class="line"># mq config</span><br><span class="line"># 消息队列Topic</span><br><span class="line">canal.mq.topic=productDetailChange</span><br><span class="line"># dynamic topic route by schema or table regex</span><br><span class="line">#canal.mq.dynamicTopic=mytest1.user,mytest2\\..*,.*\\..*</span><br><span class="line">canal.mq.partition=0</span><br><span class="line"># hash partition config</span><br><span class="line">#canal.mq.partitionsNum=3</span><br><span class="line">#canal.mq.partitionHash=test.table:id^name,.*\\..*</span><br><span class="line">#canal.mq.dynamicTopicPartitionNum=test.*:4,mycanal:6</span><br></pre></td></tr></table></figure><p>修改<strong>canal.properties</strong>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line">#################################################</span><br><span class="line">######### common argument#############</span><br><span class="line">#################################################</span><br><span class="line"># tcp bind ip</span><br><span class="line">canal.ip =</span><br><span class="line"># register ip to zookeeper</span><br><span class="line">canal.register.ip =</span><br><span class="line">canal.port = 11111</span><br><span class="line">canal.metrics.pull.port = 11112</span><br><span class="line"># canal instance user/passwd</span><br><span class="line"># canal.user = canal</span><br><span class="line"># canal.passwd = E3619321C1A937C46A0D8BD1DAC39F93B27D4458</span><br><span class="line"></span><br><span class="line"># canal admin config</span><br><span class="line">#canal.admin.manager = 127.0.0.1:8089</span><br><span class="line">canal.admin.port = 11110</span><br><span class="line">canal.admin.user = admin</span><br><span class="line">canal.admin.passwd = 4ACFE3202A5FF5CF467898FC58AAB1D615029441</span><br><span class="line"># admin auto register</span><br><span class="line">#canal.admin.register.auto = true</span><br><span class="line">#canal.admin.register.cluster =</span><br><span class="line">#canal.admin.register.name =</span><br><span class="line"></span><br><span class="line">canal.zkServers =</span><br><span class="line"># flush data to zk</span><br><span class="line">canal.zookeeper.flush.period = 1000</span><br><span class="line">canal.withoutNetty = false</span><br><span class="line"># tcp, kafka, rocketMQ, rabbitMQ</span><br><span class="line">canal.serverMode = tcp</span><br><span class="line"># flush meta cursor/parse position to file</span><br><span class="line">canal.file.data.dir = $&#123;canal.conf.dir&#125;</span><br><span class="line">canal.file.flush.period = 1000</span><br><span class="line">## memory store RingBuffer size, should be Math.pow(2,n)</span><br><span class="line">canal.instance.memory.buffer.size = 16384</span><br><span class="line">## memory store RingBuffer used memory unit size , default 1kb</span><br><span class="line">canal.instance.memory.buffer.memunit = 1024 </span><br><span class="line">## meory store gets mode used MEMSIZE or ITEMSIZE</span><br><span class="line">canal.instance.memory.batch.mode = MEMSIZE</span><br><span class="line">canal.instance.memory.rawEntry = true</span><br><span class="line"></span><br><span class="line">## detecing config</span><br><span class="line">canal.instance.detecting.enable = false</span><br><span class="line">#canal.instance.detecting.sql = insert into retl.xdual values(1,now()) on duplicate key update x=now()</span><br><span class="line">canal.instance.detecting.sql = select 1</span><br><span class="line">canal.instance.detecting.interval.time = 3</span><br><span class="line">canal.instance.detecting.retry.threshold = 3</span><br><span class="line">canal.instance.detecting.heartbeatHaEnable = false</span><br><span class="line"></span><br><span class="line"># support maximum transaction size, more than the size of the transaction will be cut into multiple transactions delivery</span><br><span class="line">canal.instance.transaction.size =  1024</span><br><span class="line"># mysql fallback connected to new master should fallback times</span><br><span class="line">canal.instance.fallbackIntervalInSeconds = 60</span><br><span class="line"></span><br><span class="line"># network config</span><br><span class="line">canal.instance.network.receiveBufferSize = 16384</span><br><span class="line">canal.instance.network.sendBufferSize = 16384</span><br><span class="line">canal.instance.network.soTimeout = 30</span><br><span class="line"></span><br><span class="line"># binlog filter config</span><br><span class="line">canal.instance.filter.druid.ddl = true</span><br><span class="line">canal.instance.filter.query.dcl = false</span><br><span class="line">canal.instance.filter.query.dml = false</span><br><span class="line">canal.instance.filter.query.ddl = false</span><br><span class="line">canal.instance.filter.table.error = false</span><br><span class="line">canal.instance.filter.rows = false</span><br><span class="line">canal.instance.filter.transaction.entry = false</span><br><span class="line">canal.instance.filter.dml.insert = false</span><br><span class="line">canal.instance.filter.dml.update = false</span><br><span class="line">canal.instance.filter.dml.delete = false</span><br><span class="line"></span><br><span class="line"># binlog format/image check</span><br><span class="line">canal.instance.binlog.format = ROW,STATEMENT,MIXED </span><br><span class="line">canal.instance.binlog.image = FULL,MINIMAL,NOBLOB</span><br><span class="line"></span><br><span class="line"># binlog ddl isolation</span><br><span class="line">canal.instance.get.ddl.isolation = false</span><br><span class="line"></span><br><span class="line"># parallel parser config</span><br><span class="line">canal.instance.parser.parallel = true</span><br><span class="line">## concurrent thread number, default 60% available processors, suggest not to exceed Runtime.getRuntime().availableProcessors()</span><br><span class="line">#canal.instance.parser.parallelThreadSize = 16</span><br><span class="line">## disruptor ringbuffer size, must be power of 2</span><br><span class="line">canal.instance.parser.parallelBufferSize = 256</span><br><span class="line"></span><br><span class="line"># table meta tsdb info</span><br><span class="line">canal.instance.tsdb.enable = true</span><br><span class="line">canal.instance.tsdb.dir = $&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class="line">canal.instance.tsdb.url = jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class="line">canal.instance.tsdb.dbUsername = canal</span><br><span class="line">canal.instance.tsdb.dbPassword = canal</span><br><span class="line"># dump snapshot interval, default 24 hour</span><br><span class="line">canal.instance.tsdb.snapshot.interval = 24</span><br><span class="line"># purge snapshot expire , default 360 hour(15 days)</span><br><span class="line">canal.instance.tsdb.snapshot.expire = 360</span><br><span class="line"></span><br><span class="line">#################################################</span><br><span class="line">######### destinations#############</span><br><span class="line">#################################################</span><br><span class="line">canal.destinations = example</span><br><span class="line"># conf root dir</span><br><span class="line">canal.conf.dir = ../conf</span><br><span class="line"># auto scan instance dir add/remove and start/stop instance</span><br><span class="line">canal.auto.scan = true</span><br><span class="line">canal.auto.scan.interval = 5</span><br><span class="line"># set this value to &apos;true&apos; means that when binlog pos not found, skip to latest.</span><br><span class="line"># WARN: pls keep &apos;false&apos; in production env, or if you know what you want.</span><br><span class="line">canal.auto.reset.latest.pos.mode = false</span><br><span class="line"></span><br><span class="line">canal.instance.tsdb.spring.xml = classpath:spring/tsdb/h2-tsdb.xml</span><br><span class="line">#canal.instance.tsdb.spring.xml = classpath:spring/tsdb/mysql-tsdb.xml</span><br><span class="line"></span><br><span class="line">canal.instance.global.mode = spring</span><br><span class="line">canal.instance.global.lazy = false</span><br><span class="line">canal.instance.global.manager.address = $&#123;canal.admin.manager&#125;</span><br><span class="line">#canal.instance.global.spring.xml = classpath:spring/memory-instance.xml</span><br><span class="line">canal.instance.global.spring.xml = classpath:spring/file-instance.xml</span><br><span class="line">#canal.instance.global.spring.xml = classpath:spring/default-instance.xml</span><br><span class="line"></span><br><span class="line">##################################################</span><br><span class="line">#########       MQ Properties      #############</span><br><span class="line">##################################################</span><br><span class="line"># aliyun ak/sk , support rds/mq</span><br><span class="line">canal.aliyun.accessKey =</span><br><span class="line">canal.aliyun.secretKey =</span><br><span class="line">canal.aliyun.uid=</span><br><span class="line"></span><br><span class="line">canal.mq.flatMessage = true</span><br><span class="line">canal.mq.canalBatchSize = 50</span><br><span class="line">canal.mq.canalGetTimeout = 100</span><br><span class="line"># Set this value to &quot;cloud&quot;, if you want open message trace feature in aliyun.</span><br><span class="line">canal.mq.accessChannel = local</span><br><span class="line"></span><br><span class="line">canal.mq.database.hash = true</span><br><span class="line">canal.mq.send.thread.size = 30</span><br><span class="line">canal.mq.build.thread.size = 8</span><br><span class="line"></span><br><span class="line">##################################################</span><br><span class="line">#########      Kafka      #############</span><br><span class="line">##################################################</span><br><span class="line">kafka.bootstrap.servers = 127.0.0.1:9092</span><br><span class="line">kafka.acks = all</span><br><span class="line">kafka.compression.type = none</span><br><span class="line">kafka.batch.size = 16384</span><br><span class="line">kafka.linger.ms = 1</span><br><span class="line">kafka.max.request.size = 1048576</span><br><span class="line">kafka.buffer.memory = 33554432</span><br><span class="line">kafka.max.in.flight.requests.per.connection = 1</span><br><span class="line">kafka.retries = 0</span><br><span class="line"></span><br><span class="line">kafka.kerberos.enable = false</span><br><span class="line">kafka.kerberos.krb5.file = &quot;../conf/kerberos/krb5.conf&quot;</span><br><span class="line">kafka.kerberos.jaas.file = &quot;../conf/kerberos/jaas.conf&quot;</span><br><span class="line"></span><br><span class="line">##################################################</span><br><span class="line">#########     RocketMQ     #############</span><br><span class="line">##################################################</span><br><span class="line">rocketmq.producer.group = test</span><br><span class="line">rocketmq.enable.message.trace = false</span><br><span class="line">rocketmq.customized.trace.topic =</span><br><span class="line">rocketmq.namespace =</span><br><span class="line">rocketmq.namesrv.addr = 127.0.0.1:9876</span><br><span class="line">rocketmq.retry.times.when.send.failed = 0</span><br><span class="line">rocketmq.vip.channel.enabled = false</span><br><span class="line">rocketmq.tag = </span><br><span class="line"></span><br><span class="line">##################################################</span><br><span class="line">#########     RabbitMQ     #############</span><br><span class="line">##################################################</span><br><span class="line">rabbitmq.host =</span><br><span class="line">rabbitmq.virtual.host =</span><br><span class="line">rabbitmq.exchange =</span><br><span class="line">rabbitmq.username =</span><br><span class="line">rabbitmq.password =</span><br><span class="line">rabbitmq.deliveryMode =</span><br></pre></td></tr></table></figure><p><img src="../../../../images/Cloud/秒杀/Canal核心参数说明.png" alt></p><h3 id="Canal内部原理"><a href="#Canal内部原理" class="headerlink" title="Canal内部原理"></a>Canal内部原理</h3><p>Canal源码入口<strong><code>AbstractEventParser</code></strong>的<strong><code>start</code></strong>方法</p><p><img src="../../../../images/Cloud/秒杀/Canal内部原理.png" alt></p><ul><li>server代表一个canal运行实例，对应于一个jvm</li><li>instance对应于一个数据队列 （1个server对应1..n个instance)</li><li>eventParser (数据源接入，模拟slave协议和master进行交互，协议解析)</li><li>eventSink (Parser和Store链接器，进行数据过滤，加工，分发的工作)</li><li>eventStore (数据存储)</li><li>metaManager (增量订阅&amp;消费信息管理器)</li></ul><h3 id="Canal集群高可用"><a href="#Canal集群高可用" class="headerlink" title="Canal集群高可用"></a>Canal集群高可用</h3><p>Canal的HA分为Canal Server和Canal Client两部分实现，整个HA机制的控制主要是依赖了Zookeeper的几个特性，watcher和EPHEMERAL节点和session生命周期绑定。</p><ul><li><strong><code>Canal Server</code></strong>：为了<strong>减少对<code>MySQL Dump</code>的请求</strong>，不同Server上的instance要求<strong>同一时间只能有一个处于<code>Running</code></strong>，其他的处于<strong><code>Standby</code></strong>状态</li><li><strong><code>Canal Client</code></strong>：为了保证<strong>有序性</strong>，一份instance同一时间只能由一个Canal Client进行get/ack/rollback操作，否则客户端接收无法保证有序</li></ul><p><img src="../../../../images/Cloud/秒杀/Canal高可用.png" alt></p><p>Canal Server要启动某个Canal instance时都先向Zookeeper进行一次尝试启动判断，创建EPHEMERAL临时节点，谁创建成功就允许谁启动</p><p>创建Zookeeper节点成功后，对应的Canal Server就启动对应的Canal instance，没有创建成功的Canal instance就会处于Standby状态</p><p>一旦Zookeeper发现Canal Server A创建的节点消失后，立即通知其他的Canal Server再次进行步骤1的操作，重新选出一个Canal Server启动instance.</p><p>Canal Client每次进行connect时，会首先向Zookeeper询问当前是谁启动了Canal instance，然后和其建立链接，一旦链接不可用，会重新尝试connect.</p><p>Canal Client的方式和Canal Server方式类似，也是利用Zookeeper的抢占EPHEMERAL节点的方式进行控制。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener</span>(topic = <span class="string">"$&#123;rocketmq.canal.topic&#125;"</span>, consumerGroup = <span class="string">"$&#123;rocketmq.canal.group&#125;"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefreshCacheListener</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">FlatMessage</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisOpsUtil redisOpsUtil;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String PRODUCT = <span class="string">"pms_product"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String SKU = <span class="string">"pms_sku_stock"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(FlatMessage flatMessage)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//修改后的新记录</span></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; records = flatMessage.getData();</span><br><span class="line">        <span class="comment">//修改前的数据</span></span><br><span class="line">        List&lt;Map&lt;String, String&gt;&gt; old = flatMessage.getOld();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleCanalClientExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建链接</span></span><br><span class="line">        CanalConnector connector = CanalConnectors.newSingleConnector(<span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">11111</span>), <span class="string">"example"</span>, <span class="string">""</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">int</span> batchSize = <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">int</span> emptyCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connector.connect();</span><br><span class="line">            connector.subscribe(<span class="string">".*\\..*"</span>);</span><br><span class="line">            connector.rollback();</span><br><span class="line">            <span class="keyword">int</span> totalEmptyCount = <span class="number">120</span>;</span><br><span class="line">            <span class="keyword">while</span> (emptyCount &lt; totalEmptyCount) &#123;</span><br><span class="line">                Message message = connector.getWithoutAck(batchSize); <span class="comment">// 获取指定数量的数据</span></span><br><span class="line">                <span class="keyword">long</span> batchId = message.getId();</span><br><span class="line">                <span class="keyword">int</span> size = message.getEntries().size();</span><br><span class="line">                <span class="keyword">if</span> (batchId == -<span class="number">1</span> || size == <span class="number">0</span>) &#123;</span><br><span class="line">                    emptyCount++;</span><br><span class="line">                    System.out.println(<span class="string">"empty count : "</span> + emptyCount);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    emptyCount = <span class="number">0</span>;</span><br><span class="line">                    <span class="comment">// System.out.printf("message[batchId=%s,size=%s] \n", batchId, size);</span></span><br><span class="line">                    printEntry(message.getEntries());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                connector.ack(batchId); <span class="comment">// 提交确认</span></span><br><span class="line">                <span class="comment">// connector.rollback(batchId); // 处理失败, 回滚数据</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"empty too many times, exit"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            connector.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printEntry</span><span class="params">(List&lt;Entry&gt; entrys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Entry entry : entrys) &#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getEntryType() == EntryType.TRANSACTIONBEGIN || entry.getEntryType() == EntryType.TRANSACTIONEND) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            RowChange rowChage = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                rowChage = RowChange.parseFrom(entry.getStoreValue());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"ERROR ## parser of eromanga-event has an error , data:"</span> + entry.toString(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            EventType eventType = rowChage.getEventType();</span><br><span class="line">            System.out.println(String.format(<span class="string">"================&amp;gt; binlog[%s:%s] , name[%s,%s] , eventType : %s"</span>,</span><br><span class="line">                                             entry.getHeader().getLogfileName(), entry.getHeader().getLogfileOffset(),</span><br><span class="line">                                             entry.getHeader().getSchemaName(), entry.getHeader().getTableName(),</span><br><span class="line">                                             eventType));</span><br><span class="line">            <span class="keyword">for</span> (RowData rowData : rowChage.getRowDatasList()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (eventType == EventType.DELETE) &#123;</span><br><span class="line">                    printColumn(rowData.getBeforeColumnsList());</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (eventType == EventType.INSERT) &#123;</span><br><span class="line">                    printColumn(rowData.getAfterColumnsList());</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">"-------&amp;gt; before"</span>);</span><br><span class="line">                    printColumn(rowData.getBeforeColumnsList());</span><br><span class="line">                    System.out.println(<span class="string">"-------&amp;gt; after"</span>);</span><br><span class="line">                    printColumn(rowData.getAfterColumnsList());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printColumn</span><span class="params">(List&lt;Column&gt; columns)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Column column : columns) &#123;</span><br><span class="line">            System.out.println(column.getName() + <span class="string">" : "</span> + column.getValue() + <span class="string">"    update="</span> + column.getUpdated());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/alibaba/canal/releases&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Canal&lt;/a&gt;模拟MySQL 
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
    
      <category term="Canal" scheme="https://yaoyinglong.github.io/tags/Canal/"/>
    
  </entry>
  
  <entry>
    <title>秒杀问题及解决方案</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/%E7%A7%92%E6%9D%80%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/秒杀问题及解决方案/</id>
    <published>2022-02-07T16:00:00.000Z</published>
    <updated>2022-02-09T03:18:40.076Z</updated>
    
    <content type="html"><![CDATA[<h4 id="秒杀业务特性"><a href="#秒杀业务特性" class="headerlink" title="秒杀业务特性"></a>秒杀业务特性</h4><p><strong>秒杀具有瞬时高并发的特点</strong>，秒杀请求在时间上高度集中于某一特定的时间点（秒杀开始那一秒），就会导致一个特别高的流量峰值，它对资源的消耗是瞬时的。</p><p>但对秒杀场景来说，最终能够抢到商品的人数是固定的，也就是说100人和10000人发起请求的结果都是一样的，<strong>并发度越高，无效请求也越多</strong>。</p><p>但是<strong>从业务上来说，秒杀活动是希望更多的人来参与</strong>，开始之前希望有更多的人来刷页面，但是真正开始下单时，秒杀请求并不是越多越好。</p><h4 id="流量削峰"><a href="#流量削峰" class="headerlink" title="流量削峰"></a>流量削峰</h4><p><strong>服务器处理资源是恒定的</strong>，用或者不用它的处理能力都是一样的，出现峰值很容易导致忙到处理不过来，闲的时候却又没有什么要处理。</p><p>流量削峰，一是可以<strong>让服务端处理变得更加平稳</strong>，二是可以<strong>节省服务器的资源成本</strong>。针对秒杀这一场景，削峰从本质上来说就是<strong>更多地延缓用户请求的发出</strong>，以便减少和过滤掉一些无效请求，它遵从<strong>请求数要尽量少</strong>的原则。流量削峰的比较常见的思路：<strong>排队</strong>、<strong>答题</strong>、<strong>分层过滤</strong>。</p><h4 id="秒杀业务设计"><a href="#秒杀业务设计" class="headerlink" title="秒杀业务设计"></a>秒杀业务设计</h4><p><img src="../../../../images/Cloud/秒杀/秒杀业务设计一.png" alt></p><p><strong>营销工具：</strong>系统整理的促销工具，可以对某些特定的工具详细解释</p><p><strong>营销活动：</strong>从营销工具中提出创建一个活动</p><p><strong>营销活动订单：</strong>针对营销活动产生的订单</p><p><img src="../../../../images/Cloud/秒杀/秒杀业务设计二.png" alt></p><p><strong>商品级优惠</strong>：限时促销、限时抢购、秒杀、商品包邮</p><p><strong>订单级优惠</strong>：满就赠、满立减、送优惠券、折扣、Vip折扣、订单包邮</p><p><strong>全站级促销优惠</strong>：优惠券、优化券补发、银行促销、支付红包、团购预售、微信砍价</p><h4 id="秒杀技术特性"><a href="#秒杀技术特性" class="headerlink" title="秒杀技术特性"></a>秒杀技术特性</h4><p>单一职责、流量错峰、限流、熔断、降级、队列削峰、预热快速扣减、动静分离</p><hr><p>一般下单流程分为<strong>下单确认</strong>和<strong>下单提交</strong>，核心点为<strong>价格计算</strong>和<strong>库存处理</strong>，在下单确认时首先做一些检查、然后获取会员、商品等信息计算金额生成商品信息。</p><ul><li>信息检查：检查<strong>本地缓存售罄状态</strong>、校验token是否有权限购买、判断redis库存是否充足、检查是否正在排队中</li><li>调用会员服务获取会员信息</li><li>调用产品服务获取产品信息</li><li>验证秒杀时间是否超时</li><li>获取用户收获列表</li><li>构建商品信息</li><li>根据各种优惠计算订单金额</li></ul><p><strong>下单提交的核心流程</strong>为：</p><ul><li>信息检查：检查<strong>本地缓存售罄状态</strong>、校验token是否有权限购买、判断redis库存是否充足、检查是否正在排队中</li><li>调用会员服务获取会员信息</li><li>调用产品服务获取产品信息</li><li>验证秒杀时间是否超时</li><li>预减库存（异步流程）</li><li>生成下单商品信息</li><li>库存处理</li></ul><hr><h3 id="库存问题"><a href="#库存问题" class="headerlink" title="库存问题"></a>库存问题</h3><p>高并发下会出现<strong>超卖问题</strong>、<strong>何时扣减库存</strong></p><h4 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h4><p>可通过<strong>数据库锁</strong>、<strong>redis特性</strong>、<strong>异步下单</strong>等解决方案来解决</p><h4 id="数据库锁"><a href="#数据库锁" class="headerlink" title="数据库锁"></a>数据库锁</h4><p><strong>悲观锁</strong>，通过<strong><code>MySQL</code>提供的<code>select...for update</code></strong>实现的悲观锁方式，但<strong><code>select...for update</code>语句执行中所有扫描过的行都会被锁上</strong>，因此在MySQL中用悲观锁<strong>务必须确定走索引</strong>，而不是全表扫描，否则将会将整个数据表锁住。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> flash_promotion_count <span class="keyword">from</span> sms_flash_promotion_product_relation <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">43</span> <span class="keyword">for</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"><span class="keyword">update</span> sms_flash_promotion_product_relation <span class="keyword">set</span> flash_promotion_count = flash_promotion_count - <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">43</span>;</span><br><span class="line"><span class="comment">--ROLLBACK;</span></span><br><span class="line"><span class="keyword">commit</span>；</span><br></pre></td></tr></table></figure><p>悲观锁大多数情况下依靠<strong>数据库的锁机制</strong>实现，以保证操作最大程度的独占性，若<strong>加锁时间过长</strong>，其他用户长时间无法访问，影响了程序的并发访问性，同时这样对<strong>数据库性能开销影响很大</strong>，特别是对<strong>长事务</strong>而言，这样的开销往往无法承受，这时就需要乐观锁。</p><p><strong>乐观锁</strong>，在<strong>数据进行提交更新时</strong>，才会正式对数据的冲突与否进行检测，若发现冲突则返回错误信息，让用户决定如何去做。<strong>版本号的实现</strong>有<strong>数据版本机制</strong>和<strong>时间催机制</strong>两种。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">select</span> flash_promotion_count <span class="keyword">from</span> sms_flash_promotion_product_relation <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">43</span> ;</span><br><span class="line"><span class="keyword">update</span> sms_flash_promotion_product_relation <span class="keyword">set</span> flash_promotion_count = flash_promotion_count, <span class="keyword">version</span> = <span class="keyword">version</span> + <span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">43</span> <span class="keyword">and</span> <span class="keyword">version</span> = <span class="comment">#version#;</span></span><br><span class="line"><span class="comment">-- ROLLBACK;</span></span><br><span class="line"><span class="keyword">Commit</span>；</span><br></pre></td></tr></table></figure><p>除了查询库存还需要<strong>更新库存</strong>，还有订单、订单日志、订单详情等需要插入数据库。库存更新没问题，但插入订单时<strong>失败</strong>了<strong>是否回滚</strong>，若<strong>不在一个事务就会出错</strong>。若在一个事务又涉及到<strong>事务过长</strong>甚至可能是<strong>跨库</strong>然后无法用本地事务来解决。 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 扣减库存，防止库存超卖，若可以买多个，上面的SQL就有问题</span></span><br><span class="line"><span class="keyword">UPDATE</span> sms_flash_promotion_product_relation</span><br><span class="line"><span class="keyword">SET</span> flash_promotion_count = <span class="keyword">CASE</span></span><br><span class="line">  <span class="keyword">WHEN</span> flash_promotion_count &gt;= <span class="comment">#&#123;stock&#125; THEN</span></span><br><span class="line">    flash_promotion_count - <span class="comment">#&#123;stock&#125;</span></span><br><span class="line">  <span class="keyword">ELSE</span></span><br><span class="line">    flash_promotion_count</span><br><span class="line">  <span class="keyword">END</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">id</span> = <span class="comment">#&#123;id&#125;</span></span><br></pre></td></tr></table></figure><p><strong>数据库锁的问题</strong>：若数据库只有10个商品，1000个人来抢，意味着990个请求没有意义，但这种方案1000个请求都会到数据库尝试扣减库存，大量请求会导致数据库超载。</p><h4 id="Redis版本"><a href="#Redis版本" class="headerlink" title="Redis版本"></a>Redis版本</h4><p>使用数据库锁方案数<strong>据库性能相对来说是有很大瓶颈</strong>，故可把库存放到redis中，秒杀下单时先从redis中获取库存数量，然后根据库存数量判断是否可进行下一步，若有库存就直接下单没有库存就不能下单。这样<strong>可拦截大部分流量进入到数据库中</strong>。需要将商品库存预先加载到Redis中。</p><p><img src="../../../../images/Cloud/秒杀/redis扣减库存一.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从redis缓存当中取出当前要购买的商品库存</span></span><br><span class="line">Integer stock = redisOpsUtil.get(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId, Integer.class);</span><br><span class="line"><span class="keyword">if</span> (stock == <span class="keyword">null</span> || stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.failed(<span class="string">"商品已经售罄，请购买其它商品!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于Redis来说还是有<strong>网络IO</strong>，当商品售罄时在<strong>本地缓存</strong>中设置该商品的售罄标志为true，从而减少Redis的网络IO。</p><p><img src="../../../../images/Cloud/秒杀/redis扣减库存二.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Boolean localcache = cache.getCache(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId);</span><br><span class="line"><span class="keyword">if</span> (localcache != <span class="keyword">null</span> &amp;&amp; localcache) &#123;</span><br><span class="line">    <span class="keyword">return</span> CommonResult.failed(<span class="string">"商品已经售罄,请购买其它商品!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从redis缓存当中取出当前要购买的商品库存</span></span><br><span class="line">Integer stock = redisOpsUtil.get(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId, Integer.class);</span><br><span class="line"><span class="keyword">if</span> (stock == <span class="keyword">null</span> || stock &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// 设置标记，如果售罄了在本地cache中设置为true</span></span><br><span class="line">    cache.setLocalCache(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId, <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> CommonResult.failed(<span class="string">"商品已经售罄,请购买其它商品!"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然可通过增加本地缓存减少Redis网络IO，但会存在<strong>产品售罄标志同步问题</strong>，可<strong>通过<code>Zookeeper</code>的watcher机制来实现同步</strong>，给每个JVM都监听Zookeeper的某个节点，一旦数据有改变之后通知到其他节点上。还可以利用<strong>Redis的<code>Channel</code>机制</strong>实现的<strong>发布订阅模式</strong>来实现<strong>产品售罄标志同步</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisOpsUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publish</span><span class="params">(String channel,Object message)</span></span>&#123;</span><br><span class="line">        redisTemplate.convertAndSend(channel,message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldPublishCleanMsg</span><span class="params">(Long productId)</span> </span>&#123;</span><br><span class="line">    Integer stock = redisOpsUtil.get(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId, Integer.class);</span><br><span class="line">    <span class="keyword">return</span> (stock == <span class="keyword">null</span> || stock &lt;= <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通知服务群,清除本地售罄标记缓存</span></span><br><span class="line"><span class="keyword">if</span> (shouldPublishCleanMsg(productId)) &#123;</span><br><span class="line">    redisOpsUtil.publish(<span class="string">"cleanNoStockCache"</span>, productId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisChannelListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LocalCache localCache;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message, @Nullable <span class="keyword">byte</span>[] pattern)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"sub message :) channel[cleanNoStockCache] !"</span>);</span><br><span class="line">        String productId = <span class="keyword">new</span> String(message.getBody(), StandardCharsets.UTF_8);</span><br><span class="line">        localCache.remove(RedisKeyPrefixConst.MIAOSHA_STOCK_CACHE_PREFIX + productId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Zookeeper</code></strong>和<strong><code>Redis</code></strong>各有各的优缺点，Zookeeper是CP模式的可保证高可用，但<strong>吞吐量会比较低</strong>，<strong>Redis这种发布订阅模式没有<code>Ack</code></strong>，发出去后不管是否收到，因为<strong>减少了通讯吞吐量相对来说会比较高</strong>。</p><h4 id="异步下单"><a href="#异步下单" class="headerlink" title="异步下单"></a>异步下单</h4><p>前面的方案，下单时会插入很多张表，</p><ul><li>异步下单可以分流、让服务器处理压力变小、数据库压力减少</li><li>解耦，业务更清晰</li><li>天然排队处理能力</li><li>消息中间件有很多特性可以利用，如订单取消</li></ul><h4 id="订单超时取消"><a href="#订单超时取消" class="headerlink" title="订单超时取消"></a>订单超时取消</h4><ul><li><p><strong>定时任务</strong>：<strong>时间不准确</strong>，定时扫数据库的话消耗性能也很大，效率也会很低，对<strong>数据库压力太大</strong>，集群还需要保证处理的<strong>幂等性</strong>和<strong>分布式</strong>问题</p></li><li><p><strong>消息队列异步取消</strong>：通过<strong>延时消息</strong>实现</p></li></ul><h4 id="何时扣减库存"><a href="#何时扣减库存" class="headerlink" title="何时扣减库存"></a>何时扣减库存</h4><p><strong>下单</strong>时扣减<strong><code>redis</code></strong>中的库存</p><p><strong>支付</strong>时扣减<strong>数据库</strong>中的库存</p><p>扣减<strong>库存系统</strong>中的库存</p><hr><h3 id="秒杀总结"><a href="#秒杀总结" class="headerlink" title="秒杀总结"></a>秒杀总结</h3><p><strong>尽量将请求拦截在系统上游</strong>，后续占据99%的请求，直接Nginx层面拦截掉</p><p><strong>都多写少的场景多使用缓存</strong>，多级缓存保护好数据库</p><p><strong>用消息中间件解决流量削峰</strong>，订单请求写入RocketMQ进行削峰，让RocketMQ轻松抗下高并发压力，让订单系统慢慢消费和处理下单操作</p><h4 id="秒杀商品详细页架构解决方案"><a href="#秒杀商品详细页架构解决方案" class="headerlink" title="秒杀商品详细页架构解决方案"></a>秒杀商品详细页架构解决方案</h4><p><strong>将秒杀活动商品详情页做成静态化</strong></p><p>提前从数据库中把该页面需要的数据都提取出来组装成一份静态数据放在别的地方，避免每次访问都要访问后端数据库，该方案不适用商品比较多的商城如京东，适合商品较少的如小米，因为一旦修改了模板需要全部进行改动。</p><p><strong>CDN+Nginx+Redis多级缓存架构</strong></p><ul><li><strong>第一级缓存</strong>：请求秒杀商品详情页数据时，<strong>从就近<code>CND</code>上加载</strong>，不需要每次请求都到某个机房</li><li><strong>Nginx基于Lua脚本实现本地缓存</strong>：提前把秒杀商品详情页的数据放到Nginx中缓存，不需要把请求转发到商品系统上</li><li><strong>第二级缓存</strong>：Nginx上存在缓存数据过期之类的问题，导致没有找到需要的数据，此时由Nginx中的Lua脚本发送请求到本地缓存</li><li><strong>第三级缓存</strong>：若还没找到，把请求转发到Redis集群中加载提前放入的秒杀商品数据</li></ul><h4 id="秒杀下单TPS压力过大的解决方案"><a href="#秒杀下单TPS压力过大的解决方案" class="headerlink" title="秒杀下单TPS压力过大的解决方案"></a>秒杀下单TPS压力过大的解决方案</h4><ul><li>加数据库服务器方案<ul><li>会导致公司服务器成本急剧飙升</li><li>库存超卖：乐观锁和悲观锁，都会影响性能</li></ul></li><li>用<strong>答题、复杂验证码</strong>的方案<strong>避免作弊</strong>以及<strong>延时下单</strong>：在前端或客户端设置秒杀答题，错开大量人下单的时间，阻止作弊器刷单</li><li><strong>为秒杀独立出一套订单系统</strong>，专门负责秒杀请求：若秒杀下单请求和普通下单请求都由一套订单系统来承载，可能导致秒杀下单请求耗尽订单系统资源，或导致系统不稳定，从而导致其他普通下单请求也出现问题。</li><li><strong>基于Redis实现下单时精准扣减库存</strong>，一旦库存扣减完则秒杀结束：一般会将每个秒杀商品库存提前写入Redis，在下单请求来后直接对Redis中的库存进行扣减</li><li><strong>抢购完毕后提前过滤无效请求，大幅度消减转发到后端的流量</strong><ul><li>在Redis中库存扣减完成后，说明后续其他请求没有必要发送到秒杀系统中了，因为商品已经被抢购完成了，此时可让Nginx接收到后续请求时直接把后续请求过滤掉</li><li>一旦商品抢购完毕，可在Redis或Zookeeper中写入一个秒杀完毕的标志位，然后反向通知Nginx中自己写的Lua脚本，通过Lua脚本将后续请求直接过滤掉</li><li>在网关层或Sentinel做流量控制</li></ul></li><li><strong>瞬时高并发下单请求进入RocketMQ进行削峰，订单系统慢慢拉取消息完成下单操作</strong>：若判断发现通过Redis完成了库存扣减，此时直接发送消息到RocketMQ即可，让普通订单系统从RocketMQ中消费秒杀成功的消息进行常规的流程处理即可，后续订单系统以每秒几千的速率慢慢处理，延迟可能几十秒，这些订单就能被处理完毕</li></ul><h4 id="前端验证问题"><a href="#前端验证问题" class="headerlink" title="前端验证问题"></a>前端验证问题</h4><p><strong>针对前端验证问题</strong>，可通过<strong>提前发<code>Token</code></strong>，在秒杀前设置一个<strong>预约活动</strong>，如一个秒杀活动有<strong><code>20W</code></strong>个商品，可预先准备<strong><code>200W</code></strong>个Token，用户进行预约时，只发放200W个Token，其他人也能预约成功，但是其实没有获得token，后面秒杀直接通过该Token就可过滤掉一大部分人，相当于没有Token的人都只预约了个寂寞。</p><h4 id="针对超卖问题"><a href="#针对超卖问题" class="headerlink" title="针对超卖问题"></a>针对超卖问题</h4><p><strong>针对超卖问题</strong>，可使用<strong><code>Redis</code>分布式锁防超卖</strong>，针对同一个商品ID，使用一把分布式锁，若同时有成千上万个商品要进行秒杀，那就意味着同一时间Redis上锁解锁的操作会要执行成千上万次，这对Redis的性能消耗是相当巨大的，Redis就有可能升级成为新的性能瓶颈。</p><p>可把<strong>秒杀超卖的问题从分布式降级到本地JVM中</strong>，来获取极限性能。<strong>将秒杀服务接入配置中心</strong>，然后在秒杀服务开始前，<strong>由配置中心给每个应用服务实例下发一个库存数量</strong>。然后每次下单，每个服务器只管自己的库存数量，与其他应用服务器<strong>完全不进行库存同步</strong>，在各自的内存里扣减库存，这样就不会有超卖的情况发生。<strong>减少了网络消耗</strong>，性能也能够进一步提升。</p><p>可能给<strong>某服务器上的库存很快消耗完</strong>了，而其他的服务器上仍有库存，整个服务就会表现为你抢不到商品，但是在你后面抢商品的人却能抢到商品，但是这在秒杀这种场景下，完全是可以接受的。</p><p>若<strong>某一个应用服务器挂了</strong>，给他<strong>分配的库存就会丢失</strong>，这时只需要<strong>统计好订单的数量</strong>，可通过MQ来统计，也可通过Redis统计，等秒杀活动30分钟等待支付期过去后，再将没卖出去的库存重新丢回库存池，与没有付款而被取消的订单商品一起返场售卖即可。 </p><hr><h3 id="兜底方案之限流-amp-降级"><a href="#兜底方案之限流-amp-降级" class="headerlink" title="兜底方案之限流&amp;降级"></a>兜底方案之限流&amp;降级</h3><p>对于很多秒杀系统而言，在诸如双十一这样的大流量的迅猛冲击下，都曾经或多或少发生过宕机的情况。当一个系统面临持续的大流量时，它其实<strong>很难单靠自身调整来恢复状态</strong>，必须等待<strong>流量自然下降</strong>或<strong>人为地把流量切走</strong>才行，这无疑会严重影响用户的购物体验。</p><p>在系统<strong>达到不可用状态之前</strong>就做好<strong>流量限制</strong>，防止最坏情况的发生。针对秒杀系统，在遇到大流量时，更多考虑的是<strong>运行阶段</strong>如何保障系统的稳定运行，常用的手段：<strong>限流</strong>，<strong>降级</strong>，<strong>拒绝服务</strong>。</p><p>限流相对降级是一种更极端的保存措施，限流就是当<strong>系统容量达到瓶颈时</strong>，需要通过限制一部分流量来保护系统，并做到既可人工执行开关，也支持自动化保护的措施。</p><p>限流既可在<strong>客户端限流</strong>，也可在<strong>服务端限流</strong>。限流的实现方式既要支持<strong><code>URL</code></strong>以及<strong>方法级别</strong>的限流，也要支持基于 <strong><code>QPS</code></strong>和<strong>线程</strong>的限流。限流必然会导致一部分用户请求失败，因此在系统处理这种异常时<strong>一定要设置超时时间</strong>，防止因被限流的请求不能fast fail（快速失败）而拖垮系统。</p><h4 id="Nginx限流"><a href="#Nginx限流" class="headerlink" title="Nginx限流"></a>Nginx限流</h4><p>可使用<strong><code>ngx_http_limit_conn_module</code></strong>对于一些服务器<strong>流量异常</strong>、<strong>负载过大</strong>，甚至是<strong>大流量的恶意攻击访问</strong>等，进行<strong>并发数的限制</strong>；该模块可<strong>根据定义的键来限制每个键值的连接数</strong>，只有那些正在被处理的请求，这些请求的头信息已被完全读入，所在的连接才会被计数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 限制连接数，客户端的IP地址作为键，</span><br><span class="line"># binary_remote_addr变量长度是固定4字节，在32位平台中占用32字节或64字节，在64位平台中占用64字节</span><br><span class="line"># 1M共享空间可以保存3.2万个32位的状态，1.6万个64位的状态</span><br><span class="line"># 若共享内存空间被耗尽，服务器将会对后续所有的请求返回503即Service Temporarily Unavailable错误</span><br><span class="line">limit_conn_zone $binary_remote_addr zone=addr:10m;</span><br><span class="line">server &#123;</span><br><span class="line">    location /download/ &#123;</span><br><span class="line">        # 指定每个给定键值的最大同时连接数，同一IP同一时间只允许有1个连接</span><br><span class="line">        limit_conn addr 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 缺点：前端做LVS或反向代理，会出现大量的503错误，需要设置白名单对某些ip不做限制</span><br></pre></td></tr></table></figure><p>通过<strong><code>ngx_http_limit_req_module</code></strong>模块可<strong>通过定义的键值来限制请求处理的频率</strong>。特别的可限制来自单个IP地址的请求处理频率。限制的方法如同漏斗，每秒固定处理请求数，推迟过多请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    # 区域名称为one，大小为10m，平均处理的请求频率不能超过每秒一次。键值是客户端IP</span><br><span class="line">    limit_req_zone $binary_remote_addr zone=one:10m rate=1r/s;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location /search/ &#123;</span><br><span class="line">            # 允许超出频率限制的请求数为5，默认会被延迟处理，如果不希望延迟处理，可以使用nodelay参数</span><br><span class="line">            limit_req zone=one burst=5 nodelay;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/openresty/lua-resty-limit-traffic" rel="external nofollow noopener noreferrer" target="_blank">OpenResty</a>利用Lua限流</p><h4 id="网关接入Sentinel控制台"><a href="#网关接入Sentinel控制台" class="headerlink" title="网关接入Sentinel控制台"></a>网关接入Sentinel控制台</h4><h5 id="Route维度限流"><a href="#Route维度限流" class="headerlink" title="Route维度限流"></a>Route维度限流</h5><h5 id="API维度限流"><a href="#API维度限流" class="headerlink" title="API维度限流"></a>API维度限流</h5><h5 id="应用层限流"><a href="#应用层限流" class="headerlink" title="应用层限流"></a>应用层限流</h5><p>系统第一次上线启动，或系统在Redis故障情况下重新启动，这时在高并发的场景下就会出现所有的流量都打到数据库上，导致数据库崩溃。因此需要通过缓存预热的方案，提前给Redis灌入部分数据后再提供服务。</p><p><img src="../../../../images/Cloud/秒杀/Sentinel流控关联规则配置.png" alt></p><p>可在<strong>流控规则中配置关联模式</strong>，将数据库资源加入限流资源中，<strong>当对数据库访问达到阈值，可对商品详情请求限流</strong>。</p><p><img src="../../../../images/Cloud/秒杀/服务降级总结.png" alt="服务降级总结"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;秒杀业务特性&quot;&gt;&lt;a href=&quot;#秒杀业务特性&quot; class=&quot;headerlink&quot; title=&quot;秒杀业务特性&quot;&gt;&lt;/a&gt;秒杀业务特性&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;秒杀具有瞬时高并发的特点&lt;/strong&gt;，秒杀请求在时间上高度集中于某一特定的时间点（秒杀
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>基础算法</title>
    <link href="https://yaoyinglong.github.io/Blog/%E7%AE%97%E6%B3%95/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    <id>https://yaoyinglong.github.io/Blog/算法/基础算法/</id>
    <published>2021-12-31T16:00:00.000Z</published>
    <updated>2022-01-02T14:11:49.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="斐波那契"><a href="#斐波那契" class="headerlink" title="斐波那契"></a>斐波那契</h3><p>递归优化：</p><ul><li><strong>使用非递归</strong>：所有递归代码理论上一定可转换成非递归</li><li><strong>加入缓存</strong>：把<strong>中间运算结果保存起来</strong>，这样就可把递归降至为<strong><code>o(n)</code></strong></li><li><strong>尾递归</strong>：<strong>调用函数一定出现在末尾</strong>，没有任何其他操作，编译器在编译代码时，若发现函数末尾已经没有操作了，这时候就不会创建新的栈，且覆盖到前面去。倒着算，每次会把中间结果带下去，不需要再回溯</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fab</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 时间复杂度和空间复杂度都是：O(2^n)</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 递归的终止条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fab(n - <span class="number">1</span>) + fab(n - <span class="number">2</span>); <span class="comment">// 继续递归的过程</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">noFab</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 不用递归 O(n)</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123; <span class="comment">// 循环</span></span><br><span class="line">        c = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fab2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 用数组来做缓存，时间复杂度降为O(n)，空间也降至为O(n)</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 递归的终止条件</span></span><br><span class="line">    <span class="keyword">if</span> (data[n] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> data[n];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = fab2(n - <span class="number">1</span>) + fab2(n - <span class="number">2</span>); <span class="comment">// 继续递归的过程</span></span><br><span class="line">    data[n] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * n    - 是肯定有的</span></span><br><span class="line"><span class="comment"> * res  - 上一次运算出来结果</span></span><br><span class="line"><span class="comment"> * pre  - 上上一次运算出来的结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tailfab</span><span class="params">(<span class="keyword">int</span> pre, <span class="keyword">int</span> res, <span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 时间复杂度和空间复杂度都是：O(n)</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res; <span class="comment">// 递归的终止条件</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tailfab(res, pre + res, n - <span class="number">1</span>); <span class="comment">// JDK源码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fac</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="comment">// 求N的阶乘 用普通递归怎么写 5=5*4*3*2*1=&gt; f(n) =</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * fac(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">tailFac</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> res)</span> </span>&#123; <span class="comment">// 尾递归 传结果，res就是我们每次保存的结果</span></span><br><span class="line">    System.out.println(n + <span class="string">":"</span> + res);      <span class="comment">// 这个地方打印出来的值是怎么样的？</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tailFac(n - <span class="number">1</span>, n * res);         <span class="comment">//倒着算</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><h5 id="Hash应用"><a href="#Hash应用" class="headerlink" title="Hash应用"></a>Hash应用</h5><p><strong>加密</strong>如MD5哈希算法、<strong>判断数据重复</strong>MD5、<strong>相似性检测</strong>如论文检测、指纹算法，把每个论文计算出一个指纹，使用汉明距离，<strong>负载均衡策略</strong>如Nginx可根据ip计算hash值，<strong>分布式系统数据分库分表问题</strong>。<strong>一致性Hash</strong>即<strong>哈希环</strong>。</p><h5 id="开放寻址"><a href="#开放寻址" class="headerlink" title="开放寻址"></a>开放寻址</h5><p>开放寻址法核心思想是，若<strong>出现散列冲突就重新探测一个空闲位置</strong>将其插入，当往散列表中插入数据时，若某个数据经过散列函数散列之后，存储位置已经被占用了，就从当前位置开始，依次往后查找，看是否有空闲位置，直到找到为止。</p><p><strong>缺点</strong>：<strong>删除需要特殊处理</strong>，若插入数据过多会导致散列表<strong>很多冲突查找可能会退化成遍历</strong></p><h5 id="链路地址"><a href="#链路地址" class="headerlink" title="链路地址"></a>链路地址</h5><p>使用链表，链表法是一种更加常用的散列冲突解决办法，相比开放寻址法，它要简单很多，在散列表中，每个key会对应一条链表，所有散列值相同的元素都放到相同槽位对应的链表中。</p><h5 id="常用hash算法"><a href="#常用hash算法" class="headerlink" title="常用hash算法"></a>常用hash算法</h5><p>以下三个Hash散列算法，可将算出的Hash值比较均匀分布到不同的段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_1</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">        hash = <span class="number">33</span> * hash + key.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_2</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">    <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">        hash = (hash ^ key.charAt(i)) * p;</span><br><span class="line">    &#125;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">    hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_3</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash, i;</span><br><span class="line">    <span class="keyword">for</span> (hash = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">        hash += key.charAt(i);</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">10</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    hash ^= hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">    hash += hash &lt;&lt; <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BitMap</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bits;        <span class="comment">// 若为byte那就一个只能存8个数</span></span><br><span class="line">    <span class="keyword">int</span> max;            <span class="comment">// 表示最大的那个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BitMap</span><span class="params">(<span class="keyword">int</span> max)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.max = max;</span><br><span class="line">        bits = <span class="keyword">new</span> <span class="keyword">byte</span>[(max &gt;&gt; <span class="number">3</span>) + <span class="number">1</span>];        <span class="comment">//max/8 + 1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;    <span class="comment">// 往bitmap里面添加数字</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; max) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bitsIndex = n &gt;&gt; <span class="number">3</span>; <span class="comment">// 除以8就可知道byte数组下标</span></span><br><span class="line">        <span class="keyword">int</span> loc = n &amp; <span class="number">7</span>;        <span class="comment">// 用&amp;运算，获取bit位</span></span><br><span class="line">        bits[bitsIndex] |= <span class="number">1</span> &lt;&lt; loc; <span class="comment">// 把bit数组中bisIndex下标的byte里面第loc个bit位置为1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; max) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> bitsIndex = n &gt;&gt; <span class="number">3</span>; <span class="comment">// 除以8就可知道byte数组下标</span></span><br><span class="line">        <span class="keyword">int</span> loc = n &amp; <span class="number">7</span>;        <span class="comment">// 这里其实还可以用&amp;运算</span></span><br><span class="line">        <span class="keyword">int</span> flag = bits[bitsIndex] &amp; <span class="number">1</span> &lt;&lt; loc; <span class="comment">// 若原来那个位置是0 那肯定就是0 只有那个位置是1 才行</span></span><br><span class="line">        <span class="keyword">return</span> flag != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; max) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> index = n &gt;&gt; <span class="number">3</span>;     <span class="comment">// 除以8就可知道byte数组下标</span></span><br><span class="line">        <span class="keyword">int</span> loc = n &amp; <span class="number">7</span>;        <span class="comment">// 这里其实还可以用&amp;运算</span></span><br><span class="line">        bits[index] &amp;= ~(<span class="number">1</span> &lt;&lt; loc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BitMap bitMap = <span class="keyword">new</span> BitMap(<span class="number">200000001</span>); <span class="comment">// 10亿</span></span><br><span class="line">        bitMap.add(<span class="number">2</span>);</span><br><span class="line">        bitMap.add(<span class="number">3</span>);</span><br><span class="line">        bitMap.add(<span class="number">4</span>);</span><br><span class="line">        bitMap.add(<span class="number">63</span>);</span><br><span class="line">        bitMap.add(<span class="number">65</span>);</span><br><span class="line">        System.out.println(bitMap.find(<span class="number">3</span>));</span><br><span class="line">        System.out.println(bitMap.find(<span class="number">64</span>));</span><br><span class="line">        bitMap.delete(<span class="number">3</span>);</span><br><span class="line">        System.out.println(bitMap.find(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BloomFilter"><a href="#BloomFilter" class="headerlink" title="BloomFilter"></a>BloomFilter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    BitSet bits; <span class="comment">// bit数组,bitMap long /64 %34</span></span><br><span class="line">    <span class="comment">// 00000000000000000000000000000000000000000000000000000000000000000000000011111111111111111111111</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BloomFilter</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        bits = <span class="keyword">new</span> BitSet(size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String key)</span> </span>&#123;    <span class="comment">// O(1)</span></span><br><span class="line">        <span class="keyword">int</span> hash1 = hash_1(key);</span><br><span class="line">        <span class="keyword">int</span> hash2 = hash_2(key);</span><br><span class="line">        <span class="keyword">int</span> hash3 = hash_3(key);</span><br><span class="line"></span><br><span class="line">        bits.set(hash1, <span class="keyword">true</span>);</span><br><span class="line">        bits.set(hash2, <span class="keyword">true</span>);</span><br><span class="line">        bits.set(hash3, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">find</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash1 = hash_1(key);</span><br><span class="line">        <span class="keyword">if</span> (!bits.get(hash1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hash2 = hash_2(key);</span><br><span class="line">        <span class="keyword">if</span> (!bits.get(hash2)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> hash3 = hash_3(key);</span><br><span class="line">        <span class="keyword">if</span> (!bits.get(hash3)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_1</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">            hash = <span class="number">33</span> * hash + key.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_2</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> p = <span class="number">16777619</span>;</span><br><span class="line">        <span class="keyword">int</span> hash = (<span class="keyword">int</span>) <span class="number">2166136261L</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; key.length(); i++) &#123;</span><br><span class="line">            hash = (hash ^ key.charAt(i)) * p;</span><br><span class="line">        &#125;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">13</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">7</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">17</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hash_3</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> hash, i;</span><br><span class="line">        <span class="keyword">for</span> (hash = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; key.length(); ++i) &#123;</span><br><span class="line">            hash += key.charAt(i);</span><br><span class="line">            hash += hash &lt;&lt; <span class="number">10</span>;</span><br><span class="line">            hash ^= hash &gt;&gt; <span class="number">6</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">        hash ^= hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">        hash += hash &lt;&lt; <span class="number">15</span>;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(hash) % size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String... args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// O(1000000000) 8bit= 1byte</span></span><br><span class="line">        BloomFilter bloomFilter = <span class="keyword">new</span> BloomFilter(Integer.MAX_VALUE); <span class="comment">// 21亿</span></span><br><span class="line">        System.out.println(bloomFilter.hash_1(<span class="string">"1"</span>));</span><br><span class="line">        System.out.println(bloomFilter.hash_2(<span class="string">"1"</span>));</span><br><span class="line">        System.out.println(bloomFilter.hash_3(<span class="string">"1"</span>));</span><br><span class="line">        bloomFilter.add(<span class="string">"1111"</span>);</span><br><span class="line">        bloomFilter.add(<span class="string">"1123"</span>);</span><br><span class="line">        bloomFilter.add(<span class="string">"11323"</span>);</span><br><span class="line">        System.out.println(bloomFilter.find(<span class="string">"1"</span>));</span><br><span class="line">        System.out.println(bloomFilter.find(<span class="string">"1123"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;斐波那契&quot;&gt;&lt;a href=&quot;#斐波那契&quot; class=&quot;headerlink&quot; title=&quot;斐波那契&quot;&gt;&lt;/a&gt;斐波那契&lt;/h3&gt;&lt;p&gt;递归优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;使用非递归&lt;/strong&gt;：所有递归代码理论上一定可转换成非递归&lt;/
      
    
    </summary>
    
      <category term="算法" scheme="https://yaoyinglong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://yaoyinglong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>PriorityQueue源码</title>
    <link href="https://yaoyinglong.github.io/Blog/Java/%E5%9F%BA%E7%A1%80/PriorityQueue%E6%BA%90%E7%A0%81/"/>
    <id>https://yaoyinglong.github.io/Blog/Java/基础/PriorityQueue源码/</id>
    <published>2021-12-30T16:00:00.000Z</published>
    <updated>2022-01-02T11:19:54.346Z</updated>
    
    <content type="html"><![CDATA[<p>对于<strong><code>PriorityQueue</code>优先队列</strong>最核心的就是其添加元素删除元素后维持元素的顺序的逻辑，其实用的算法其实就是<strong>堆排序</strong>。<strong>堆</strong>其实是一种<strong>特殊的树</strong>，<strong><code>堆</code></strong>是一颗<strong>完全二叉树</strong>，且堆树又分为<strong>大顶堆</strong>和<strong>小顶堆</strong>。</p><p><strong>数组</strong>是<strong>完全二叉树最佳存储结构</strong>，因为完全二叉树有特殊的属性，可<strong>直接利用数组下标</strong>表示<strong>左右节点</strong>，<strong>数组下标为<code>K</code></strong>的元素对应的<strong>完全二叉树中左右子节点在数组中的位置</strong>分别为<strong><code>2*K + 1</code></strong>、<strong><code>2*K+2</code></strong>。</p><p>不论大顶堆还是小顶堆，都是从完全二叉数中<strong>最后一个元素的父节点开始堆化</strong>，将最大或最小的元素排到堆顶，然后遍历整棵树，每一次将堆顶的元素，和<strong>未排序</strong>的<strong>最后一个元素交换</strong>，再进行一次堆化，这样就将数据排好序了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSortAsc</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="comment">// len / 2 - 1表示的是从完全二叉数中最后一个元素的父节点开始堆化</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = len / <span class="number">2</span> - <span class="number">1</span>; start &gt;= <span class="number">0</span>; start--) &#123;</span><br><span class="line">            maxHeapDown(arr, start, len);  <span class="comment">// 将树中最大的元素排到堆顶</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上面的循环只是将最大的元素排到了堆顶，但是整棵树即数组中的元素不是有序的</span></span><br><span class="line">        <span class="comment">// 每一次将对顶的元素即最大的元素，和未排序的最后一个元素交换，再进行一次堆化，这样就将数据从小到大排序了</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = len - <span class="number">1</span>; index &gt; <span class="number">0</span>; index--) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[index];</span><br><span class="line">            arr[index] = temp;</span><br><span class="line">            maxHeapDown(arr, <span class="number">0</span>, index); <span class="comment">// len~i已经排好序了</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将完全二叉树中最大的元素放到堆顶，end表示最多建到的点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">maxHeapDown</span><span class="params">(Integer[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> parent = start;</span><br><span class="line">        <span class="keyword">int</span> left = parent * <span class="number">2</span> + <span class="number">1</span>; <span class="comment">// 找到当前节点的左子节点位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> max = left; <span class="comment">// max表示左右节点大的那一个在数组中的位置</span></span><br><span class="line">            <span class="keyword">if</span> (left + <span class="number">1</span> &lt; end &amp;&amp; arr[left] &lt; arr[left + <span class="number">1</span>]) &#123; <span class="comment">// 比较左右节点和父节点的大小</span></span><br><span class="line">                max = left + <span class="number">1</span>; <span class="comment">// 若右节点比左节点大，则将父节点和右节点交换</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若左节点比右节点大，则将父节点和左节点交换</span></span><br><span class="line">            <span class="keyword">if</span> (arr[parent] &gt; arr[max]) &#123; <span class="comment">// 若父节点大于子节点中最大的那一个，则退出</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若父节点小于子节点中最大的那一个，则交换</span></span><br><span class="line">                <span class="keyword">int</span> tmp = arr[parent];</span><br><span class="line">                arr[parent] = arr[max];</span><br><span class="line">                arr[max] = tmp;</span><br><span class="line">                parent = max;   <span class="comment">// 还原指针，交换数据后，max指向的是被交换下来的父节点，还需要往下遍历，故需要将parent指向需要遍历的数据</span></span><br><span class="line">                left = parent * <span class="number">2</span> + <span class="number">1</span>;  <span class="comment">// 找到之前左右节点大的节点的左子节点在数组中的索引位置</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heapSortDesc</span><span class="params">(Integer[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = arr.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = len / <span class="number">2</span> - <span class="number">1</span>; start &gt;= <span class="number">0</span>; start--) &#123;</span><br><span class="line">            minHeapDown(arr, start, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = len - <span class="number">1</span>; index &gt; <span class="number">0</span>; index--) &#123;</span><br><span class="line">            <span class="keyword">int</span> tmp = arr[<span class="number">0</span>];</span><br><span class="line">            arr[<span class="number">0</span>] = arr[index];</span><br><span class="line">            arr[index] = tmp;</span><br><span class="line">            minHeapDown(arr, <span class="number">0</span>, index);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将完全二叉树中最小的元素放到堆顶，end表示最多建到的点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">minHeapDown</span><span class="params">(Integer[] arr, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> parent = start;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">2</span> * start + <span class="number">1</span>; <span class="comment">// 找到当前节点的左子节点位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; end) &#123;</span><br><span class="line">            <span class="keyword">int</span> min = left; <span class="comment">// min表示左右节点小的那一个在数组中的位置</span></span><br><span class="line">            <span class="keyword">if</span> (left + <span class="number">1</span> &lt; end &amp;&amp; arr[left] &gt; arr[left + <span class="number">1</span>]) &#123;</span><br><span class="line">                min = left + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (arr[min] &gt; arr[parent]) &#123;  <span class="comment">// 比较左右节点中小的那一个和父节点的大小</span></span><br><span class="line">                <span class="keyword">break</span>;  <span class="comment">// 若小的那个节点都比父节点大，说明不需要再遍历了</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> tmp = arr[min];</span><br><span class="line">            arr[min] = arr[parent];</span><br><span class="line">            arr[parent] = tmp;</span><br><span class="line">            parent = min;   <span class="comment">// 还原指针，交换数据后，min指向的是被交换下来的父节点，还需要往下遍历，故需要将parent指向需要遍历的数据</span></span><br><span class="line">            left = <span class="number">2</span> * parent + <span class="number">1</span>;  <span class="comment">// 找到之前左右节点小的节点的左子节点在数组中的索引位置</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertSortTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">74</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">29</span>&#125;;</span><br><span class="line">            heapSortAsc(arr);</span><br><span class="line">            System.err.println(<span class="string">" after:"</span> + Arrays.asList(arr));</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">            Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">8</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">74</span>, <span class="number">25</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">28</span>, <span class="number">35</span>, <span class="number">0</span>, <span class="number">22</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">29</span>&#125;;</span><br><span class="line">            heapSortDesc(arr);</span><br><span class="line">            System.err.println(<span class="string">" after:"</span> + Arrays.asList(arr));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若传入的集合是一个<strong>排序好的集合</strong>，则直接将数据拷贝到<strong><code>PriorityQueue</code></strong>的内部数组<strong><code>queue</code></strong>中，若传入结合本身就是一个<strong><code>PriorityQueue</code></strong>，则直接赋值<strong><code>queue</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PriorityQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">transient</span> Object[] queue;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Comparator&lt;? <span class="keyword">super</span> E&gt; comparator;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PriorityQueue</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c <span class="keyword">instanceof</span> SortedSet&lt;?&gt;) &#123;</span><br><span class="line">            SortedSet&lt;? extends E&gt; ss = (SortedSet&lt;? extends E&gt;) c;</span><br><span class="line">            <span class="keyword">this</span>.comparator = (Comparator&lt;? <span class="keyword">super</span> E&gt;) ss.comparator();</span><br><span class="line">            initElementsFromCollection(ss); <span class="comment">// 直接将数据拷贝到queue中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c <span class="keyword">instanceof</span> PriorityQueue&lt;?&gt;) &#123;</span><br><span class="line">            PriorityQueue&lt;? extends E&gt; pq = (PriorityQueue&lt;? extends E&gt;) c;</span><br><span class="line">            <span class="keyword">this</span>.comparator = (Comparator&lt;? <span class="keyword">super</span> E&gt;) pq.comparator();</span><br><span class="line">            initFromPriorityQueue(pq);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.comparator = <span class="keyword">null</span>;</span><br><span class="line">            initFromCollection(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initElementsFromCollection</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        Object[] a = c.toArray();</span><br><span class="line">        <span class="comment">// If c.toArray incorrectly doesn't return Object[], copy it.</span></span><br><span class="line">        <span class="keyword">if</span> (a.getClass() != Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">            <span class="title">a</span> </span>= Arrays.copyOf(a, a.length, Object[]<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> len = a.length;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">1</span> || <span class="keyword">this</span>.comparator != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                <span class="keyword">if</span> (a[i] == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.queue = a;</span><br><span class="line">        <span class="keyword">this</span>.size = a.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFromPriorityQueue</span><span class="params">(PriorityQueue&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (c.getClass() == PriorityQueue<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.queue = c.toArray();</span><br><span class="line">            <span class="keyword">this</span>.size = c.size();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            initFromCollection(c);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>堆化的关键代码，和上面的堆排序的例子一样，这里是使用的<strong>小顶堆</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFromCollection</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    initElementsFromCollection(c);</span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">heapify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 从完全二叉数中最后一个元素的父节点开始堆化，之所以右移再减一，是因为数组下标是从0开始的</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) </span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)<span class="comment">// 若传入的comparator不为空则使用传入的</span></span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123; <span class="comment">// 传入的K必须要小于堆元素个数的一半，因为堆化最多就循环half次</span></span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 找到K节点的左子节点</span></span><br><span class="line">        Object c = queue[child];<span class="comment">// 获取K节点的左子节点值</span></span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;<span class="comment">// 找到K节点的右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right]; <span class="comment">// 若K的左子节点值小于右子节点值，则将C置为右子节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)<span class="comment">// 将目标对象X与K的左右子节点中最小的比较</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 若目标对象X比K的左右子节点最小的值还小，则不用交换直接退出</span></span><br><span class="line">        queue[k] = c; <span class="comment">// 若X比K的左右子节点最小的值还大，则将K对应的值与子节点中最小的值交换</span></span><br><span class="line">        k = child; <span class="comment">// 将K指针恢复，因为上一步做了交换，K指向的交换后的c</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x; <span class="comment">// 将目标值赋值给K</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownComparable</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    Comparable&lt;? <span class="keyword">super</span> E&gt; key = (Comparable&lt;? <span class="keyword">super</span> E&gt;)x;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;        <span class="comment">// loop while a non-leaf</span></span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123; <span class="comment">// 传入的K必须要小于堆元素个数的一半，因为堆化最多就循环half次</span></span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 找到K节点的左子节点</span></span><br><span class="line">        Object c = queue[child];<span class="comment">// 获取K节点的左子节点值</span></span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;<span class="comment">// 找到K节点的右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; ((Comparable&lt;? <span class="keyword">super</span> E&gt;) c).compareTo((E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right]; <span class="comment">// 若K的左子节点值小于右子节点值，则将C置为右子节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (key.compareTo((E) c) &lt;= <span class="number">0</span>)<span class="comment">// 将目标对象X与K的左右子节点中最小的比较</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 若目标对象X比K的左右子节点最小的值还小，则不用交换直接退出</span></span><br><span class="line">        queue[k] = c;<span class="comment">// 若X比K的左右子节点最小的值还大，则将K对应的值与子节点中最小的值交换</span></span><br><span class="line">        k = child;<span class="comment">// 将K指针恢复，因为上一步做了交换，K指向的交换后的c</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = key;<span class="comment">// 将目标值赋值给K</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加元素</strong>，若元素个数已经大于等于数组长度了，则进行扩容，若旧的容量小于64，则每次扩容为旧容量的<strong>一倍加<code>2</code></strong>，否则扩容<strong>旧容量的一半</strong>。然后<strong><code>siftUp</code></strong>进行<strong>小顶堆插入</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> offer(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> i = size;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= queue.length)</span><br><span class="line">        grow(i + <span class="number">1</span>);</span><br><span class="line">    size = i + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        queue[<span class="number">0</span>] = e;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUp(i, e);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = queue.length;</span><br><span class="line">    <span class="comment">// Double size if small; else grow by 50%</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + ((oldCapacity &lt; <span class="number">64</span>) ? (oldCapacity + <span class="number">2</span>) : (oldCapacity &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="comment">// overflow-conscious code</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    queue = Arrays.copyOf(queue, newCapacity);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">    <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUp</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftUpUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftUpComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftUpUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;<span class="comment">// 将插入值从堆尾，的父节点一直比较，直到找到其该放置的位置，退出</span></span><br><span class="line">        <span class="keyword">int</span> parent = (k - <span class="number">1</span>) &gt;&gt;&gt; <span class="number">1</span>;<span class="comment">// 找到K的父节点</span></span><br><span class="line">        Object e = queue[parent];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) e) &gt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">// 若父节点值小于目标节点直接退出循环，将目标值直接复制给K</span></span><br><span class="line">        queue[k] = e;<span class="comment">// 若父节点值大于目标节点，则交换父子节点的额值</span></span><br><span class="line">        k = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除元素，若队列中无元素则直接返回null，然后获取第0个元素和最后一个元素，然后删除最后一个元素，这里其实就是<strong>删除第<code>0</code>个元素</strong>，然后<strong>将最后一个元素与第<code>0</code>个元素交换</strong>，然后再<strong>进行一次堆化</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) <span class="comment">// 若队列元素为null直接返回null</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> s = --size;</span><br><span class="line">    modCount++;</span><br><span class="line">    E result = (E) queue[<span class="number">0</span>]; <span class="comment">// 获取第0个元素</span></span><br><span class="line">    E x = (E) queue[s]; <span class="comment">// 获取最后一个元素</span></span><br><span class="line">    queue[s] = <span class="keyword">null</span>;<span class="comment">// 将最后一个元素置空</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="number">0</span>)</span><br><span class="line">        siftDown(<span class="number">0</span>, x);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDown</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="keyword">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">siftDownUsingComparator</span><span class="params">(<span class="keyword">int</span> k, E x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> half = size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123; <span class="comment">// 传入的K必须要小于堆元素个数的一半，因为堆化最多就循环half次</span></span><br><span class="line">        <span class="keyword">int</span> child = (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>; <span class="comment">// 找到K节点的左子节点</span></span><br><span class="line">        Object c = queue[child];<span class="comment">// 获取K节点的左子节点值</span></span><br><span class="line">        <span class="keyword">int</span> right = child + <span class="number">1</span>;<span class="comment">// 找到K节点的右子节点</span></span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp; comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right]; <span class="comment">// 若K的左子节点值小于右子节点值，则将C置为右子节点的值</span></span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)<span class="comment">// 将目标对象X与K的左右子节点中最小的比较</span></span><br><span class="line">            <span class="keyword">break</span>; <span class="comment">// 若目标对象X比K的左右子节点最小的值还小，则不用交换直接退出</span></span><br><span class="line">        queue[k] = c; <span class="comment">// 若X比K的左右子节点最小的值还大，则将K对应的值与子节点中最小的值交换</span></span><br><span class="line">        k = child; <span class="comment">// 将K指针恢复，因为上一步做了交换，K指向的交换后的c</span></span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x; <span class="comment">// 将目标值赋值给K</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于&lt;strong&gt;&lt;code&gt;PriorityQueue&lt;/code&gt;优先队列&lt;/strong&gt;最核心的就是其添加元素删除元素后维持元素的顺序的逻辑，其实用的算法其实就是&lt;strong&gt;堆排序&lt;/strong&gt;。&lt;strong&gt;堆&lt;/strong&gt;其实是一种&lt;strong
      
    
    </summary>
    
      <category term="Java" scheme="https://yaoyinglong.github.io/categories/Java/"/>
    
      <category term="基础" scheme="https://yaoyinglong.github.io/categories/Java/%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="PriorityQueue" scheme="https://yaoyinglong.github.io/tags/PriorityQueue/"/>
    
  </entry>
  
  <entry>
    <title>布隆过滤器</title>
    <link href="https://yaoyinglong.github.io/Blog/Java/%E5%B7%A5%E5%85%B7/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://yaoyinglong.github.io/Blog/Java/工具/布隆过滤器/</id>
    <published>2021-12-30T16:00:00.000Z</published>
    <updated>2022-01-02T14:45:04.116Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="hide" scheme="https://yaoyinglong.github.io/categories/hide/"/>
    
    
      <category term="BitMap" scheme="https://yaoyinglong.github.io/tags/BitMap/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch实战</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch%E5%AE%9E%E6%88%98/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch实战/</id>
    <published>2021-12-26T16:00:00.000Z</published>
    <updated>2021-12-27T11:45:52.071Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用Java API来操作ES集群初始化连接，基于<strong><code>RestClient.builder</code></strong>方法来构建<strong><code>RestClientBuilder</code></strong>，使用<strong><code>RestHighLevelClient</code></strong>去连接ES集群，用<strong><code>HttpHost</code></strong>来添加ES的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 建立与ES的连接</span></span><br><span class="line"><span class="comment">// 1. 使用RestHighLevelClient构建客户端连接。</span></span><br><span class="line"><span class="comment">// 2. 基于RestClient.builder方法来构建RestClientBuilder</span></span><br><span class="line"><span class="comment">// 3. 用HttpHost来添加ES的节点</span></span><br><span class="line">RestClientBuilder restClientBuilder = RestClient.builder(</span><br><span class="line">    <span class="keyword">new</span> HttpHost(<span class="string">"192.168.21.130"</span>, <span class="number">9200</span>, <span class="string">"http"</span>)</span><br><span class="line">    , <span class="keyword">new</span> HttpHost(<span class="string">"192.168.21.131"</span>, <span class="number">9200</span>, <span class="string">"http"</span>)</span><br><span class="line">    , <span class="keyword">new</span> HttpHost(<span class="string">"192.168.21.132"</span>, <span class="number">9200</span>, <span class="string">"http"</span>));</span><br><span class="line">RestHighLevelClient restHighLevelClient = <span class="keyword">new</span> RestHighLevelClient(restClientBuilder);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(JobDetail jobDetail)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 构建IndexRequest对象，用来描述ES发起请求的数据</span></span><br><span class="line">    IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(JOB_IDX);</span><br><span class="line">    <span class="comment">// 设置文档ID</span></span><br><span class="line">    indexRequest.id(String.valueOf(jobDetail.getId()));</span><br><span class="line">    <span class="comment">// 使用FastJSON将实体类对象转换为JSON</span></span><br><span class="line">    String json = JSONObject.toJSONString(jobDetail);</span><br><span class="line">    <span class="comment">// 使用IndexRequest.source方法设置文档数据，并设置请求的数据为JSON格式</span></span><br><span class="line">    indexRequest.source(json, XContentType.JSON);</span><br><span class="line">    <span class="comment">// 使用ES RestHighLevelClient调用index方法发起请求，将一个文档添加到索引中</span></span><br><span class="line">    restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> JobDetail <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(JOB_IDX, id + <span class="string">""</span>); <span class="comment">// 构建GetRequest请求</span></span><br><span class="line">    <span class="comment">// 使用RestHighLevelClient.get发送GetRequest请求，并获取到ES服务器的响应。</span></span><br><span class="line">    GetResponse getResponse = restHighLevelClient.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    String json = getResponse.getSourceAsString();<span class="comment">// 将ES响应的数据转换为JSON字符串</span></span><br><span class="line">    <span class="comment">// 并使用FastJSON将JSON字符串转换为JobDetail类对象</span></span><br><span class="line">    JobDetail jobDetail = JSONObject.parseObject(json, JobDetail<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    jobDetail.setId(id);<span class="comment">// 单独设置ID</span></span><br><span class="line">    <span class="keyword">return</span> jobDetail;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(JobDetail jobDetail)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 判断对应ID的文档是否存在，构建GetRequest</span></span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(JOB_IDX, jobDetail.getId() + <span class="string">""</span>);</span><br><span class="line">    <span class="comment">// 执行client的exists方法，发起请求，判断是否存在</span></span><br><span class="line">    <span class="keyword">boolean</span> exists = restHighLevelClient.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="keyword">if</span>(exists) &#123;</span><br><span class="line">        <span class="comment">// 构建UpdateRequest请求</span></span><br><span class="line">        UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(JOB_IDX, jobDetail.getId() + <span class="string">""</span>);</span><br><span class="line">        <span class="comment">// 设置UpdateRequest的文档，并配置为JSON格式</span></span><br><span class="line">        updateRequest.doc(JSONObject.toJSONString(jobDetail), XContentType.JSON);</span><br><span class="line">        <span class="comment">// 执行client发起update请求</span></span><br><span class="line">        restHighLevelClient.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">(<span class="keyword">long</span> id)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(JOB_IDX, id + <span class="string">""</span>);<span class="comment">// 构建delete请求</span></span><br><span class="line">    restHighLevelClient.delete(deleteRequest, RequestOptions.DEFAULT);<span class="comment">// 使用RestHighLevelClient执行delete请求</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;JobDetail&gt; <span class="title">searchByKeywords</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 构建SearchRequest检索请求 专门用来进行全文检索、关键字检索的API</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(JOB_IDX);</span><br><span class="line">    <span class="comment">// 创建一个SearchSourceBuilder专门用于构建查询条件</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 使用QueryBuilders.multiMatchQuery构建一个查询条件（搜索title、jd），并配置到SearchSourceBuilder</span></span><br><span class="line">    MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(keywords, <span class="string">"title"</span>, <span class="string">"jd"</span>);</span><br><span class="line">    searchSourceBuilder.query(multiMatchQueryBuilder);<span class="comment">// 将查询条件设置到查询请求构建器中</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);<span class="comment">// 调用SearchRequest.source将查询条件设置到检索请求</span></span><br><span class="line">    <span class="comment">// 执行RestHighLevelClient.search发起请求</span></span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    SearchHit[] hitArray = searchResponse.getHits().getHits();</span><br><span class="line">    ArrayList&lt;JobDetail&gt; jobDetailArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : hitArray) &#123;<span class="comment">// 遍历结果</span></span><br><span class="line">        String json = documentFields.getSourceAsString();<span class="comment">// 获取命中的结果</span></span><br><span class="line">        JobDetail jobDetail = JSONObject.parseObject(json, JobDetail<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 将JSON字符串转换为对象</span></span><br><span class="line">        jobDetail.setId(Long.parseLong(documentFields.getId()));<span class="comment">// 使用SearchHit.getId设置文档ID</span></span><br><span class="line">        jobDetailArrayList.add(jobDetail);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jobDetailArrayList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">searchByPage</span><span class="params">(String keywords, <span class="keyword">int</span> pageNum, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 构建SearchRequest检索请求 专门用来进行全文检索、关键字检索的API</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(JOB_IDX);</span><br><span class="line">    <span class="comment">// 创建一个SearchSourceBuilder专门用于构建查询条件</span></span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 使用QueryBuilders.multiMatchQuery构建一个查询条件（搜索title、jd），并配置到SearchSourceBuilder</span></span><br><span class="line">    MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(keywords, <span class="string">"title"</span>, <span class="string">"jd"</span>);</span><br><span class="line">    searchSourceBuilder.query(multiMatchQueryBuilder); <span class="comment">// 将查询条件设置到查询请求构建器中</span></span><br><span class="line">    searchSourceBuilder.size(pageSize);<span class="comment">// 每页显示多少条</span></span><br><span class="line">    searchSourceBuilder.from((pageNum - <span class="number">1</span>) * pageSize);<span class="comment">// 设置从第几条开始查询</span></span><br><span class="line">    searchRequest.source(searchSourceBuilder);<span class="comment">// 调用SearchRequest.source将查询条件设置到检索请求</span></span><br><span class="line">    <span class="comment">// 执行RestHighLevelClient.search发起请求</span></span><br><span class="line">    SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    SearchHit[] hitArray = searchResponse.getHits().getHits();</span><br><span class="line">    ArrayList&lt;JobDetail&gt; jobDetailArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : hitArray) &#123;<span class="comment">// 遍历结果</span></span><br><span class="line">        String json = documentFields.getSourceAsString();<span class="comment">// 获取命中的结果</span></span><br><span class="line">        JobDetail jobDetail = JSONObject.parseObject(json, JobDetail<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">// 将JSON字符串转换为对象</span></span><br><span class="line">        jobDetail.setId(Long.parseLong(documentFields.getId()));<span class="comment">// 使用SearchHit.getId设置文档ID</span></span><br><span class="line">        jobDetailArrayList.add(jobDetail);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果封装到Map结构中（带有分页信息）</span></span><br><span class="line">    <span class="keyword">long</span> totalNum = searchResponse.getHits().getTotalHits().value;</span><br><span class="line">    Map&lt;String, Object&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    resultMap.put(<span class="string">"total"</span>, totalNum); <span class="comment">// total -&gt; 使用SearchHits.getTotalHits().value获取到所有的记录数</span></span><br><span class="line">    resultMap.put(<span class="string">"content"</span>, jobDetailArrayList); content -&gt; 当前分页中的数据</span><br><span class="line">    <span class="keyword">return</span> resultMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">searchByScrollPage</span><span class="params">(String keywords, String scrollId, <span class="keyword">int</span> pageSize)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    SearchResponse searchResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(scrollId == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 构建SearchRequest检索请求 专门用来进行全文检索、关键字检索的API</span></span><br><span class="line">        SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(JOB_IDX);</span><br><span class="line">        <span class="comment">// 创建一个SearchSourceBuilder专门用于构建查询条件</span></span><br><span class="line">        SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">        <span class="comment">// 使用QueryBuilders.multiMatchQuery构建一个查询条件（搜索title、jd），并配置到SearchSourceBuilder</span></span><br><span class="line">        MultiMatchQueryBuilder multiMatchQueryBuilder = QueryBuilders.multiMatchQuery(keywords, <span class="string">"title"</span>, <span class="string">"jd"</span>);</span><br><span class="line">        searchSourceBuilder.query(multiMatchQueryBuilder);<span class="comment">// 将查询条件设置到查询请求构建器中</span></span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder(); <span class="comment">// 设置高亮</span></span><br><span class="line">        highlightBuilder.field(<span class="string">"title"</span>);</span><br><span class="line">        highlightBuilder.field(<span class="string">"jd"</span>);</span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;font color='red'&gt;"</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">"&lt;/font&gt;"</span>);</span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder); <span class="comment">// 给请求设置高亮</span></span><br><span class="line">        searchSourceBuilder.size(pageSize); <span class="comment">// 每页显示多少条</span></span><br><span class="line">        searchRequest.source(searchSourceBuilder); <span class="comment">// 调用SearchRequest.source将查询条件设置到检索请求</span></span><br><span class="line">        searchRequest.scroll(TimeValue.timeValueMinutes(<span class="number">5</span>)); <span class="comment">// 设置scroll查询</span></span><br><span class="line">        <span class="comment">// 执行RestHighLevelClient.search发起请求</span></span><br><span class="line">        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 第二次查询的时候，直接通过scroll id查询数据</span></span><br><span class="line">        SearchScrollRequest searchScrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId);</span><br><span class="line">        searchScrollRequest.scroll(TimeValue.timeValueMinutes(<span class="number">5</span>));</span><br><span class="line">        <span class="comment">// 使用RestHighLevelClient发送scroll请求</span></span><br><span class="line">        searchResponse = restHighLevelClient.scroll(searchScrollRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125;</span><br><span class="line">    SearchHit[] hitArray = searchResponse.getHits().getHits();</span><br><span class="line">    ArrayList&lt;JobDetail&gt; jobDetailArrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit documentFields : hitArray) &#123; <span class="comment">// 遍历结果，迭代ES响应的数据</span></span><br><span class="line">        String json = documentFields.getSourceAsString(); <span class="comment">// 获取命中的结果</span></span><br><span class="line">        JobDetail jobDetail = JSONObject.parseObject(json, JobDetail<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 将JSON字符串转换为对象</span></span><br><span class="line">        jobDetail.setId(Long.parseLong(documentFields.getId())); <span class="comment">// 使用SearchHit.getId设置文档ID</span></span><br><span class="line">        jobDetailArrayList.add(jobDetail);</span><br><span class="line">        <span class="comment">// 设置高亮的一些文本到实体类中 封装了高亮</span></span><br><span class="line">        Map&lt;String, HighlightField&gt; highlightFieldMap = documentFields.getHighlightFields();</span><br><span class="line">        HighlightField titleHL = highlightFieldMap.get(<span class="string">"title"</span>);</span><br><span class="line">        HighlightField jdHL = highlightFieldMap.get(<span class="string">"jd"</span>);</span><br><span class="line">        <span class="keyword">if</span>(titleHL != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = titleHL.getFragments(); <span class="comment">// 获取指定字段的高亮片段</span></span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(Text text : fragments) &#123; <span class="comment">// 将这些高亮片段拼接成一个完整的高亮字段</span></span><br><span class="line">                builder.append(text);</span><br><span class="line">            &#125;</span><br><span class="line">            jobDetail.setTitle(builder.toString()); <span class="comment">// 设置到实体类中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(jdHL != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Text[] fragments = jdHL.getFragments(); <span class="comment">// 获取指定字段的高亮片段</span></span><br><span class="line">            StringBuilder builder = <span class="keyword">new</span> StringBuilder(); </span><br><span class="line">            <span class="keyword">for</span>(Text text : fragments) &#123;<span class="comment">// 将这些高亮片段拼接成一个完整的高亮字段</span></span><br><span class="line">                builder.append(text);</span><br><span class="line">            &#125;</span><br><span class="line">            jobDetail.setJd(builder.toString()); <span class="comment">// 设置到实体类中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将结果封装到Map结构中，带有分页信息</span></span><br><span class="line">    <span class="keyword">long</span> totalNum = searchResponse.getHits().getTotalHits().value;</span><br><span class="line">    Map&lt;String, Object&gt; hashMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    hashMap.put(<span class="string">"scroll_id"</span>, searchResponse.getScrollId());</span><br><span class="line">    hashMap.put(<span class="string">"content"</span>, jobDetailArrayList); <span class="comment">// content -&gt; 当前分页中的数据</span></span><br><span class="line">    hashMap.put(<span class="string">"total_num"</span>, totalNum); <span class="comment">// total -&gt; 使用SearchHits.getTotalHits().value获取到所有的记录数</span></span><br><span class="line">    <span class="keyword">return</span> hashMap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    restHighLevelClient.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="京东商城搜索效果实现"><a href="#京东商城搜索效果实现" class="headerlink" title="京东商城搜索效果实现"></a>京东商城搜索效果实现</h4><p>ES索引库表结构分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">PUT product_db  <span class="comment">// 创建索引库</span></span><br><span class="line">&#123;<span class="string">"mappings"</span>:&#123;<span class="string">"properties"</span>:&#123;<span class="string">"id"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"name"</span>:&#123;<span class="string">"type"</span>:<span class="string">"text"</span>,<span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span>&#125;,<span class="string">"keywords"</span>:&#123;<span class="string">"type"</span>:<span class="string">"text"</span>,<span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span>&#125;,<span class="string">"subTitle"</span>:&#123;<span class="string">"type"</span>:<span class="string">"text"</span>,<span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span>&#125;,<span class="string">"salecount"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"putawayDate"</span>:&#123;<span class="string">"type"</span>:<span class="string">"date"</span>&#125;,<span class="string">"price"</span>:&#123;<span class="string">"type"</span>:<span class="string">"double"</span>&#125;,<span class="string">"promotionPrice"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"originalPrice"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"pic"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"sale"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"hasStock"</span>:&#123;<span class="string">"type"</span>:<span class="string">"boolean"</span>&#125;,<span class="string">"brandId"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"brandName"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"brandImg"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"categoryId"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"categoryName"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"attrs"</span>:&#123;<span class="string">"type"</span>:<span class="string">"nested"</span>,<span class="string">"properties"</span>:&#123;<span class="string">"attrId"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"attrName"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"attrValue"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;&#125;&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引数据准备</span></span><br><span class="line">PUT /product_db/_doc/<span class="number">1</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"26"</span>,<span class="string">"name"</span>:<span class="string">"小米 11 手机"</span>,<span class="string">"keywords"</span>:<span class="string">"小米手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"AI智慧全面屏 6GB +64GB 亮黑色 全网通版 移动联通电信4G手机 双卡双待 双卡双待"</span>,<span class="string">"price"</span>:<span class="string">"3999"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"2999"</span>,<span class="string">"originalPrice"</span>:<span class="string">"5999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/xiaomi.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">999</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-01"</span>,<span class="string">"brandId"</span>:<span class="number">6</span>,<span class="string">"brandName"</span>:<span class="string">"小米"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/1e34aef2a409119018a4c6258e39ecfb_222_222.png"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">1</span>,<span class="string">"attrName"</span>:<span class="string">"cpu"</span>,<span class="string">"attrValue"</span>:<span class="string">"2核"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">2</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"黑色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">2</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"27"</span>,<span class="string">"name"</span>:<span class="string">"小米 10 手机"</span>,<span class="string">"keywords"</span>:<span class="string">"小米手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"AI智慧全面屏 4GB +64GB 亮白色 全网通版 移动联通电信4G手机 双卡双待 双卡双待"</span>,<span class="string">"price"</span>:<span class="string">"2999"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"1999"</span>,<span class="string">"originalPrice"</span>:<span class="string">"3999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/xiaomi.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">false</span>,<span class="string">"salecount"</span>:<span class="number">99</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-02"</span>,<span class="string">"brandId"</span>:<span class="number">6</span>,<span class="string">"brandName"</span>:<span class="string">"小米"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/1e34aef2a409119018a4c6258e39ecfb_222_222.png"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">1</span>,<span class="string">"attrName"</span>:<span class="string">"cpu"</span>,<span class="string">"attrValue"</span>:<span class="string">"4核"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">2</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"白色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">3</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"28"</span>,<span class="string">"name"</span>:<span class="string">"小米  手机"</span>,<span class="string">"keywords"</span>:<span class="string">"小米手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"AI智慧全面屏 4GB +64GB 亮蓝色 全网通版 移动联通电信4G手机 双卡双待 双卡双待"</span>,<span class="string">"price"</span>:<span class="string">"2999"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"1999"</span>,<span class="string">"originalPrice"</span>:<span class="string">"3999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/xiaomi.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">199</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-03"</span>,<span class="string">"brandId"</span>:<span class="number">6</span>,<span class="string">"brandName"</span>:<span class="string">"小米"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/1e34aef2a409119018a4c6258e39ecfb_222_222.png"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">1</span>,<span class="string">"attrName"</span>:<span class="string">"cpu"</span>,<span class="string">"attrValue"</span>:<span class="string">"2核"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">2</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"蓝色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">4</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"29"</span>,<span class="string">"name"</span>:<span class="string">"Apple iPhone 8 Plus 64GB 金色特别版 移动联通电信4G手机"</span>,<span class="string">"keywords"</span>:<span class="string">"苹果手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"苹果手机 Apple产品年中狂欢节，好物尽享，美在智慧！速来 &gt;&gt; 勾选[保障服务][原厂保2年]，获得AppleCare+全方位服务计划，原厂延保售后无忧。"</span>,<span class="string">"price"</span>:<span class="string">"5999"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"4999"</span>,<span class="string">"originalPrice"</span>:<span class="string">"7999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5acc5248N6a5f81cd.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">1199</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-04"</span>,<span class="string">"brandId"</span>:<span class="number">51</span>,<span class="string">"brandName"</span>:<span class="string">"苹果"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/timg.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">1</span>,<span class="string">"attrName"</span>:<span class="string">"cpu"</span>,<span class="string">"attrValue"</span>:<span class="string">"4核"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">2</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"金色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">5</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"30"</span>,<span class="string">"name"</span>:<span class="string">"HLA海澜之家简约动物印花短袖T恤"</span>,<span class="string">"keywords"</span>:<span class="string">"海澜之家衣服"</span>,<span class="string">"subTitle"</span>:<span class="string">"HLA海澜之家短袖T恤"</span>,<span class="string">"price"</span>:<span class="string">"199"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"99"</span>,<span class="string">"originalPrice"</span>:<span class="string">"299"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5ad83a4fN6ff67ecd.jpg!cc_350x449.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">19</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-05"</span>,<span class="string">"brandId"</span>:<span class="number">50</span>,<span class="string">"brandName"</span>:<span class="string">"海澜之家"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/99d3279f1029d32b929343b09d3c72de_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">8</span>,<span class="string">"categoryName"</span>:<span class="string">"T恤"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">3</span>,<span class="string">"attrName"</span>:<span class="string">"尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"M"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">4</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"黑色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">6</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"31"</span>,<span class="string">"name"</span>:<span class="string">"HLA海澜之家蓝灰花纹圆领针织布短袖T恤"</span>,<span class="string">"keywords"</span>:<span class="string">"海澜之家衣服"</span>,<span class="string">"subTitle"</span>:<span class="string">"HLA海澜之家短袖T恤"</span>,<span class="string">"price"</span>:<span class="string">"299"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"199"</span>,<span class="string">"originalPrice"</span>:<span class="string">"299"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5ac98b64N70acd82f.jpg!cc_350x449.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">399</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-06"</span>,<span class="string">"brandId"</span>:<span class="number">50</span>,<span class="string">"brandName"</span>:<span class="string">"海澜之家"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/99d3279f1029d32b929343b09d3c72de_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">8</span>,<span class="string">"categoryName"</span>:<span class="string">"T恤"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">3</span>,<span class="string">"attrName"</span>:<span class="string">"尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"X"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">4</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"蓝灰"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">7</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"32"</span>,<span class="string">"name"</span>:<span class="string">"HLA海澜之家短袖T恤男基础款"</span>,<span class="string">"keywords"</span>:<span class="string">"海澜之家衣服"</span>,<span class="string">"subTitle"</span>:<span class="string">"HLA海澜之家短袖T恤"</span>,<span class="string">"price"</span>:<span class="string">"269"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"169"</span>,<span class="string">"originalPrice"</span>:<span class="string">"399"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5a51eb88Na4797877.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">399</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-07"</span>,<span class="string">"brandId"</span>:<span class="number">50</span>,<span class="string">"brandName"</span>:<span class="string">"海澜之家"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/99d3279f1029d32b929343b09d3c72de_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">8</span>,<span class="string">"categoryName"</span>:<span class="string">"T恤"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">3</span>,<span class="string">"attrName"</span>:<span class="string">"尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"L"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">4</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"蓝色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">8</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"33"</span>,<span class="string">"name"</span>:<span class="string">"小米（MI）小米电视4A "</span>,<span class="string">"keywords"</span>:<span class="string">"小米电视机家用电器"</span>,<span class="string">"subTitle"</span>:<span class="string">"小米（MI）小米电视4A 55英寸 L55M5-AZ/L55M5-AD 2GB+8GB HDR 4K超高清 人工智能网络液晶平板电视"</span>,<span class="string">"price"</span>:<span class="string">"2269"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"2169"</span>,<span class="string">"originalPrice"</span>:<span class="string">"2399"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5b02804dN66004d73.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">132</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-09"</span>,<span class="string">"brandId"</span>:<span class="number">6</span>,<span class="string">"brandName"</span>:<span class="string">"小米"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/1e34aef2a409119018a4c6258e39ecfb_222_222.png"</span>,<span class="string">"categoryId"</span>:<span class="number">35</span>,<span class="string">"categoryName"</span>:<span class="string">"手机数码"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">5</span>,<span class="string">"attrName"</span>:<span class="string">"屏幕尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"52"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">6</span>,<span class="string">"attrName"</span>:<span class="string">"机身颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"黑色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">9</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"34"</span>,<span class="string">"name"</span>:<span class="string">"小米（MI）小米电视4A 65英寸"</span>,<span class="string">"keywords"</span>:<span class="string">"小米电视机家用电器"</span>,<span class="string">"subTitle"</span>:<span class="string">"小米（MI）小米电视4A 65英寸 L55M5-AZ/L55M5-AD 2GB+8GB HDR 4K超高清 人工智能网络液晶平板电视"</span>,<span class="string">"price"</span>:<span class="string">"3269"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"3169"</span>,<span class="string">"originalPrice"</span>:<span class="string">"3399"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5b028530N51eee7d4.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">999</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-10"</span>,<span class="string">"brandId"</span>:<span class="number">6</span>,<span class="string">"brandName"</span>:<span class="string">"小米"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/1e34aef2a409119018a4c6258e39ecfb_222_222.png"</span>,<span class="string">"categoryId"</span>:<span class="number">35</span>,<span class="string">"categoryName"</span>:<span class="string">"手机数码"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">5</span>,<span class="string">"attrName"</span>:<span class="string">"屏幕尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"65"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">6</span>,<span class="string">"attrName"</span>:<span class="string">"机身颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"金色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">10</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"35"</span>,<span class="string">"name"</span>:<span class="string">"耐克NIKE 男子 休闲鞋 ROSHE RUN 运动鞋 511881-010黑色41码"</span>,<span class="string">"keywords"</span>:<span class="string">"耐克运动鞋 鞋子"</span>,<span class="string">"subTitle"</span>:<span class="string">"耐克NIKE 男子 休闲鞋 ROSHE RUN 运动鞋 511881-010黑色41码"</span>,<span class="string">"price"</span>:<span class="string">"569"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"369"</span>,<span class="string">"originalPrice"</span>:<span class="string">"899"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5b235bb9Nf606460b.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">399</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-11"</span>,<span class="string">"brandId"</span>:<span class="number">58</span>,<span class="string">"brandName"</span>:<span class="string">"NIKE"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/timg (51).jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">29</span>,<span class="string">"categoryName"</span>:<span class="string">"男鞋"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">7</span>,<span class="string">"attrName"</span>:<span class="string">"尺码"</span>,<span class="string">"attrValue"</span>:<span class="string">"42"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">8</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"黑色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">11</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"36"</span>,<span class="string">"name"</span>:<span class="string">"耐克NIKE 男子 气垫 休闲鞋 AIR MAX 90 ESSENTIAL 运动鞋 AJ1285-101白色41码"</span>,<span class="string">"keywords"</span>:<span class="string">"耐克运动鞋 鞋子"</span>,<span class="string">"subTitle"</span>:<span class="string">"AIR MAX 90 ESSENTIAL 运动鞋 AJ1285-101白色"</span>,<span class="string">"price"</span>:<span class="string">"769"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"469"</span>,<span class="string">"originalPrice"</span>:<span class="string">"999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/5b19403eN9f0b3cb8.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">499</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-13"</span>,<span class="string">"brandId"</span>:<span class="number">58</span>,<span class="string">"brandName"</span>:<span class="string">"NIKE"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/timg (51).jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">29</span>,<span class="string">"categoryName"</span>:<span class="string">"男鞋"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">7</span>,<span class="string">"attrName"</span>:<span class="string">"尺码"</span>,<span class="string">"attrValue"</span>:<span class="string">"44"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">8</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"白色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">12</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"37"</span>,<span class="string">"name"</span>:<span class="string">"(华为)HUAWEI MateBook X Pro 2019款 13.9英寸3K触控全面屏 轻薄笔记本"</span>,<span class="string">"keywords"</span>:<span class="string">"轻薄笔记本华为 笔记本电脑"</span>,<span class="string">"subTitle"</span>:<span class="string">"轻薄华为笔记本 电脑"</span>,<span class="string">"price"</span>:<span class="string">"4769"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"4469"</span>,<span class="string">"originalPrice"</span>:<span class="string">"4999"</span>,<span class="string">"pic"</span>:<span class="string">"http://tuling-mall.oss-cn-shenzhen.aliyuncs.com/tulingmall/images/20200317/800_800_1555752016264mp.png"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">699</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-14"</span>,<span class="string">"brandId"</span>:<span class="number">3</span>,<span class="string">"brandName"</span>:<span class="string">"华为"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/17f2dd9756d9d333bee8e60ce8c03e4c_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">9</span>,<span class="string">"attrName"</span>:<span class="string">"容量"</span>,<span class="string">"attrValue"</span>:<span class="string">"16G"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">10</span>,<span class="string">"attrName"</span>:<span class="string">"网络"</span>,<span class="string">"attrValue"</span>:<span class="string">"4G"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">13</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"38"</span>,<span class="string">"name"</span>:<span class="string">"华为nova6se 手机 绮境森林 全网通（8G+128G)"</span>,<span class="string">"keywords"</span>:<span class="string">"轻薄笔记本华为 手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"华为nova6se 手机"</span>,<span class="string">"price"</span>:<span class="string">"6769"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"6469"</span>,<span class="string">"originalPrice"</span>:<span class="string">"6999"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/5ac1bf58Ndefaac16.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">899</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-15"</span>,<span class="string">"brandId"</span>:<span class="number">3</span>,<span class="string">"brandName"</span>:<span class="string">"华为"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/17f2dd9756d9d333bee8e60ce8c03e4c_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">9</span>,<span class="string">"attrName"</span>:<span class="string">"容量"</span>,<span class="string">"attrValue"</span>:<span class="string">"64G"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">10</span>,<span class="string">"attrName"</span>:<span class="string">"网络"</span>,<span class="string">"attrValue"</span>:<span class="string">"5G"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">14</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"39"</span>,<span class="string">"name"</span>:<span class="string">"iPhone7/6s/8钢化膜苹果8Plus全屏复盖抗蓝光防窥防偷看手机膜"</span>,<span class="string">"keywords"</span>:<span class="string">"手机膜"</span>,<span class="string">"subTitle"</span>:<span class="string">"iPhone7/6s/8钢化膜苹果8Plus全屏复盖抗蓝光防窥防偷看手机膜"</span>,<span class="string">"price"</span>:<span class="string">"29"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"39"</span>,<span class="string">"originalPrice"</span>:<span class="string">"49"</span>,<span class="string">"pic"</span>:<span class="string">"http://tuling-mall.oss-cn-shenzhen.aliyuncs.com/tulingmall/images/20200311/6df99dab78bb2014.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">799</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-16"</span>,<span class="string">"brandId"</span>:<span class="number">51</span>,<span class="string">"brandName"</span>:<span class="string">"苹果"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://tuling-mall.oss-cn-shenzhen.aliyuncs.com/tulingmall/images/20200311/2b84746650fc122d67749a876c453619.png"</span>,<span class="string">"categoryId"</span>:<span class="number">30</span>,<span class="string">"categoryName"</span>:<span class="string">"手机配件"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">11</span>,<span class="string">"attrName"</span>:<span class="string">"手机膜-材料"</span>,<span class="string">"attrValue"</span>:<span class="string">"钢化"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">12</span>,<span class="string">"attrName"</span>:<span class="string">"手机膜-颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"白色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">15</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"40"</span>,<span class="string">"name"</span>:<span class="string">"七匹狼短袖T恤男纯棉舒适春夏修身运动休闲短袖三条装 圆领3条装"</span>,<span class="string">"keywords"</span>:<span class="string">"七匹狼服装 衣服"</span>,<span class="string">"subTitle"</span>:<span class="string">"七匹狼短袖T恤男纯棉舒适春夏修身运动休闲短袖三条装 圆领3条装"</span>,<span class="string">"price"</span>:<span class="string">"129"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"139"</span>,<span class="string">"originalPrice"</span>:<span class="string">"149"</span>,<span class="string">"pic"</span>:<span class="string">"http://tuling-mall.oss-cn-shenzhen.aliyuncs.com/tulingmall/images/20200311/19e846e727dff337.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">199</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-04-20"</span>,<span class="string">"brandId"</span>:<span class="number">49</span>,<span class="string">"brandName"</span>:<span class="string">"七匹狼"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/18d8bc3eb13533fab466d702a0d3fd1f40345bcd.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">8</span>,<span class="string">"categoryName"</span>:<span class="string">"T恤"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">3</span>,<span class="string">"attrName"</span>:<span class="string">"尺寸"</span>,<span class="string">"attrValue"</span>:<span class="string">"M"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">4</span>,<span class="string">"attrName"</span>:<span class="string">"颜色"</span>,<span class="string">"attrValue"</span>:<span class="string">"白色"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">16</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"41"</span>,<span class="string">"name"</span>:<span class="string">"华为P40 Pro手机"</span>,<span class="string">"keywords"</span>:<span class="string">"华为手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"华为P40 Pro手机"</span>,<span class="string">"price"</span>:<span class="string">"2129"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"2139"</span>,<span class="string">"originalPrice"</span>:<span class="string">"2149"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180607/5ac1bf58Ndefaac16.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">199</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-05-03"</span>,<span class="string">"brandId"</span>:<span class="number">3</span>,<span class="string">"brandName"</span>:<span class="string">"华为"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20190129/17f2dd9756d9d333bee8e60ce8c03e4c_222_222.jpg"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">9</span>,<span class="string">"attrName"</span>:<span class="string">"容量"</span>,<span class="string">"attrValue"</span>:<span class="string">"128G"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">10</span>,<span class="string">"attrName"</span>:<span class="string">"网络"</span>,<span class="string">"attrValue"</span>:<span class="string">"5G"</span>&#125;]&#125;</span><br><span class="line">PUT /product_db/_doc/<span class="number">17</span></span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="string">"42"</span>,<span class="string">"name"</span>:<span class="string">"朵唯智能手机 4G全网通 老人学生双卡双待手机"</span>,<span class="string">"keywords"</span>:<span class="string">"朵唯手机"</span>,<span class="string">"subTitle"</span>:<span class="string">"朵唯手机后置双摄，国产虎贲芯片！优化散热结构！浅薄机身！朵唯4月特惠！"</span>,<span class="string">"price"</span>:<span class="string">"3129"</span>,<span class="string">"promotionPrice"</span>:<span class="string">"3139"</span>,<span class="string">"originalPrice"</span>:<span class="string">"3249"</span>,<span class="string">"pic"</span>:<span class="string">"http://macro-oss.oss-cn-shenzhen.aliyuncs.com/mall/images/20180615/xiaomi.jpg"</span>,<span class="string">"sale"</span>:<span class="number">999</span>,<span class="string">"hasStock"</span>:<span class="keyword">true</span>,<span class="string">"salecount"</span>:<span class="number">1199</span>,<span class="string">"putawayDate"</span>:<span class="string">"2021-06-01"</span>,<span class="string">"brandId"</span>:<span class="number">59</span>,<span class="string">"brandName"</span>:<span class="string">"朵唯"</span>,<span class="string">"brandImg"</span>:<span class="string">"http://tuling-mall.oss-cn-shenzhen.aliyuncs.com/tulingmall/images/20200311/2b84746650fc122d67749a876c453619.png"</span>,<span class="string">"categoryId"</span>:<span class="number">19</span>,<span class="string">"categoryName"</span>:<span class="string">"手机通讯"</span>,<span class="string">"attrs"</span>:[&#123;<span class="string">"attrId"</span>:<span class="number">9</span>,<span class="string">"attrName"</span>:<span class="string">"容量"</span>,<span class="string">"attrValue"</span>:<span class="string">"32G"</span>&#125;,&#123;<span class="string">"attrId"</span>:<span class="number">10</span>,<span class="string">"attrName"</span>:<span class="string">"网络"</span>,<span class="string">"attrValue"</span>:<span class="string">"4G"</span>&#125;]&#125;</span><br></pre></td></tr></table></figure><p>检索<code>DSL</code>语句构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">POST /product_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">8</span>,</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [&#123;<span class="string">"match"</span>: &#123;<span class="string">"name"</span>: &#123;<span class="string">"query"</span>: <span class="string">"手机"</span>&#125;&#125;&#125;],</span><br><span class="line">      <span class="string">"filter"</span>: [</span><br><span class="line">        &#123;<span class="string">"term"</span>: &#123;<span class="string">"hasStock"</span>: &#123;<span class="string">"value"</span>: <span class="keyword">true</span>&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"range"</span>: &#123;<span class="string">"price"</span>: &#123;<span class="string">"from"</span>: <span class="string">"1"</span>,<span class="string">"to"</span>: <span class="string">"5000"</span>&#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"sort"</span>: [&#123;<span class="string">"salecount"</span>: &#123;<span class="string">"order"</span>: <span class="string">"asc"</span>&#125;&#125;],</span><br><span class="line">  <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">    <span class="string">"brand_agg"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"brandId"</span>,<span class="string">"size"</span>: <span class="number">50</span>&#125;,</span><br><span class="line">      <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">        <span class="string">"brand_name_agg"</span>: &#123;<span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"brandName"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"brand_img_agg"</span>: &#123;<span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"brandImg"</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"category_agg"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"categoryId"</span>,<span class="string">"size"</span>: <span class="number">50</span>,<span class="string">"min_doc_count"</span>: <span class="number">1</span>&#125;,</span><br><span class="line">      <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">        <span class="string">"category_name_agg"</span>: &#123;<span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"categoryName"</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"attr_agg"</span>: &#123;</span><br><span class="line">      <span class="string">"nested"</span>: &#123;<span class="string">"path"</span>: <span class="string">"attrs"</span>&#125;,</span><br><span class="line">      <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">        <span class="string">"attr_id_agg"</span>: &#123;</span><br><span class="line">          <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"attrs.attrId"</span>&#125;,</span><br><span class="line">          <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">            <span class="string">"attr_name_agg"</span>: &#123;<span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"attrs.attrName"</span>&#125;&#125;,</span><br><span class="line">            <span class="string">"attr_value_agg"</span>: &#123;<span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"attrs.attrValue"</span>&#125;&#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123;</span><br><span class="line">    <span class="string">"pre_tags"</span>: [<span class="string">"&lt;b style='color:red'&gt;"</span>],</span><br><span class="line">    <span class="string">"post_tags"</span>: [<span class="string">"&lt;/b&gt;"</span>],</span><br><span class="line">    <span class="string">"fields"</span>: &#123;<span class="string">"name"</span>: &#123;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/searchList"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> CommonResult&lt;ESResponseResult&gt; <span class="title">listPage</span><span class="params">(ESRequestParam param, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 根据传递来的页面的查询参数，去es中检索商品</span></span><br><span class="line">    ESResponseResult searchResult = tulingMallSearchService.search(param);</span><br><span class="line">    <span class="keyword">return</span> CommonResult.success(searchResult);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ESResponseResult <span class="title">search</span><span class="params">(ESRequestParam param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 构建检索对象-封装请求相关参数信息</span></span><br><span class="line">        SearchRequest searchRequest = startBuildRequestParam(param);</span><br><span class="line">        <span class="comment">// 进行检索操作</span></span><br><span class="line">        SearchResponse response = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">// 分析响应数据，封装成指定的格式</span></span><br><span class="line">        ESResponseResult responseResult = startBuildResponseResult(response, param);</span><br><span class="line">        <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装请求参数信息，关键字查询、根据属性、分类、品牌、价格区间、是否有库存等进行过滤、分页、高亮、以及聚合统计品牌分类属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> SearchRequest <span class="title">startBuildRequestParam</span><span class="params">(ESRequestParam param)</span> </span>&#123;</span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    <span class="comment">// 关键字查询、根据属性、分类、品牌、价格区间、是否有库存等进行过滤、分页、高亮、以及聚合统计品牌分类属性</span></span><br><span class="line">    BoolQueryBuilder boolQueryBuilder = <span class="keyword">new</span> BoolQueryBuilder();</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getKeyword())) &#123;</span><br><span class="line">        <span class="comment">//单字段查询 boolQueryBuilder.must(QueryBuilders.matchQuery("name", param.getKeyword()));</span></span><br><span class="line">        <span class="comment">//多字段查询</span></span><br><span class="line">        boolQueryBuilder.must(QueryBuilders.multiMatchQuery(param.getKeyword(),<span class="string">"name"</span>,<span class="string">"keywords"</span>,<span class="string">"subTitle"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据类目ID进行过滤</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != param.getCategoryId()) &#123;</span><br><span class="line">        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">"categoryId"</span>, param.getCategoryId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据品牌ID进行过滤</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != param.getBrandId() &amp;&amp; param.getBrandId().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        boolQueryBuilder.filter(QueryBuilders.termsQuery(<span class="string">"brandId"</span>, param.getBrandId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据属性进行相关过滤</span></span><br><span class="line">    <span class="keyword">if</span> (param.getAttrs() != <span class="keyword">null</span> &amp;&amp; param.getAttrs().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        param.getAttrs().forEach(item -&gt; &#123;</span><br><span class="line">            <span class="comment">//attrs=1_白色&amp;2_4核</span></span><br><span class="line">            BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">            <span class="comment">//attrs=1_64G</span></span><br><span class="line">            String[] s = item.split(<span class="string">"_"</span>);</span><br><span class="line">            String attrId = s[<span class="number">0</span>];</span><br><span class="line">            String[] attrValues = s[<span class="number">1</span>].split(<span class="string">":"</span>);<span class="comment">//这个属性检索用的值</span></span><br><span class="line">            boolQuery.must(QueryBuilders.termQuery(<span class="string">"attrs.attrId"</span>, attrId));</span><br><span class="line">            boolQuery.must(QueryBuilders.termsQuery(<span class="string">"attrs.attrValue"</span>, attrValues));</span><br><span class="line"></span><br><span class="line">            NestedQueryBuilder nestedQueryBuilder = QueryBuilders.nestedQuery(<span class="string">"attrs"</span>, boolQuery, ScoreMode.None);</span><br><span class="line">            boolQueryBuilder.filter(nestedQueryBuilder);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 是否有库存</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != param.getHasStock()) &#123;</span><br><span class="line">        boolQueryBuilder.filter(QueryBuilders.termQuery(<span class="string">"hasStock"</span>, param.getHasStock() == <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据价格过滤</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getPrice())) &#123;</span><br><span class="line">        <span class="comment">// 价格的输入形式为：10-100（起始价格和最终价格）或-100（不指定起始价格）或10-（不限制最终价格）</span></span><br><span class="line">        RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(<span class="string">"price"</span>);</span><br><span class="line">        String[] price = param.getPrice().split(<span class="string">"_"</span>);</span><br><span class="line">        <span class="keyword">if</span> (price.length == <span class="number">2</span>) &#123;</span><br><span class="line">            rangeQueryBuilder.gte(price[<span class="number">0</span>]).lte(price[<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (price.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (param.getPrice().startsWith(<span class="string">"_"</span>)) &#123;</span><br><span class="line">                rangeQueryBuilder.lte(price[<span class="number">1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (param.getPrice().endsWith(<span class="string">"_"</span>)) &#123;</span><br><span class="line">                rangeQueryBuilder.gte(price[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        boolQueryBuilder.filter(rangeQueryBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 封装所有查询条件</span></span><br><span class="line">    searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line">    <span class="comment">//实现排序、高亮、分页操作，排序，页面传入的参数值形式 sort=price_asc/desc</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getSort())) &#123;</span><br><span class="line">        String sort = param.getSort();</span><br><span class="line">        String[] sortFileds = sort.split(<span class="string">"_"</span>);</span><br><span class="line">        System.out.println(<span class="string">"sortFileds:"</span>+sortFileds.length);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.isEmpty(sortFileds[<span class="number">0</span>]))&#123;</span><br><span class="line">            SortOrder sortOrder = <span class="string">"asc"</span>.equalsIgnoreCase(sortFileds[<span class="number">1</span>]) ? SortOrder.ASC : SortOrder.DESC;</span><br><span class="line">            searchSourceBuilder.sort(sortFileds[<span class="number">0</span>], sortOrder);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    searchSourceBuilder.from((param.getPageNum() - <span class="number">1</span>) * SearchConstant.PAGE_SIZE);</span><br><span class="line">    searchSourceBuilder.size(SearchConstant.PAGE_SIZE);</span><br><span class="line">    <span class="comment">// 高亮显示</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getKeyword())) &#123;</span><br><span class="line">        HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        highlightBuilder.field(<span class="string">"name"</span>);</span><br><span class="line">        highlightBuilder.preTags(<span class="string">"&lt;b style='color:red'&gt;"</span>);</span><br><span class="line">        highlightBuilder.postTags(<span class="string">"&lt;/b&gt;"</span>);</span><br><span class="line">        searchSourceBuilder.highlighter(highlightBuilder);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对品牌、分类信息、属性信息进行聚合分析，按照品牌进行聚合</span></span><br><span class="line">    TermsAggregationBuilder brand_agg = AggregationBuilders.terms(<span class="string">"brand_agg"</span>);</span><br><span class="line">    brand_agg.field(<span class="string">"brandId"</span>).size(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">// 品牌的子聚合-品牌名聚合</span></span><br><span class="line">    brand_agg.subAggregation(AggregationBuilders.terms(<span class="string">"brand_name_agg"</span>).field(<span class="string">"brandName"</span>).size(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 品牌的子聚合-品牌图片聚合</span></span><br><span class="line">    brand_agg.subAggregation(AggregationBuilders.terms(<span class="string">"brand_img_agg"</span>).field(<span class="string">"brandImg"</span>).size(<span class="number">1</span>));</span><br><span class="line">    searchSourceBuilder.aggregation(brand_agg);</span><br><span class="line">    <span class="comment">// 按照分类信息进行聚合</span></span><br><span class="line">    TermsAggregationBuilder category_agg = AggregationBuilders.terms(<span class="string">"category_agg"</span>);</span><br><span class="line">    category_agg.field(<span class="string">"categoryId"</span>).size(<span class="number">50</span>);    category_agg.subAggregation(AggregationBuilders.terms(<span class="string">"category_name_agg"</span>).field(<span class="string">"categoryName"</span>).size(<span class="number">1</span>));</span><br><span class="line">    searchSourceBuilder.aggregation(category_agg);</span><br><span class="line">    <span class="comment">// 按照属性信息进行聚合</span></span><br><span class="line">    NestedAggregationBuilder attr_agg = AggregationBuilders.nested(<span class="string">"attr_agg"</span>, <span class="string">"attrs"</span>);</span><br><span class="line">    <span class="comment">// 按照属性ID进行聚合</span></span><br><span class="line">    TermsAggregationBuilder attr_id_agg = AggregationBuilders.terms(<span class="string">"attr_id_agg"</span>).field(<span class="string">"attrs.attrId"</span>);</span><br><span class="line">    attr_agg.subAggregation(attr_id_agg);</span><br><span class="line">    <span class="comment">// 在每个属性ID下，按照属性名进行聚合</span></span><br><span class="line">    attr_id_agg.subAggregation(AggregationBuilders.terms(<span class="string">"attr_name_agg"</span>).field(<span class="string">"attrs.attrName"</span>).size(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">// 在每个属性ID下，按照属性值进行聚合</span></span><br><span class="line">    attr_id_agg.subAggregation(AggregationBuilders.terms(<span class="string">"attr_value_agg"</span>).field(<span class="string">"attrs.attrValue"</span>).size(<span class="number">50</span>));</span><br><span class="line">    searchSourceBuilder.aggregation(attr_agg);</span><br><span class="line">    System.out.println(<span class="string">"构建的DSL语句 &#123;&#125;:"</span>+ searchSourceBuilder.toString());</span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="keyword">new</span> String[]&#123;SearchConstant.INDEX_NAME&#125;, searchSourceBuilder);</span><br><span class="line">    <span class="keyword">return</span> searchRequest;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装查询到的结果信息，关键字查询、根据属性、分类、品牌、价格区间、是否有库存等进行过滤、分页、高亮、以及聚合统计品牌分类属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ESResponseResult <span class="title">startBuildResponseResult</span><span class="params">(SearchResponse response, ESRequestParam param)</span> </span>&#123;</span><br><span class="line">    ESResponseResult result = <span class="keyword">new</span> ESResponseResult();</span><br><span class="line">    <span class="comment">// 获取查询到的商品信息</span></span><br><span class="line">    SearchHits hits = response.getHits();</span><br><span class="line">    List&lt;EsProduct&gt; esModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 遍历所有商品信息</span></span><br><span class="line">    <span class="keyword">if</span> (hits.getHits() != <span class="keyword">null</span> &amp;&amp; hits.getHits().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">            String sourceAsString = hit.getSourceAsString();</span><br><span class="line">            EsProduct esModel = JSON.parseObject(sourceAsString, EsProduct<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            <span class="comment">// 判断是否按关键字检索，若是就显示高亮，否则不显示</span></span><br><span class="line">            <span class="keyword">if</span> (!StringUtils.isEmpty(param.getKeyword())) &#123;</span><br><span class="line">                <span class="comment">// 拿到高亮信息显示标题</span></span><br><span class="line">                HighlightField name = hit.getHighlightFields().get(<span class="string">"name"</span>);</span><br><span class="line">                <span class="comment">// 判断name中是否含有查询的关键字(因为是多字段查询，因此可能不包含指定的关键字，假设不包含则显示原始name字段的信息)</span></span><br><span class="line">                String nameValue = name!=<span class="keyword">null</span> ? name.getFragments()[<span class="number">0</span>].string() : esModel.getName();</span><br><span class="line">                esModel.setName(nameValue);</span><br><span class="line">            &#125;</span><br><span class="line">            esModels.add(esModel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    result.setProducts(esModels);</span><br><span class="line">    <span class="comment">// 当前商品涉及到的所有品牌信息，小米手机和小米电脑都属于小米品牌，过滤重复品牌信息</span></span><br><span class="line">    Set&lt;ESResponseResult.BrandVo&gt; brandVos = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取到品牌的聚合</span></span><br><span class="line">    ParsedLongTerms brandAgg = response.getAggregations().get(<span class="string">"brand_agg"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : brandAgg.getBuckets()) &#123;</span><br><span class="line">        ESResponseResult.BrandVo brandVo = <span class="keyword">new</span> ESResponseResult.BrandVo();</span><br><span class="line">        <span class="comment">// 获取品牌的id</span></span><br><span class="line">        <span class="keyword">long</span> brandId = bucket.getKeyAsNumber().longValue();</span><br><span class="line">        brandVo.setBrandId(brandId);</span><br><span class="line">        <span class="comment">// 获取品牌的名字</span></span><br><span class="line">        ParsedStringTerms brandNameAgg = bucket.getAggregations().get(<span class="string">"brand_name_agg"</span>);</span><br><span class="line">        String brandName = brandNameAgg.getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">        brandVo.setBrandName(brandName);</span><br><span class="line">        <span class="comment">// 获取品牌的LOGO</span></span><br><span class="line">        ParsedStringTerms brandImgAgg = bucket.getAggregations().get(<span class="string">"brand_img_agg"</span>);</span><br><span class="line">        String brandImg = brandImgAgg.getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">        brandVo.setBrandImg(brandImg);</span><br><span class="line">        System.out.println(<span class="string">"brandId:"</span>+brandId+<span class="string">"brandName:"</span>+brandName+<span class="string">"brandImg"</span>);</span><br><span class="line">        brandVos.add(brandVo);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"brandVos.size:"</span>+brandVos.size());</span><br><span class="line">    result.setBrands(brandVos);</span><br><span class="line">    <span class="comment">// 当前商品相关的所有类目信息，获取到分类的聚合</span></span><br><span class="line">    List&lt;ESResponseResult.categoryVo&gt; categoryVos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ParsedLongTerms categoryAgg = response.getAggregations().get(<span class="string">"category_agg"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : categoryAgg.getBuckets()) &#123;</span><br><span class="line">        ESResponseResult.categoryVo categoryVo = <span class="keyword">new</span> ESResponseResult.categoryVo();</span><br><span class="line">        <span class="comment">// 获取分类id</span></span><br><span class="line">        String keyAsString = bucket.getKeyAsString();</span><br><span class="line">        categoryVo.setCategoryId(Long.parseLong(keyAsString));</span><br><span class="line">        <span class="comment">// 获取分类名</span></span><br><span class="line">        ParsedStringTerms categoryNameAgg = bucket.getAggregations().get(<span class="string">"category_name_agg"</span>);</span><br><span class="line">        String categoryName = categoryNameAgg.getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">        categoryVo.setCategoryName(categoryName);</span><br><span class="line">        categoryVos.add(categoryVo);</span><br><span class="line">    &#125;</span><br><span class="line">    result.setCategorys(categoryVos);</span><br><span class="line">    <span class="comment">// 获取商品相关的所有属性信息</span></span><br><span class="line">    List&lt;ESResponseResult.AttrVo&gt; attrVos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 获取属性信息的聚合</span></span><br><span class="line">    ParsedNested attrsAgg = response.getAggregations().get(<span class="string">"attr_agg"</span>);</span><br><span class="line">    ParsedLongTerms attrIdAgg = attrsAgg.getAggregations().get(<span class="string">"attr_id_agg"</span>);</span><br><span class="line">    <span class="keyword">for</span> (Terms.Bucket bucket : attrIdAgg.getBuckets()) &#123;</span><br><span class="line">        ESResponseResult.AttrVo attrVo = <span class="keyword">new</span> ESResponseResult.AttrVo();</span><br><span class="line">        <span class="comment">// 获取属性ID值</span></span><br><span class="line">        <span class="keyword">long</span> attrId = bucket.getKeyAsNumber().longValue();</span><br><span class="line">        attrVo.setAttrId(attrId);</span><br><span class="line">        <span class="comment">// 获取属性的名字</span></span><br><span class="line">        ParsedStringTerms attrNameAgg = bucket.getAggregations().get(<span class="string">"attr_name_agg"</span>);</span><br><span class="line">        String attrName = attrNameAgg.getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">        attrVo.setAttrName(attrName);</span><br><span class="line">        <span class="comment">// 获取属性的值</span></span><br><span class="line">        ParsedStringTerms attrValueAgg = bucket.getAggregations().get(<span class="string">"attr_value_agg"</span>);</span><br><span class="line">        List&lt;String&gt; attrValues = attrValueAgg.getBuckets().stream().map(item -&gt; item.getKeyAsString()).collect(Collectors.toList());</span><br><span class="line">        attrVo.setAttrValue(attrValues);</span><br><span class="line">        attrVos.add(attrVo);</span><br><span class="line">    &#125;</span><br><span class="line">    result.setAttrs(attrVos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行分页操作</span></span><br><span class="line">    result.setPageNum(param.getPageNum());</span><br><span class="line">    <span class="comment">// 获取总记录数</span></span><br><span class="line">    <span class="keyword">long</span> total = hits.getTotalHits().value;</span><br><span class="line">    result.setTotal(total);</span><br><span class="line">    <span class="comment">// 计算总页码</span></span><br><span class="line">    <span class="keyword">int</span> totalPages = (<span class="keyword">int</span>) total % SearchConstant.PAGE_SIZE == <span class="number">0</span> ?</span><br><span class="line">        (<span class="keyword">int</span>) total / SearchConstant.PAGE_SIZE : ((<span class="keyword">int</span>) total / SearchConstant.PAGE_SIZE + <span class="number">1</span>);</span><br><span class="line">    result.setTotalPages(totalPages);</span><br><span class="line">    List&lt;Integer&gt; pageNavs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totalPages; i++) &#123;</span><br><span class="line">        pageNavs.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    result.setPageNavs(pageNavs);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="ELK" scheme="https://yaoyinglong.github.io/categories/Cloud/ELK/"/>
    
    
      <category term="ElasticSearch" scheme="https://yaoyinglong.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch进阶</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch%E8%BF%9B%E9%98%B6/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch进阶/</id>
    <published>2021-12-25T16:00:00.000Z</published>
    <updated>2021-12-27T11:45:52.099Z</updated>
    
    <content type="html"><![CDATA[<h4 id="分值计算"><a href="#分值计算" class="headerlink" title="分值计算"></a>分值计算</h4><p>首先根据用户<strong><code>query</code>条件</strong>，过滤出包含指定<strong><code>term</code></strong>的doc，<strong><code>Field-length norm</code></strong>即<strong>field长度越长相关度越弱</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">query <span class="string">"hello world"</span> --&gt;  hello / world / hello &amp; world</span><br><span class="line">bool --&gt; must/must not/should --&gt; 过滤 --&gt; 包含 / 不包含 / 可能包含</span><br><span class="line">doc --&gt; 不打分数 --&gt; 正或反 <span class="keyword">true</span> or <span class="keyword">false</span> --&gt; 为了减少后续要计算的doc的数量，提升性能</span><br></pre></td></tr></table></figure><p><strong><code>relevance score</code>算法</strong>：计算出一个<strong>索引中文本</strong>与<strong>搜索文本</strong>之间<strong>关联匹配程度</strong>，ES使用<strong><code>term frequency/inverse document frequency</code>算法</strong>简称为<strong><code>TF/IDF</code></strong>算法。<strong><code>Term frequency</code></strong>即<strong>搜索文本</strong>中<strong>各个词条</strong>在<strong><code>field</code></strong>文本中<strong>出现次数</strong>，<strong>次数越多越相关</strong>。<strong>Inverse document frequency</strong>即<strong>搜索文本</strong>中<strong>各个词条</strong>在<strong>整个索引所有文档</strong>中<strong>出现次数</strong>，<strong>出现次数越多越不相关</strong>。</p><h4 id="向量空间模型"><a href="#向量空间模型" class="headerlink" title="向量空间模型"></a>向量空间模型</h4><p><strong><code>vector space model</code></strong>向量空间模型，多个term对一个doc的总分数，es会根据<strong>查询字符串</strong>在所有doc中的评分情况，计算出一个<strong><code>query vector</code></strong>即<strong><code>query</code>向量</strong>，会给每一个doc，拿每个term计算出一个分数来。每个<code>doc vector</code>计算出对<strong><code>query vector</code></strong>的<strong>弧度</strong>，最后基于该弧度给出一个doc相对于query中多个term的总分数，<strong>弧度越大分数越低</strong>，<strong>弧度越小分数越高</strong>。若是多个term，那么就是线性代数来计算，无法用图表示。</p><p><img src="../../../../../images/DB/ES/向量空间模型.png" alt></p><p>若查询条件字符串为<code>hello world</code>，hello这个term，给的基于所有doc的一个评分就是3，world这个term，给的基于所有doc的一个评分就是6，则<strong><code>query</code>向量</strong>为<strong><code>[3, 6]</code></strong>，若3个doc一个包含hello，一个包含world，一个包含hello和world，doc向量分别为[3, 0]、[0, 6]、[3, 6]。</p><h4 id="分词器工作流程"><a href="#分词器工作流程" class="headerlink" title="分词器工作流程"></a>分词器工作流程</h4><p>首先进行<strong><code>normalization</code>切分词语</strong>，将<strong>目标文本</strong>拆分成单个单词，同时对每个单词进行<strong><code>normalization</code>时态转换单复数转换</strong>、<strong>分词器<code>recall</code></strong>、<strong>搜索时召回率</strong>、增加<strong>能搜索到的结果的数量</strong>。<strong>分词器</strong>将文本进行各种处理，最后<strong>处理好的结果</strong>才会用来<strong>建立倒排索引</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">character filter：在一段文本进行分词之前，先进行预处理，如过滤html标签（&lt;span&gt;hello&lt;span&gt; --&gt; hello），&amp; --&gt; and (I&amp;you --&gt; I and you)</span><br><span class="line">tokenizer：分词，hello you and me --&gt; hello, you, and, me</span><br><span class="line">token filter：lowercase，stop word，synonymom，liked --&gt; like，Tom --&gt; tom，a/the/an --&gt; 干掉，small --&gt; little</span><br></pre></td></tr></table></figure><p>对于默认的<strong><code>standard</code>分词器</strong>：</p><ul><li><strong><code>standard tokenizer</code></strong>：以单词边界进行切分</li><li><strong><code>standard token filter</code></strong>：什么都不做</li><li><strong><code>lowercase token filter</code></strong>：将所有字母<strong>转换为小写</strong></li><li><strong><code>stop token filer</code></strong>：默认被禁用，移除停用词，比如a the it等等<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"Set the shape to semi-transparent by calling set_trans(5)"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT /my_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"analysis"</span>: &#123;</span><br><span class="line">      <span class="string">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="string">"es_std"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"standard"</span>,</span><br><span class="line">          <span class="string">"stopwords"</span>: <span class="string">"_english_"</span> <span class="comment">// 启用english停用词token filter</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"standard"</span>, </span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"es_std"</span>,</span><br><span class="line">  <span class="string">"text"</span>:<span class="string">"a dog is in the house"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PUT /my_index <span class="comment">// 定制化分词器</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"settings"</span>: &#123;</span><br><span class="line">    <span class="string">"analysis"</span>: &#123;</span><br><span class="line">      <span class="string">"char_filter"</span>: &#123;<span class="string">"&amp;_to_and"</span>: &#123;<span class="string">"type"</span>: <span class="string">"mapping"</span>,<span class="string">"mappings"</span>: [<span class="string">"&amp;=&gt; and"</span>]&#125;&#125;,</span><br><span class="line">      <span class="string">"filter"</span>: &#123;<span class="string">"my_stopwords"</span>: &#123;<span class="string">"type"</span>: <span class="string">"stop"</span>,<span class="string">"stopwords"</span>: [<span class="string">"the"</span>,<span class="string">"a"</span>]&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"analyzer"</span>: &#123;</span><br><span class="line">        <span class="string">"my_analyzer"</span>: &#123;<span class="string">"type"</span>: <span class="string">"custom"</span>,<span class="string">"char_filter"</span>: [<span class="string">"html_strip"</span>,<span class="string">"&amp;_to_and"</span>],<span class="string">"tokenizer"</span>: <span class="string">"standard"</span>,<span class="string">"filter"</span>: [<span class="string">"lowercase"</span>,<span class="string">"my_stopwords"</span>]&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /my_index/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"tom&amp;jerry are a friend in the house, &lt;a&gt;, HAHA!!"</span>,</span><br><span class="line">  <span class="string">"analyzer"</span>: <span class="string">"my_analyzer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="IK分词器"><a href="#IK分词器" class="headerlink" title="IK分词器"></a>IK分词器</h4><p><a href="https://github.com/medcl/elasticsearch-analysis-ik/tree" rel="external nofollow noopener noreferrer" target="_blank">IK分词器</a><strong>配置文件地址</strong>为<strong><code>es/plugins/ik/config</code></strong>，ik原生最重要的是<strong><code>main.dic</code></strong>和<strong><code>stopword.dic</code></strong>两个配置文件</p><ul><li><strong><code>IKAnalyzer.cfg.xml</code></strong>：用来<strong>配置自定义词库</strong></li><li><strong><code>main.dic</code></strong>：ik原生<strong>内置中文词库</strong>，总共有27万多条，<strong>会按照该文件中的词语去分词</strong></li><li><strong><code>quantifier.dic</code></strong>：<strong>单位</strong>相关的词</li><li><strong><code>suffix.dic</code></strong>：<strong>后缀</strong>相关的词</li><li><strong><code>surname.dic</code></strong>：中国<strong>姓氏</strong></li><li><strong><code>stopword.dic</code></strong>：<strong>英文停用词</strong>，停用词会在<strong>分词时被干掉</strong>，<strong>不会建立在倒排索引中</strong></li></ul><p>可通过在<strong><code>IKAnalyzer.cfg.xml</code></strong>配置文件中通过修改<strong><code>&lt;entry key=&quot;ext_dict&quot;&gt;&lt;/entry&gt;</code></strong>配置内容<strong>扩展自己的词库</strong>，<strong>需重启<code>es</code>才能生效</strong>，还可以通过修改<strong><code>&lt;entry key=&quot;ext_stopwords&quot;&gt;&lt;/entry&gt;</code></strong>配置<strong>扩展停用词</strong>。</p><p>每次在es扩展词典中，手动添加新词语，添加完都要重启es才能生效，非常麻烦，且es是分布式的，可能有数百个节点，不能每次都一个一个节点上面去修改。<strong><code>IKAnalyzer.cfg.xml</code></strong>配置文件中可通过<strong><code>&lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt;</code></strong>和<strong><code>&lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt;</code></strong>配置支持<strong>远程扩展字典</strong>。</p><h4 id="高亮显示"><a href="#高亮显示" class="headerlink" title="高亮显示"></a>高亮显示</h4><p>搜索中经常需要对<strong>搜索关键字</strong>做<strong>高亮显示</strong>，ES默认通过添加<strong><code>&lt;em&gt;&lt;/em&gt;</code></strong>标签，在HTML中会变成红色，指定的field中若包含了搜索词，就会在那个field文本中，对搜索词进行红色高亮显示。<strong><code>highlight</code></strong>中的field必须跟<strong><code>query</code></strong>中field一一<strong>对齐</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT /news_website/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"这是我写的第一篇文章"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"大家好，这是我写的第一篇文章，特别喜欢这个文章门户网站！！！"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /news_website/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;<span class="string">"title"</span>: <span class="string">"文章"</span>&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123;</span><br><span class="line">    <span class="string">"fields"</span>: &#123;<span class="string">"title"</span>: &#123;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /news_website/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"title"</span>: <span class="string">"文章"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"content"</span>: <span class="string">"文章"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123;</span><br><span class="line">    <span class="string">"fields"</span>: &#123;<span class="string">"title"</span>: &#123;&#125;,<span class="string">"content"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认的<strong><code>highlight</code></strong>为<strong><code>plain highlight</code></strong>即<strong><code>lucene highlight</code></strong>，在<strong><code>mapping</code></strong>中设置<strong><code>index_options</code></strong>为<strong><code>offsets</code></strong>使用<strong><code>posting highlight</code></strong>。在<strong><code>mapping</code></strong>中设置<strong><code>term_vector</code></strong>为<strong><code>term_vector</code></strong>使用<strong><code>fast verctor highlight</code></strong>，对<strong>大于<code>1mb</code>的<code>field</code>性能更高</strong>。也可通过在查询时<strong>强制使用某种<code>highlighter</code></strong>。</p><p>一般情况下用<strong><code>plain highlight</code></strong>也就足够了，不需要做其他额外设置，若对高亮性能要求很高，可尝试启用<strong><code>posting highlight</code></strong>，若<strong><code>field</code>值特别大超过了<code>1M</code></strong>，则可用<strong><code>fast vector highlight</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">PUT /news_website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"title"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>&#125;,</span><br><span class="line">      <span class="string">"content"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">        <span class="string">"index_options"</span>: <span class="string">"offsets"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /news_website</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"title"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>&#125;,</span><br><span class="line">      <span class="string">"content"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">        <span class="string">"term_vector"</span>: <span class="string">"with_positions_offsets"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /news_website/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"content"</span>: <span class="string">"文章"</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123;</span><br><span class="line">    <span class="string">"fields"</span>: &#123;<span class="string">"content"</span>: &#123;<span class="string">"type"</span>: <span class="string">"plain"</span>&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /news_website/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"content"</span>: <span class="string">"文章"</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123; <span class="comment">// 设置高亮html标签，默认是&lt;em&gt;标签</span></span><br><span class="line">    <span class="string">"pre_tags"</span>: [<span class="string">"&lt;span color='red'&gt;"</span>],</span><br><span class="line">    <span class="string">"post_tags"</span>: [<span class="string">"&lt;/span&gt;"</span>],</span><br><span class="line">    <span class="string">"fields"</span>: &#123;<span class="string">"content"</span>: &#123;<span class="string">"type"</span>: <span class="string">"plain"</span>&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"content"</span>: <span class="string">"文章"</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"highlight"</span>: &#123;</span><br><span class="line">    <span class="string">"fields"</span>: &#123;</span><br><span class="line">      <span class="string">"content"</span>: &#123;</span><br><span class="line">        <span class="string">"fragment_size"</span>: <span class="number">150</span>,<span class="comment">// 设置要显示出来的fragment文本长度，默认100</span></span><br><span class="line">        <span class="string">"number_of_fragments"</span>: <span class="number">3</span> <span class="comment">// 指定显示高亮fragment文本片段个数</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">用一个大家容易理解的SQL语法来解释，如：<span class="function">select <span class="title">count</span><span class="params">(*)</span> from table group by column。那么group by column分组后的每组数据就是bucket。对每个分组执行的<span class="title">count</span><span class="params">(*)</span>就是metric。</span></span><br></pre></td></tr></table></figure><h4 id="聚合搜索"><a href="#聚合搜索" class="headerlink" title="聚合搜索"></a>聚合搜索</h4><p><strong><code>bucket</code></strong>就是一个<strong>聚合搜索时的数据分组</strong>，<strong><code>metric</code></strong>就是对<strong>一个<code>bucket</code>数据执行的统计分析</strong>，<strong><code>metric</code></strong>有<strong>求和</strong>，<strong>最大值</strong>，<strong>最小值</strong>，<strong>平均值</strong>等<strong>多种统计</strong>。如<strong><code>select count(*) from table group by column</code></strong>其中<strong><code>group by column</code></strong>分组后的<strong>每组数据就是<code>bucket</code></strong>，每个分组执行的<strong><code>count(*)</code></strong>就是<strong><code>metric</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PUT /cars</span><br><span class="line">&#123;<span class="string">"mappings"</span>:&#123;<span class="string">"properties"</span>:&#123;<span class="string">"price"</span>:&#123;<span class="string">"type"</span>:<span class="string">"long"</span>&#125;,<span class="string">"color"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"brand"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"model"</span>:&#123;<span class="string">"type"</span>:<span class="string">"keyword"</span>&#125;,<span class="string">"sold_date"</span>:&#123;<span class="string">"type"</span>:<span class="string">"date"</span>&#125;,<span class="string">"remark"</span>:&#123;<span class="string">"type"</span>:<span class="string">"text"</span>,<span class="string">"analyzer"</span>:<span class="string">"ik_max_word"</span>&#125;&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">POST /cars/_bulk</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">258000</span>,<span class="string">"color"</span>:<span class="string">"金色"</span>,<span class="string">"brand"</span>:<span class="string">"大众"</span>,<span class="string">"model"</span>:<span class="string">"大众迈腾"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-10-28"</span>,<span class="string">"remark"</span>:<span class="string">"大众中档车"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">123000</span>,<span class="string">"color"</span>:<span class="string">"金色"</span>,<span class="string">"brand"</span>:<span class="string">"大众"</span>,<span class="string">"model"</span>:<span class="string">"大众速腾"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-11-05"</span>,<span class="string">"remark"</span>:<span class="string">"大众神车"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">239800</span>,<span class="string">"color"</span>:<span class="string">"白色"</span>,<span class="string">"brand"</span>:<span class="string">"标志"</span>,<span class="string">"model"</span>:<span class="string">"标志508"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-05-18"</span>,<span class="string">"remark"</span>:<span class="string">"标志品牌全球上市车型"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">148800</span>,<span class="string">"color"</span>:<span class="string">"白色"</span>,<span class="string">"brand"</span>:<span class="string">"标志"</span>,<span class="string">"model"</span>:<span class="string">"标志408"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-07-02"</span>,<span class="string">"remark"</span>:<span class="string">"比较大的紧凑型车"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">1998000</span>,<span class="string">"color"</span>:<span class="string">"黑色"</span>,<span class="string">"brand"</span>:<span class="string">"大众"</span>,<span class="string">"model"</span>:<span class="string">"大众辉腾"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-08-19"</span>,<span class="string">"remark"</span>:<span class="string">"大众最让人肝疼的车"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">218000</span>,<span class="string">"color"</span>:<span class="string">"红色"</span>,<span class="string">"brand"</span>:<span class="string">"奥迪"</span>,<span class="string">"model"</span>:<span class="string">"奥迪A4"</span>,<span class="string">"sold_date"</span>:<span class="string">"2021-11-05"</span>,<span class="string">"remark"</span>:<span class="string">"小资车型"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">489000</span>,<span class="string">"color"</span>:<span class="string">"黑色"</span>,<span class="string">"brand"</span>:<span class="string">"奥迪"</span>,<span class="string">"model"</span>:<span class="string">"奥迪A6"</span>,<span class="string">"sold_date"</span>:<span class="string">"2022-01-01"</span>,<span class="string">"remark"</span>:<span class="string">"政府专用？"</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;&#125;&#125;</span><br><span class="line">&#123;<span class="string">"price"</span>:<span class="number">1899000</span>,<span class="string">"color"</span>:<span class="string">"黑色"</span>,<span class="string">"brand"</span>:<span class="string">"奥迪"</span>,<span class="string">"model"</span>:<span class="string">"奥迪A 8"</span>,<span class="string">"sold_date"</span>:<span class="string">"2022-02-12"</span>,<span class="string">"remark"</span>:<span class="string">"很贵的大A6。。。"</span>&#125;</span><br></pre></td></tr></table></figure><p>根据color<strong>分组统计销售数量</strong>，只执行聚合分组，ES中<strong>最基础的聚合</strong>为<strong><code>terms</code></strong>，相当于SQL中的count，ES中默认为分组数据做排序，使用的是<strong><code>doc_count</code></strong>数据执行<strong>降序排列</strong>。可使用<strong><code>_key</code></strong>元数据根据分组后的<strong>字段数据</strong>执行不同的排序方案，也可根据<strong><code>_count</code></strong>元数据，根据分组后的统计值<strong>执行不同的排序方案</strong>。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"group_by_color"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"color"</span>,</span><br><span class="line">        <span class="string">"order"</span>: &#123;<span class="string">"_count"</span>: <span class="string">"desc"</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先根据color执行<strong>聚合分组</strong>，在此分组的基础上，对<strong>组内数据执行聚合统计</strong>，组内数据的聚合统计就是<strong><code>metric</code></strong>，同样<strong>可执行排序</strong>，因为组内有聚合统计，且对统计数据给予了命名<code>avg_by_price</code>，所以可根据该<strong>聚合统计数据字段名执行排序逻辑</strong>。<strong><code>size</code>可设置为<code>0</code></strong>，表示<strong>不返回文档只返回聚合之后的数据</strong>，<strong>提高查询速度</strong>，若需要这些文档也可按照实际情况进行设置。对聚合统计数据进行排序，若有多层<strong><code>aggs</code></strong>执行<strong>下钻聚合</strong>时也可<strong>根据最内层聚合数据执行排序</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"group_by_color"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"color"</span>,</span><br><span class="line">        <span class="string">"order"</span>: &#123;<span class="string">"avg_by_price"</span>: <span class="string">"asc"</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"avg_by_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"group_by_color"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"color"</span>&#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"group_by_brand"</span>: &#123;</span><br><span class="line">          <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"brand"</span>,<span class="string">"order"</span>: &#123;<span class="string">"avg_by_price"</span>: <span class="string">"desc"</span>&#125;&#125;,</span><br><span class="line">          <span class="string">"aggs"</span>: &#123;<span class="string">"avg_by_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先根据color聚合分组，在组内根据brand再次聚合分组，这种操作可称为<strong>下钻分析</strong>，<strong><code>aggs</code></strong>若定义比较多，则会感觉语法格式混乱，aggs语法格式有一个相对固定的结构，<strong><code>aggs</code>可嵌套定义也可水平定义</strong>。<strong>嵌套定义称为下钻分析</strong>，<strong>水平定义</strong>就是<strong>平铺多个分组方式</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /index_name/type_name/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"定义分组名称"</span>: &#123;</span><br><span class="line">      <span class="string">"分组策略如：terms、avg、sum"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"根据哪一个字段分组"</span>,</span><br><span class="line">        <span class="string">"其他参数"</span>: <span class="string">""</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"分组名称1"</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">"分组名称2"</span>: &#123;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>统计不同color中的最大和最小价格、总价，聚合分析最常用的种类就是<strong>统计数量</strong>，<strong>最大</strong>，<strong>最小</strong>，<strong>平均</strong>，<strong>总计</strong>等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"group_by_color"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"color"</span>&#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"max_price"</span>: &#123;<span class="string">"max"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"min_price"</span>: &#123;<span class="string">"min"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;,</span><br><span class="line">        <span class="string">"sum_price"</span>: &#123;<span class="string">"sum"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET cars/_search  <span class="comment">// 统计不同品牌汽车中价格排名最高的车型</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"group_by_brand"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123;<span class="string">"field"</span>: <span class="string">"brand"</span>&#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;</span><br><span class="line">        <span class="string">"top_car"</span>: &#123;</span><br><span class="line">          <span class="string">"top_hits"</span>: &#123;</span><br><span class="line">            <span class="string">"size"</span>: <span class="number">1</span>,<span class="comment">// 取组内多少条数据，默认为10</span></span><br><span class="line">            <span class="string">"sort"</span>: [&#123;<span class="string">"price"</span>: &#123;<span class="string">"order"</span>: <span class="string">"desc"</span>&#125;&#125;], <span class="comment">// 组内使用什么字段什么规则排序，默认使用_doc的asc规则排序</span></span><br><span class="line">            <span class="string">"_source"</span>: &#123;<span class="string">"includes"</span>: [<span class="string">"model"</span>,<span class="string">"price"</span>]&#125; <span class="comment">// 结果中包含document中的哪些字段，默认包含全部字段</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>histogram</code>区间统计</strong>类似<strong><code>terms</code></strong>，也是用于<strong><code>bucket</code>分组操作</strong>，是根据一个field实现<strong>数据区间分组</strong>。如以100万为一个范围，统计不同范围内车辆销售量和平均价格。使用<strong><code>histogram</code>聚合</strong>时field指定价格字段price，区间范围是100万，此时ES会将price价格区间划分为： <strong><code>[0, 1000000), [1000000, 2000000), [2000000, 3000000)</code></strong>等依次类推。在划分区间同时<strong><code>histogram</code></strong>会类似<strong><code>terms</code></strong>进行<strong>数据数量统计</strong>，可通过<strong>嵌套<code>aggs</code></strong>对聚合分组后的组内数据做<strong>再次聚合分析</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"histogram_by_price"</span>: &#123;</span><br><span class="line">      <span class="string">"histogram"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"price"</span>,</span><br><span class="line">        <span class="string">"interval"</span>: <span class="number">1000000</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;<span class="string">"avg_by_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>date_histogram</code></strong>区间分组可对<strong><code>date</code>类型</strong>的field执行<strong>区间聚合分组</strong>，若以月为单位，统计不同月份汽车销售数量及销售总金额。此时可使用<strong><code>date_histogram</code></strong>实现聚合分组，其中field来指定用于聚合分组的字段，<strong><code>interval</code></strong>指定<strong>区间范围</strong>，可选值有<strong><code>year</code></strong>、<strong><code>quarter</code></strong>、<strong><code>month</code></strong>、<strong><code>week</code></strong>、<strong><code>day</code></strong>、<strong><code>hour</code></strong>、<strong><code>minute</code></strong>、<strong><code>second</code></strong>，<strong><code>format</code></strong>指定<strong>日期格式化</strong>，<strong><code>min_doc_count</code></strong>指定<strong>每个区间最少document</strong>，若不指定默认为0，当区间范围内没有document时，也会显示bucket分组，<strong><code>extended_bounds</code></strong>指定<strong>起始时间</strong>和<strong>结束时间</strong>，若不指定<strong>默认使用字段中日期最小值</strong>和<strong>最大值</strong>作为起始和结束时间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"histogram_by_date"</span>: &#123;</span><br><span class="line">      <span class="string">"date_histogram"</span>: &#123;</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"sold_date"</span>,</span><br><span class="line">        <span class="string">"interval"</span>: <span class="string">"month"</span>, <span class="comment">// 7.X之后使用calendar_interval，指定区间范围</span></span><br><span class="line">        <span class="string">"format"</span>: <span class="string">"yyyy-MM-dd"</span>,<span class="comment">// 指定日期格式化</span></span><br><span class="line">        <span class="string">"min_doc_count"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="string">"extended_bounds"</span>: &#123;<span class="string">"min"</span>: <span class="string">"2021-01-01"</span>,<span class="string">"max"</span>: <span class="string">"2022-12-31"</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;<span class="string">"sum_by_price"</span>: &#123;<span class="string">"sum"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>聚合统计数据时，有时需要<strong>对比部分数据和总体数据</strong>，如统计某品牌车辆平均价格和所有车辆平均价格。<strong><code>global</code></strong>是用于定义一个<strong>全局<code>bucket</code></strong>，该<strong><code>bucket</code></strong>会<strong>忽略<code>query</code></strong>的条件，检索所有document进行对应的聚合统计。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"brand"</span>: <span class="string">"大众"</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"volkswagen_of_avg_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;, <span class="comment">// 统计某品牌车辆平均价格</span></span><br><span class="line">    <span class="string">"all_avg_price"</span>: &#123; <span class="comment">// 所有车辆平均价格</span></span><br><span class="line">      <span class="string">"global"</span>: &#123;&#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;<span class="string">"all_of_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter也可和aggs组合使用，实现相对复杂的过滤聚合分析，filter的范围决定了其过滤的范围，将filter放在aggs内部，代表该过滤器<strong>只对<code>query</code>搜索得到的结果执行<code>filter</code>过滤</strong>。若filter放在aggs外部，过滤器则会过滤所有数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search <span class="comment">// filter和aggs组合使用，实现相对复杂的过滤聚合分析</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"constant_score"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: &#123;<span class="string">"range"</span>: &#123;<span class="string">"price"</span>: &#123;<span class="string">"gte"</span>: <span class="number">100000</span>,<span class="string">"lte"</span>: <span class="number">500000</span>&#125;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;<span class="string">"avg_by_price"</span>: &#123;<span class="string">"avg"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /cars/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"brand"</span>: <span class="string">"大众"</span>&#125;&#125;,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"count_last_year"</span>: &#123; <span class="comment">// 12M/M表示12个月，1y/y表示1年，d表示天</span></span><br><span class="line">      <span class="string">"filter"</span>: &#123;<span class="string">"range"</span>: &#123;<span class="string">"sold_date"</span>: &#123;<span class="string">"gte"</span>: <span class="string">"now-12M"</span>&#125;&#125;&#125;,</span><br><span class="line">      <span class="string">"aggs"</span>: &#123;<span class="string">"sum_of_price_last_year"</span>: &#123;<span class="string">"sum"</span>: &#123;<span class="string">"field"</span>: <span class="string">"price"</span>&#125;&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据建模"><a href="#数据建模" class="headerlink" title="数据建模"></a>数据建模</h4><p>如下设计一个用户document数据类型，其中包含一个<strong>地址数据的数组</strong>，该设计方式相对复杂，但在管理数据时更加的灵活。但也有<strong>明显的缺陷</strong>，针对<strong>地址数据</strong>做数据<strong>搜索时</strong>，经常会<strong>搜索出不必要的数据</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"login_name"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">      <span class="string">"age "</span>: &#123;<span class="string">"type"</span>: <span class="string">"short"</span>&#125;,</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"properties"</span>: &#123;</span><br><span class="line">          <span class="string">"province"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">          <span class="string">"city"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">          <span class="string">"street"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /user_index/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"login_name"</span>: <span class="string">"jack"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">"address"</span>: [</span><br><span class="line">    &#123;<span class="string">"province"</span>: <span class="string">"北京"</span>,<span class="string">"city"</span>: <span class="string">"北京"</span>,<span class="string">"street"</span>: <span class="string">"枫林三路"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"province"</span>: <span class="string">"天津"</span>,<span class="string">"city"</span>: <span class="string">"天津"</span>,<span class="string">"street"</span>: <span class="string">"华夏路"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">PUT /user_index/_doc/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"login_name"</span>: <span class="string">"rose"</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">21</span>,</span><br><span class="line">  <span class="string">"address"</span>: [</span><br><span class="line">    &#123;<span class="string">"province"</span>: <span class="string">"河北"</span>,<span class="string">"city"</span>: <span class="string">"廊坊"</span>,<span class="string">"street"</span>: <span class="string">"燕郊经济开发区"</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"province"</span>: <span class="string">"天津"</span>,<span class="string">"city"</span>: <span class="string">"天津"</span>,<span class="string">"street"</span>: <span class="string">"华夏路"</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">GET /user_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"address.province"</span>: <span class="string">"北京"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"address.city"</span>: <span class="string">"天津"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可使用<strong><code>nested object</code></strong>作为<strong>地址数组</strong>的集体类型可解决上述问题，且搜索时需要<strong>使用<code>nested</code>对应的搜索语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">PUT /user_index</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"login_name"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">      <span class="string">"age "</span>: &#123;<span class="string">"type"</span>: <span class="string">"short"</span>&#125;,</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"nested"</span>,</span><br><span class="line">        <span class="string">"properties"</span>: &#123;</span><br><span class="line">          <span class="string">"province"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">          <span class="string">"city"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">          <span class="string">"street"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /user_index/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"bool"</span>: &#123;<span class="string">"must"</span>: [</span><br><span class="line">        &#123;<span class="string">"nested"</span>: &#123;<span class="string">"path"</span>: <span class="string">"address"</span>,</span><br><span class="line">            <span class="string">"query"</span>: &#123;</span><br><span class="line">              <span class="string">"bool"</span>: &#123;<span class="string">"must"</span>: [</span><br><span class="line">                  &#123;<span class="string">"match"</span>: &#123;<span class="string">"address.province"</span>: <span class="string">"北京"</span>&#125;&#125;,</span><br><span class="line">                  &#123;<span class="string">"match"</span>: &#123;<span class="string">"address.city"</span>: <span class="string">"北京"</span>&#125;&#125;</span><br><span class="line">                ]&#125;</span><br><span class="line">            &#125;&#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>普通数组</strong>数据在ES中会<strong>被扁平化处理</strong>，<strong><code>nested object</code>数据</strong>类型ES在保存时<strong>不会扁平化处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// 普通数组</span></span><br><span class="line">  <span class="string">"login_name"</span> : <span class="string">"jack"</span>,</span><br><span class="line">  <span class="string">"address.province"</span> : [ <span class="string">"北京"</span>, <span class="string">"天津"</span> ],</span><br><span class="line">  <span class="string">"address.city"</span> : [ <span class="string">"北京"</span>, <span class="string">"天津"</span> ]</span><br><span class="line">  <span class="string">"address.street"</span> : [ <span class="string">"枫林三路"</span>, <span class="string">"华夏路"</span> ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// nested数据</span></span><br><span class="line">&#123; </span><br><span class="line">  <span class="string">"login_name"</span> : <span class="string">"jack"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"address.province"</span> : <span class="string">"北京"</span>,</span><br><span class="line">  <span class="string">"address.city"</span> : <span class="string">"北京"</span>，</span><br><span class="line">  <span class="string">"address.street"</span> : <span class="string">"枫林三路"</span></span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"address.province"</span> : <span class="string">"天津"</span>,</span><br><span class="line">  <span class="string">"address.city"</span> : <span class="string">"天津"</span>,</span><br><span class="line">  <span class="string">"address.street"</span> : <span class="string">"华夏路"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>nested object</code></strong>建模<strong>缺点</strong>是采取的是<strong>类似冗余数据</strong>的方式，将多个数据放在一起，维护成本比较高，<strong>每次更新需要重新索引整个对象</strong>，包括根对象和嵌套对象。ES提供<strong>类似关系型数据库</strong>中<strong><code>Join</code></strong>的实现，使用Join数据类型实现父子关系，从而分离两个文档对象。</p><p>更新父文档无需重新索引整个子文档，子文档被新增，更改和删除也不会影响到父文档和其他子文档，父子关系元数据映射，用于确保查询时高性能，但是有一个限制<strong>父子数据包括映射其关联关系的元数据必须存在于一个<code>shard</code>中</strong> ，搜索父子关系数据时，不用跨分片性能高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">PUT my_blogs</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"blog_comments_relation"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"join"</span>, <span class="comment">// 指明join类型</span></span><br><span class="line">        <span class="string">"relations"</span>: &#123;<span class="comment">// 声明父子关系</span></span><br><span class="line">          <span class="string">"blog"</span>: <span class="string">"comment"</span><span class="comment">// blog为父文档名称，comment为子文档名称</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"content"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>&#125;,</span><br><span class="line">      <span class="string">"title"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT my_blogs/_doc/blog1 <span class="comment">// blog1为父文档id</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Learning Elasticsearch"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"learning ELK is happy"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;<span class="comment">// 声明文档类型</span></span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"blog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT my_blogs/_doc/blog2 <span class="comment">// blog2为父文档id</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Learning Hadoop"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"learning Hadoop"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;<span class="comment">// 声明文档类型</span></span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"blog"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父文档和子文档必须存在相同的分片上, 当指定文档时候，必须指定它的父文档ID</span></span><br><span class="line">PUT my_blogs/_doc/comment1?routing=blog1 <span class="comment">// 使用route参数来保证，分配到相同分片</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"comment"</span>: <span class="string">"I am learning ELK"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="string">"parent"</span>: <span class="string">"blog1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT my_blogs/_doc/comment2?routing=blog2 <span class="comment">// comment2为子文档id，blog2为父文档id</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"comment"</span>: <span class="string">"I like Hadoop!!!!!"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="string">"parent"</span>: <span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT my_blogs/_doc/comment3?routing=blog2</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"comment"</span>: <span class="string">"Hello Hadoop"</span>,</span><br><span class="line">  <span class="string">"username"</span>: <span class="string">"Bob"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="string">"parent"</span>: <span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">POST my_blogs/_search <span class="comment">// 查询所有文档</span></span><br><span class="line">&#123;&#125;</span><br><span class="line">GET my_blogs/_doc/blog2 <span class="comment">// 根据父文档ID查看</span></span><br><span class="line">POST my_blogs/_search <span class="comment">// parent_id查询，返回所有相关子文档</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"parent_id"</span>: &#123;<span class="string">"type"</span>: <span class="string">"comment"</span>,<span class="string">"id"</span>: <span class="string">"blog2"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST my_blogs/_search <span class="comment">// has_child查询，返回父文档</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"has_child"</span>: &#123;</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"comment"</span>,</span><br><span class="line">      <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"username"</span>: <span class="string">"Jack"</span>&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST my_blogs/_search <span class="comment">// has_parent查询，返回相关的子文档</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"has_parent"</span>: &#123;</span><br><span class="line">      <span class="string">"parent_type"</span>: <span class="string">"blog"</span>,</span><br><span class="line">      <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"title"</span>: <span class="string">"Learning Hadoop"</span>&#125;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT my_blogs/_doc/comment3?routing=blog2 <span class="comment">//更新子文档不会影响到父文档</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"comment"</span>: <span class="string">"Hello Hadoop??"</span>,</span><br><span class="line">  <span class="string">"blog_comments_relation"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"comment"</span>,</span><br><span class="line">    <span class="string">"parent"</span>: <span class="string">"blog2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件系统数据"><a href="#文件系统数据" class="headerlink" title="文件系统数据"></a>文件系统数据</h4><p>若需要使用<strong>文件路径搜索</strong>内容，只需要为其中的字段定义一个特殊的<strong><code>path_hierarchy</code></strong>分词器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">PUT /codes</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"settings"</span>: &#123;<span class="string">"analysis"</span>: &#123;<span class="string">"analyzer"</span>: &#123;<span class="string">"path_analyzer"</span>: &#123;<span class="string">"tokenizer"</span>: <span class="string">"path_hierarchy"</span>&#125;&#125;&#125;&#125;,</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"fileName"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>&#125;,</span><br><span class="line">      <span class="string">"path"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"path_analyzer"</span>,</span><br><span class="line">        <span class="string">"fields"</span>: &#123;<span class="string">"keyword"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"standard"</span>&#125;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"content"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"standard"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /codes/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"fileName"</span>: <span class="string">"HelloWorld.java"</span>,</span><br><span class="line">  <span class="string">"path"</span>: <span class="string">"/com/eleven/first"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"package com.eleven.first; public class HelloWorld &#123; // some code... &#125;"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /codes/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"path"</span>: <span class="string">"/com"</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /codes/_analyze</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"/a/b/c/d"</span>,</span><br><span class="line">  <span class="string">"field"</span>: <span class="string">"path"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /codes/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"path.keyword"</span>: <span class="string">"/com"</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /codes/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;<span class="string">"bool"</span>: &#123;<span class="string">"should"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"path"</span>: <span class="string">"/com"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"path.keyword"</span>: <span class="string">"/com/eleven"</span>&#125;&#125;</span><br><span class="line">  ]&#125;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Scroll分页"><a href="#Scroll分页" class="headerlink" title="Scroll分页"></a>Scroll分页</h4><p>使用<strong><code>from</code></strong>和<strong><code>size</code></strong>方式查询<code>1W</code>以内的数据都OK，但若数据比较多时会出现性能问题。ES做了一个限制<strong>不允许查询<code>1W</code>条以后的数据</strong>。若要查询1W条以后的数据，可使用ES中提供的<strong><code>scroll</code>游标</strong>来查询。</p><p>在进行大量分页时，每次分页都需要将要查询数据进行重新排序，这样非常浪费性能。使用<strong><code>scroll</code>游标</strong>是<strong>将要用的数据一次性排序好</strong>，然后<strong>分批取出</strong>。性能要比from + size好得多，使用scroll查询后，排序后的数据会<strong>保持一定的时间</strong>，后续分页查询都从该快照取数据。响应结果中会返回<code>_scroll_id</code>，第二次查询直接使用<code>_scroll_id</code>来查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search?scroll=<span class="number">1</span>m  <span class="comment">// 让排序的数据保持1分钟</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"广州长沙张三"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"address"</span>,<span class="string">"name"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line">GET _search/scroll?scroll=<span class="number">1</span>m</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"scroll_id"</span>: <span class="string">"FGluY2x1ZGVfY29udGV4dF91dWlkDXF1ZXJ5QW5kRmV0Y2gBFnJKUnZmX1pIVGVpM05TWDBQX0JJeXcAAAAAAAaeghZDUkdZN1FJNVIwYUJhYUxvNWVxd1Rn"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SQL支持"><a href="#SQL支持" class="headerlink" title="SQL支持"></a>SQL支持</h4><p><strong><code>ES SQL</code></strong>允许执行<strong>类<code>SQL</code>查询</strong>，<strong><code>REST</code>接口</strong>、<strong>命令行</strong>或<strong><code>JDBC</code></strong>等都可使用<strong><code>SQL</code></strong>来进行<strong>数据检索</strong>和<strong>数据聚合</strong>。特点：</p><ul><li><strong>本地集成</strong>：ES SQL是<strong>专门为<code>ES</code>构建</strong>的，每个SQL查询都根据<strong>底层存储</strong>对相关节点有效执行</li><li><strong>无额外要求</strong>：不依赖其他硬件、进程、运行时库，<strong>可直接运行在<code>ES</code>集群上</strong></li><li><strong>轻量且高效</strong>：像SQL那样简洁、高效地完成查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_expr [, ...]</span><br><span class="line">[ <span class="keyword">FROM</span> table_name ]</span><br><span class="line">[ <span class="keyword">WHERE</span> condition ]</span><br><span class="line">[ <span class="keyword">GROUP</span> <span class="keyword">BY</span> grouping_element [, ...] ]</span><br><span class="line">[ <span class="keyword">HAVING</span> condition]</span><br><span class="line">[ <span class="keyword">ORDER</span> <span class="keyword">BY</span> expression [ <span class="keyword">ASC</span> | <span class="keyword">DESC</span> ] [, ...] ]</span><br><span class="line">[ <span class="keyword">LIMIT</span> [ <span class="keyword">count</span> ] ]</span><br><span class="line">[ <span class="keyword">PIVOT</span> ( aggregation_expr <span class="keyword">FOR</span> <span class="keyword">column</span> <span class="keyword">IN</span> ( <span class="keyword">value</span> [ [ <span class="keyword">AS</span> ] <span class="keyword">alias</span> ] [, ...] ) ) ]</span><br></pre></td></tr></table></figure><p>目前<strong><code>FROM</code>只支持单表</strong>，<strong>不支持<code>JOIN</code></strong>、<strong>不支持较复杂的子查询</strong>，<strong><code>format</code></strong>表示<strong>指定返回数据类型</strong>，支持的类型有<strong>逗号分隔<code>csv</code>、<code>json</code>、制表符分隔符<code>tsv</code>、<code>txt</code>、<code>yaml</code></strong>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET /_sql?format=json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"SELECT * FROM es_db limit 1"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /_sql/translate // 将SQL转换为DSL</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"SELECT * FROM es_db limit 1"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /_sql?format=json // field_exp匹配字段，constant_exp匹配常量表达式，</span><br><span class="line">&#123; <span class="comment">// 检索address包含广州和name中包含张三的用户</span></span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"select * from es_db where MATCH(address, '广州') or MATCH(name, '张三') limit 10"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /_sql?format=txt // 统计分组</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query"</span>: <span class="string">"select age, count(*) as age_cnt from es_db group by age"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="模本搜索"><a href="#模本搜索" class="headerlink" title="模本搜索"></a>模本搜索</h4><p>模板搜索可将一些搜索进行模板化，每次执行该搜索就直接调用模板，传入一些参数即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">GET /cars/_search/template <span class="comment">// 简单定义参数并传递</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"&#123;&#123;kw&#125;&#125;"</span>&#125;&#125;,</span><br><span class="line">    <span class="string">"size"</span>: <span class="string">"&#123;&#123;size&#125;&#125;"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"params"</span>: &#123;<span class="string">"kw"</span>: <span class="string">"大众"</span>,<span class="string">"size"</span>: <span class="number">2</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">GET cars/_search/template <span class="comment">// toJson方式传递参数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: <span class="string">""</span><span class="string">"&#123; "</span>query<span class="string">": &#123; "</span>match<span class="string">": &#123;&#123;#toJson&#125;&#125;parameter&#123;&#123;/toJson&#125;&#125; &#125;&#125;"</span><span class="string">""</span>,</span><br><span class="line">  <span class="string">"params"</span>: &#123;</span><br><span class="line">    <span class="string">"parameter"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"大众"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET cars/_search/template <span class="comment">// json方式传递参数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;<span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;</span><br><span class="line">        <span class="string">"remark"</span>: <span class="string">"&#123;&#123;#join delimiter=' '&#125;&#125;kw&#123;&#123;/join delimiter=' '&#125;&#125;"</span></span><br><span class="line">  &#125;&#125;&#125;,</span><br><span class="line">  <span class="string">"params"</span>: &#123;<span class="string">"kw"</span>: [<span class="string">"大众"</span>,<span class="string">"标致"</span>]&#125;</span><br><span class="line">&#125;</span><br><span class="line">GET cars/_search/template</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;<span class="string">"query"</span>: &#123;<span class="string">"range"</span>: &#123;<span class="string">"price"</span>: &#123;</span><br><span class="line">          <span class="string">"gte"</span>: <span class="string">"&#123;&#123;start&#125;&#125;"</span>,</span><br><span class="line">          <span class="string">"lte"</span>: <span class="string">"&#123;&#123;end&#125;&#125;&#123;&#123;^end&#125;&#125;200000&#123;&#123;/end&#125;&#125;"</span> <span class="comment">// 默认值定义</span></span><br><span class="line">  &#125;&#125;&#125;&#125;,</span><br><span class="line">  <span class="string">"params"</span>: &#123;<span class="string">"start"</span>: <span class="number">100000</span>,<span class="string">"end"</span>: <span class="number">140000</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>记录<code>template</code>实现重复调用</strong>可使用<strong><code>Mustache</code></strong>语言作为<strong>搜索请求预处理</strong>，它提供模板<strong>通过键值对</strong>来替换模板中的变量。把<strong>脚本存储在本地磁盘中</strong>，默认位置为<strong><code>elasticsearch\config\scripts</code></strong>，通过引用脚本名称进行使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">POST _scripts/test <span class="comment">// test为脚本id</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"script"</span>: &#123;</span><br><span class="line">    <span class="string">"lang"</span>: <span class="string">"mustache"</span>, <span class="comment">// 指定mustache语言</span></span><br><span class="line">    <span class="string">"source"</span>: &#123;<span class="string">"query"</span>: &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"&#123;&#123;kw&#125;&#125;"</span>&#125;&#125;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET cars/_search/template</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"test"</span>, <span class="comment">// 指定调用脚本的id</span></span><br><span class="line">  <span class="string">"params"</span>: &#123;<span class="string">"kw"</span>: <span class="string">"大众"</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">DELETE _scripts/test <span class="comment">// 删除脚本id为test的脚本</span></span><br></pre></td></tr></table></figure><h4 id="suggest-search"><a href="#suggest-search" class="headerlink" title="suggest search"></a>suggest search</h4><p><strong><code>suggest search(completion suggest)</code></strong>即<strong>建议搜索</strong>或<strong>搜索建议</strong>，也可叫做自动完成，类似百度中搜索联想提示功能。ES实现<strong><code>suggest</code></strong>时<strong>性能非常高</strong>，其构建的<strong>不是倒排索引也不是正排索引</strong>，是纯粹用于<strong>前缀搜索</strong>的一种特殊数据结构，且会全部放在内存中，所以suggest search进行前缀搜索提示性能是非常高。需要使用suggest时候，<strong>必须在定义<code>index</code>时为其<code>mapping</code>指定开启<code>suggest</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">PUT /movie</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;<span class="string">"title"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">        <span class="string">"fields"</span>: &#123;<span class="string">"suggest"</span>: &#123;<span class="string">"type"</span>: <span class="string">"completion"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>&#125;&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"content"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /movie/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"西游记电影系列"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"西游记之月光宝盒将与2021年进行......"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT /movie/_doc/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"西游记文学系列"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"某知名网络小说作家已经完成了大话西游同名小说的出版"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT /movie/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"西游记之大话西游手游"</span>,</span><br><span class="line">  <span class="string">"content"</span>: <span class="string">"网易游戏近日出品了大话西游经典IP的手游，正在火爆内测中"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /movie/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"suggest"</span>: &#123;</span><br><span class="line">    <span class="string">"my-suggest"</span>: &#123;</span><br><span class="line">      <span class="string">"prefix"</span>: <span class="string">"西游记"</span>,</span><br><span class="line">      <span class="string">"completion"</span>: &#123;<span class="string">"field"</span>: <span class="string">"title.suggest"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="地理位置搜索"><a href="#地理位置搜索" class="headerlink" title="地理位置搜索"></a>地理位置搜索</h4><p>ES支持<strong>地理位置搜索</strong>和<strong>聚合分析</strong>，可实现<strong>在指定区域内搜索数据</strong>、<strong>搜索指定地点附近的数据</strong>、<strong>聚合分析指定地点附近的数据</strong>等操作。ES中若使用地理位置搜索，必须提供一个特殊的字段类型<strong><code>geo_point</code></strong>，用于指定地理位置坐标点。</p><p>新增一个基于<strong><code>geo_point</code></strong>类型数据，可使用多种方式。多种类型描述<strong><code>geo_point</code></strong>类型字段时，在<strong>搜索数据时显示格式和录入格式是统一的</strong>。<strong>任何数据描述</strong>的<strong><code>geo_point</code></strong>类型字段，<strong>都适用地理位置搜索</strong>。</p><p>数据范围要求<strong>纬度范围</strong>是<code>-90~90</code>之间，<strong>经度范围</strong>是<code>-180~180</code>之间，经纬度数据都是<strong>浮点数</strong>或<strong>数字串</strong>，最大精度为<strong>小数点后7位</strong>。<strong><code>latitude</code></strong>：<strong>纬度</strong>、<strong><code>longitude</code></strong>：<strong>经度</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel_app</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"pin"</span>: &#123;<span class="string">"type"</span>: <span class="string">"geo_point"</span>&#125;,</span><br><span class="line">      <span class="string">"name"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /hotel_app/_doc/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"七天连锁酒店"</span>,</span><br><span class="line">  <span class="string">"pin"</span>: &#123;<span class="string">"lat"</span>: <span class="number">40.12</span>,<span class="string">"lon"</span>: -<span class="number">71.34</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">PUT /hotel_app/_doc/<span class="number">2</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"维多利亚大酒店"</span>,</span><br><span class="line">  <span class="string">"pin"</span>: <span class="string">"40.99, -70.81"</span></span><br><span class="line">&#125;</span><br><span class="line">PUT /hotel_app/_doc/<span class="number">3</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">" 红树林宾馆"</span>,</span><br><span class="line">  <span class="string">"pin"</span>: [<span class="number">40</span>,-<span class="number">73.81</span>] <span class="comment">// 基于数组：依次定义经度、纬度，不推荐使用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>矩形范围搜索</strong>传入<strong><code>top_left</code></strong>和<strong><code>bottom_right</code></strong>坐标点是有固定要求的，<strong><code>top_left</code></strong>即<strong>从西北向东南</strong>，<strong><code>Bottom_right</code></strong>即<strong>从东南向西北</strong>，且<strong><code>top_left</code>纬度应大于<code>bottom_right</code></strong>，<strong><code>top_left</code>经度应小于<code>bottom_right</code></strong>。<strong>多边形范围搜索</strong>对传入若干点坐标顺序没有任何要求，只要传入若干地理位置坐标点，即可形成多边形。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel_app/_doc/_search <span class="comment">// 矩形搜索</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"geo_bounding_box"</span>: &#123;</span><br><span class="line">      <span class="string">"pin"</span>: &#123;</span><br><span class="line">        <span class="string">"top_left"</span>: &#123;<span class="string">"lat"</span>: <span class="number">41.73</span>,<span class="string">"lon"</span>: -<span class="number">74.1</span>&#125;,</span><br><span class="line">        <span class="string">"bottom_right"</span>: &#123;<span class="string">"lat"</span>: <span class="number">40.01</span>,<span class="string">"lon"</span>: -<span class="number">70.12</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /hotel_app/_doc/_search <span class="comment">// 多边形搜索</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"geo_polygon"</span>: &#123;</span><br><span class="line">      <span class="string">"pin"</span>: &#123;</span><br><span class="line">        <span class="string">"points"</span>: [</span><br><span class="line">          &#123;<span class="string">"lat"</span>: <span class="number">40.73</span>,<span class="string">"lon"</span>: -<span class="number">74.1</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"lat"</span>: <span class="number">40.01</span>,<span class="string">"lon"</span>: -<span class="number">71.12</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"lat"</span>: <span class="number">50.56</span>,<span class="string">"lon"</span>: -<span class="number">90.58</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Distance距离的单位，常用米m和千米km，建议使用<strong><code>filter</code></strong>来过滤<strong><code>geo_point</code></strong>数据，因为<strong><code>geo_point</code></strong>数据相关度评分计算比较耗时。使用query来搜索geo_point数据效率相对会慢一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel_app/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: &#123;</span><br><span class="line">        <span class="string">"geo_distance"</span>: &#123;<span class="string">"distance"</span>: <span class="string">"200km"</span>,<span class="string">"pin"</span>: &#123;<span class="string">"lat"</span>: <span class="number">40</span>,<span class="string">"lon"</span>: -<span class="number">70</span>&#125;&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET hotel_app/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"geo_distance"</span>: &#123;</span><br><span class="line">      <span class="string">"distance"</span>: <span class="string">"90km"</span>,</span><br><span class="line">      <span class="string">"pin"</span>: &#123;<span class="string">"lat"</span>: <span class="number">40.55</span>,<span class="string">"lon"</span>: -<span class="number">71.12</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>聚合统计某位置附近区域内的数据</strong>，unit是距离单位，常用单位有米m，千米km，英里mi，<strong><code>distance_type</code></strong>是统计算法：<strong><code>sloppy_arc</code>默认算法</strong>、<strong><code>arc</code>最高精度</strong>、<strong><code>plane</code>最高效率</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel_app/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"agg_by_pin"</span>: &#123;</span><br><span class="line">      <span class="string">"geo_distance"</span>: &#123;</span><br><span class="line">        <span class="string">"distance_type"</span>: <span class="string">"arc"</span>,</span><br><span class="line">        <span class="string">"field"</span>: <span class="string">"pin"</span>,</span><br><span class="line">        <span class="string">"origin"</span>: &#123;<span class="string">"lat"</span>: <span class="number">40</span>,<span class="string">"lon"</span>: -<span class="number">70</span>&#125;,</span><br><span class="line">        <span class="string">"unit"</span>: <span class="string">"mi"</span>,</span><br><span class="line">        <span class="string">"ranges"</span>: [ <span class="comment">// 聚合统计分别距离某位置80英里，300英里，1000英里范围内的数据数量</span></span><br><span class="line">          &#123;<span class="string">"to"</span>: <span class="number">80</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"from"</span>: <span class="number">80</span>,<span class="string">"to"</span>: <span class="number">300</span>&#125;,</span><br><span class="line">          &#123;<span class="string">"from"</span>: <span class="number">300</span>,<span class="string">"to"</span>: <span class="number">1000</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;分值计算&quot;&gt;&lt;a href=&quot;#分值计算&quot; class=&quot;headerlink&quot; title=&quot;分值计算&quot;&gt;&lt;/a&gt;分值计算&lt;/h4&gt;&lt;p&gt;首先根据用户&lt;strong&gt;&lt;code&gt;query&lt;/code&gt;条件&lt;/strong&gt;，过滤出包含指定&lt;strong&gt;&lt;co
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="ELK" scheme="https://yaoyinglong.github.io/categories/Cloud/ELK/"/>
    
    
      <category term="ElasticSearch" scheme="https://yaoyinglong.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch基础</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch%E5%9F%BA%E7%A1%80/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/ELK/ElasticSearch基础/</id>
    <published>2021-12-21T16:00:00.000Z</published>
    <updated>2021-12-26T03:58:37.596Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>Elasticsearch</code></strong>是用<strong>Java<code>开发</code></strong>的当前<strong>最流行</strong>的<strong>开源</strong>的企业级搜索引擎，能够达到<strong>实时搜索</strong>，<strong>稳定</strong>，<strong>可靠</strong>，<strong>快速</strong>，安装使用方便。<strong><code>Elasticsearch</code></strong>是基于<strong><code>Lucene</code></strong>的，Lucene可被认为是迄今为止<strong>最先进</strong>、<strong>性能最好</strong>、<strong>功能最全</strong>的<strong>搜索引擎框架</strong>。</p><p><strong><code>Lucene</code></strong>是一个<strong>全文检索框架</strong>，通过程序扫描文本中每个单词，<strong>针对单词建立索引</strong>，并保存该<strong>单词在文本中的位置</strong>、以及<strong>出现次数</strong>。用户查询时通过之前建立好的索引来查询，将索引中单词对应文本位置、出现次数返给用户，有了具体文本位置，则可将具体内容读取出来。</p><p><strong><code>Lucene</code></strong>基于<strong>倒排索引</strong>，对于使用的<strong>数据库主键索引</strong>是<strong>通过主键定位到某条数据</strong>，而<strong>倒排索引刚好相反</strong>，是<strong>通过数据对应到主键</strong>。</p><p><img src="../../../../../images/DB/ES/分词倒排索引.png" alt></p><p>但想要使用Lucene，必须使用Java来作为开发语言并将其直接集成到应用中，且Lucene配置及使用非常复杂，需要深入了解检索相关知识来理解其工作原理。</p><ul><li>只能在Java项目中使用，且要<strong>以jar包方式直接集成项目</strong>中</li><li>使用非常复杂，<strong>创建索引</strong>和<strong>搜索索引代码繁杂</strong></li><li><strong>不支持集群环境</strong>，索引数据不同步，不支持大型项目</li><li><strong>索引数据不能太多</strong>，索引库和应用所在同一个服务器，共同占用硬盘，共用空间少</li></ul><h4 id="ES与Solr对比"><a href="#ES与Solr对比" class="headerlink" title="ES与Solr对比"></a>ES与Solr对比</h4><p>单纯对<strong>已有数据</strong>进行搜索时<strong><code>Solr</code>更快</strong>，当<strong>实时建立索引</strong>时Solr会产生<strong><code>IO</code>阻塞</strong>，查询性能较差，该情况下<strong><code>Elasticsearch</code></strong>具有明显优势。</p><ul><li><strong><code>Solr</code>利用<code>Zookeeper</code>进行分布式管理</strong>，而<strong><code>Elasticsearch</code>自带分布式协调管理</strong>功能</li><li><strong><code>Solr</code>支持更多格式数据</strong>，如JSON、XML、CSV，而<strong><code>Elasticsearch</code>仅支持<code>JSON</code>文件格式</strong></li><li>Solr在<strong>传统搜索应用</strong>中表现好于Elasticsearch，但在处理<strong>实时搜索应用</strong>时效率明显低于Elasticsearch</li><li>Solr是传统搜索应用的有力解决方案，但Elasticsearch更适用于<strong>新兴实时搜索</strong>应用。</li></ul><h4 id="ES与关系型数据库"><a href="#ES与关系型数据库" class="headerlink" title="ES与关系型数据库"></a>ES与关系型数据库</h4><table><thead><tr><th>关系型数据库</th><th>Database数据库</th><th>Table表</th><th>ROW行</th><th>Column列</th></tr></thead><tbody><tr><td><strong>Elasticsearch</strong></td><td><strong>Index索引库</strong></td><td><strong>Type类型</strong></td><td><strong>Document文档</strong></td><td><strong>Field字段</strong></td></tr></tbody></table><h4 id="ES核心概念"><a href="#ES核心概念" class="headerlink" title="ES核心概念"></a>ES核心概念</h4><h5 id="索引index"><a href="#索引index" class="headerlink" title="索引index"></a>索引index</h5><p>一个索引就是一个拥有几分相似特征的<strong>文档集合</strong>，相当于关系型数据库中的database，一个索引由一个名字来标识，<strong>必须全部是小写字母</strong>，且当要对对应于该索引中的文档进行索引<strong>搜索</strong>、<strong>更新</strong>和<strong>删除</strong>时，都要使用该名字。</p><h5 id="Mapping映射"><a href="#Mapping映射" class="headerlink" title="Mapping映射"></a>Mapping映射</h5><p>ElasticSearch中的<strong>Mapping映射用来定义一个文档</strong>，Mapping是<strong>处理数据的方式</strong>和<strong>规则</strong>方面做一些限制，如某个<strong>字段</strong>的<strong>数据类型</strong>、<strong>默认值</strong>、<strong>分词器</strong>、<strong>是否被索引</strong>等，这都是映射里面可设置的。</p><h5 id="Field字段"><a href="#Field字段" class="headerlink" title="Field字段"></a>Field字段</h5><p>相当于是数据表的字段或列</p><h5 id="Type字段类型"><a href="#Type字段类型" class="headerlink" title="Type字段类型"></a>Type字段类型</h5><p><strong>每个字段</strong>都应该有一个对应的<strong>类型</strong>，如<strong><code>Text</code></strong>、<strong><code>Keyword</code></strong>、<strong><code>Byte</code></strong>等</p><h5 id="Document文档"><a href="#Document文档" class="headerlink" title="Document文档"></a>Document文档</h5><p>一个文档是一个<strong>可被索引的基础信息单元</strong>，类似一条记录，<strong>文档以<code>JSON</code>格式来表示</strong></p><h5 id="Cluster集群"><a href="#Cluster集群" class="headerlink" title="Cluster集群"></a>Cluster集群</h5><p>一个集群由<strong>一个</strong>或<strong>多个</strong>节点组织在一起，<strong>共同持有整个数据</strong>，并<strong>一起提供索引和搜索功能</strong></p><h5 id="Node节点"><a href="#Node节点" class="headerlink" title="Node节点"></a>Node节点</h5><p>一个节点即集群中一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能，一个节点<strong>可通过配置集群名称的方式来加入一个指定的集群</strong>。默认每个节点都会被安排加入到一个叫做<strong><code>elasticsearch</code></strong>的集群中。</p><p><strong>一个集群中可拥有任意多个节点</strong>，且若当前网络中没有运行任何<strong><code>Elasticsearch</code></strong>节点，这时启动一个节点，会默认<strong>创建并加入</strong>一个叫做<strong><code>elasticsearch</code></strong>的集群。</p><h5 id="分片"><a href="#分片" class="headerlink" title="分片"></a>分片</h5><p><strong>一个索引</strong>可存储<strong>超出单个结点硬件限制</strong>的大量数据，如一个具有10亿文档的索引占据1TB磁盘空间，而任一节点都没有这样大的磁盘空间，或者单个节点处理搜索请求，响应太慢，为了解决这个问题，Elasticsearch提供了将索引划分成多份的能力，每一份就是一个分片。</p><p>当<strong>创建索引时可指定分片数量</strong>，<strong>每个分片</strong>本身也是一个<strong>功能完善且独立的索引</strong>，该分片可被放置到集群中任何节点上，<strong>分片允许水平分割扩展内容容量</strong>，允许在分片之上进行<strong>分布式</strong>并行操作，进而提高<strong>性能</strong>和<strong>吞吐量</strong>，每个<strong>分片怎样分布</strong>，<strong>文档怎样聚合</strong>回搜索请求，完全<strong>由<code>Elasticsearch</code>管理</strong>，对于用户透明。</p><h5 id="副本"><a href="#副本" class="headerlink" title="副本"></a>副本</h5><p>在一个网络环境中，失败随时都可能发生，在某个分片或节点处于离线状态，或由于任何原因消失，该情况下有一个<strong>故障转移机制</strong>是非常有用且强烈推荐。为此<strong><code>Elasticsearch</code>允许创建分片的一份或多份拷贝</strong>，这些拷贝叫做<strong>副本分片</strong>或直接叫<strong>副本</strong>。</p><p>扩展搜索量和吞吐量，搜索可在所有的副本上并行运行，<strong>每个索引可被分成多个分片</strong>，<strong>一个索引有零个或者多个副本</strong>， 一旦设置了副本，每个索引就有了<strong>主分片</strong>和<strong>副本分片</strong>，<strong>分片和副本数量可在索引创建时指定</strong>，在索引创建后，<strong>可在任何时候动态地改变副本数量</strong>，但<strong>不能改变分片数量</strong>。</p><h4 id="ES安装"><a href="#ES安装" class="headerlink" title="ES安装"></a>ES安装</h4><p><strong>ES不能使用<code>root</code>用户来启动</strong>，必须使用普通用户来安装启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">groupadd elasticsearch # 创建elasticsearch用户组</span><br><span class="line">useradd eleven # 创建eleven用户</span><br><span class="line">passwd eleven  # 给eleven用户设置密码为eleven</span><br><span class="line">usermod -G elasticsearch eleven # 将用户eleven添加到elasticsearch用户组</span><br><span class="line"></span><br><span class="line">mkdir -p /usr/local/es # 创建es文件夹</span><br><span class="line">chown -R eleven /usr/local/es/elasticsearch-7.6.1 # 修改owner为eleven用户</span><br><span class="line"></span><br><span class="line">visudo # 使用root用户执行visudo命令然后为es用户添加权限</span><br><span class="line">eleven ALL=(ALL) ALL # 在root ALL=(ALL) ALL 一行下面添加eleven用户</span><br></pre></td></tr></table></figure><p>修改<strong><code>elasticsearch.yml</code></strong>，可通过修改<strong><code>jvm.options</code></strong>配置文件调整JVM参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cluster.name:</span> <span class="string">eleven-es</span><span class="comment"># 集群名称</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node1</span><span class="comment"># 节点名称</span></span><br><span class="line"><span class="attr">path.data:</span> <span class="string">/usr/local/es/elasticsearch-7.6.1/data</span> <span class="comment"># 数据目录</span></span><br><span class="line"><span class="attr">path.logs:</span> <span class="string">/usr/local/es/elasticsearch-7.6.1/log</span>  <span class="comment"># 日志目录</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["IP1",</span> <span class="string">"IP2"</span><span class="string">,</span> <span class="string">"IP3"</span><span class="string">]</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["节点1名称",</span> <span class="string">"节点2名称"</span><span class="string">,</span> <span class="string">"节点3名称"</span><span class="string">]</span></span><br><span class="line"><span class="attr">bootstrap.system_call_filter:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">bootstrap.memory_lock:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p>ES需要大量创建索引文件，需要大量打开系统文件，所以需要解除linux系统当中打开文件最大数目限制，不然ES启动会抛错：<code>max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/security/limits.conf</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br></pre></td></tr></table></figure><p>若出现<code>max number of threads [1024] for user [es] likely too low, increase to at least [4096]</code>错误信息，是由于<strong>普通用户启动线程数限制最大可创建线程数太小</strong>，无法创建本地线程问题。</p><h5 id="安装IK分词器"><a href="#安装IK分词器" class="headerlink" title="安装IK分词器"></a>安装IK分词器</h5><p>使用Elasticsearch来进行<strong>中文分词</strong>，需要单独给Elasticsearch安装<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" rel="external nofollow noopener noreferrer" target="_blank"><strong><code>IK</code>分词器插件</strong></a>，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/es/elasticsearch-7.6.1/plugins/ik</span><br><span class="line">cd /usr/local/es/elasticsearch-7.6.1/plugins/ik</span><br><span class="line">unzip elasticsearch-analysis-ik-7.6.1.zip</span><br></pre></td></tr></table></figure><p>ES的默认分词设置是<strong><code>standard</code>单字拆分</strong>，可使用<strong>IK分词器</strong>的<strong><code>ik_smart</code></strong>和<strong><code>ik_max_word</code></strong>分词方式，<strong><code>ik_smart</code></strong>会做<strong>最粗粒度拆分</strong>，<strong><code>ik_max_word</code></strong>会将文本做<strong>最细粒度拆分</strong>。修改默认分词方法，修改<strong><code>eleven_index</code>索引</strong>的默认分词为<strong><code>ik_max_word</code></strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">PUT /school_index</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"index"</span>: &#123;</span><br><span class="line">            <span class="string">"analysis.analyzer.default.type"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"analyzer"</span>: <span class="string">"standard"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"中华人民共和国"</span></span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"中华人民共和国"</span></span><br><span class="line">&#125;</span><br><span class="line">POST _analyze</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"analyzer"</span>: <span class="string">"ik_max_word"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"中华人民共和国"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES基础"><a href="#ES基础" class="headerlink" title="ES基础"></a>ES基础</h4><p>ES是<strong>面向文档<code>Document</code></strong>的，<strong>使用<code>JSON</code>作为文档序列化格式</strong>，这其<strong>可存储整个对象或文档<code>Document</code></strong>，不仅仅是存储，还会<strong>索引<code>index</code>每个文档内容使之可被搜索</strong>。ES中可对<strong>文档而非成行成列的数据进行索引</strong>、<strong>搜索</strong>、<strong>排序</strong>、<strong>过滤</strong>。</p><p><strong>条件查询</strong>：<strong><code>GET /索引名称/类型/_search?q=字段1:字段值，字段2:字段值</code></strong>，条件之间是通过<strong>逗号分隔多个条件</strong>，如<strong>分页</strong>、<strong>排序</strong>、<strong>输出指定字段</strong>等通过<strong><code>&amp;</code>符号分隔</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET _cat/nodes?v<span class="comment">// 查看集群节点状态</span></span><br><span class="line">GET _cat/health?v<span class="comment">// 查看集群健康状态</span></span><br><span class="line"></span><br><span class="line">GET /es_db <span class="comment">// 查询索引：GET /索引名称</span></span><br><span class="line">PUT /es_db<span class="comment">// 创建索引：PUT /索引名称</span></span><br><span class="line">DELETE /es_db<span class="comment">// 删除索引：DELETE /索引名称</span></span><br><span class="line">PUT /es_db/_doc/<span class="number">1</span> <span class="comment">// 添加文档：PUT /索引名称/类型/id</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"张三"</span>,</span><br><span class="line">  <span class="string">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">"address"</span>: <span class="string">"广州天河公园"</span>,</span><br><span class="line">  <span class="string">"remark"</span>: <span class="string">"java developer"</span></span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_doc/<span class="number">1</span> <span class="comment">// 查询文档：GET /索引名称/类型/id</span></span><br><span class="line">DELETE /es_db/_doc/<span class="number">1</span><span class="comment">// 删除文档：DELETE /索引名称/类型/id</span></span><br><span class="line">GET /es_db/_doc/_search <span class="comment">// 查询当前类型中的所有文档：GET /索引名称/类型/_search</span></span><br><span class="line">GET /es_db/_doc/_search?q=age:<span class="number">28</span> <span class="comment">// 条件查询：GET /索引名称/类型/_search?q=*:***</span></span><br><span class="line">GET /es_db/_doc/_search?q=age[<span class="number">25</span> TO <span class="number">26</span>] <span class="comment">// 范围查询：GET /索引名称/类型/_search?q=***[** TO **]</span></span><br><span class="line">GET /es_db/_doc/_mget <span class="comment">// 根据多个ID进行批量查询：GET /索引名称/类型/_mget</span></span><br><span class="line">&#123;<span class="string">"ids"</span>:[<span class="string">"1"</span>,<span class="string">"2"</span>]&#125;</span><br><span class="line">GET /es_db/_doc/_search?q=age:&lt;=<span class="number">28</span> <span class="comment">// 查询小于等于：GET /索引名称/类型/_search?q=age:&lt;=**</span></span><br><span class="line">GET /es_db/_doc/_search?q=age:&gt;=<span class="number">28</span> <span class="comment">// 查询大于等于：GET /索引名称/类型/_search?q=age:&gt;=**</span></span><br><span class="line">GET /es_db/_doc/_search?q=age[<span class="number">25</span> TO <span class="number">26</span>]&amp;from=<span class="number">0</span>&amp;size=<span class="number">1</span> <span class="comment">// 分页查询：from=*&amp;size=*</span></span><br><span class="line">GET /es_db/_doc/_search?_source=name,age <span class="comment">// 对查询结果只输出某些字段：_search?_source=字段,字段</span></span><br><span class="line">GET /es_db/_doc/_search?q=age[<span class="number">25</span> TO <span class="number">26</span>],sex:<span class="number">0</span> <span class="comment">// 多条件查询</span></span><br><span class="line">GET /es_db/_doc/_search?sort=age:desc <span class="comment">// 对查询结果排序sort=字段:desc/asc</span></span><br></pre></td></tr></table></figure><p><strong><code>ES</code></strong>是<strong>基于<code>Restful API</code></strong>和所有客户端交互都是使用<strong><code>JSON</code>格式</strong>数据，其他所有程序语言都可使用RESTful API，通过9200端口的与ES进行通信，GET查询、PUT添加、POST修改、DELETE删除，<strong><code>POST</code></strong>和<strong><code>PUT</code></strong>都能起到<strong>创建/更新</strong>的作用：</p><ul><li><strong><code>PUT</code>需要对一个具体的资源进行操作</strong>，也就是要确定id才能进行<strong>更新/创建</strong>，而<strong><code>POST</code>可针对整个资源集合进行操作</strong>，若<strong>不写<code>id</code>则由<code>ES</code>生成一个唯一<code>id</code>进行创建新文档</strong>，过填了id则针对该id文档进行<strong>创建/更新</strong></li><li><strong><code>PUT</code>会将<code>JSON</code>数据都进行替换，<code>POST</code>只会更新相同字段的值</strong></li><li><strong><code>PUT</code>与<code>DELETE</code>都是幂等性操作</strong>，不论操作多少次结果都一样</li></ul><h4 id="文档批量操作"><a href="#文档批量操作" class="headerlink" title="文档批量操作"></a>文档批量操作</h4><p>通过<strong><code>_mget</code></strong>的API来实现<strong>批量操作多个文档</strong>，可通过<strong><code>_id</code></strong>批量获取<strong>不同<code>index</code>和<code>type</code>的数据</strong>，若查询的是同一个文档可<strong>将<code>index</code>和<code>type</code>放到URL上</strong>。且可<strong>通过<code>_source</code>指定查询字段</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET _mget</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"es_db_1"</span>,</span><br><span class="line">      <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_index"</span>: <span class="string">"es_db"</span>,</span><br><span class="line">      <span class="string">"_type"</span>: <span class="string">"_doc"</span>,</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_doc/_mget?_source=age,name</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"docs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"_id"</span>: <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>批量</strong>对文档进行<strong>写操作</strong>是通过<strong><code>_bulk</code></strong>的API来实现的，通过<strong><code>_bulk</code></strong>写操作文档，一般至少有两行参数，第一行参数为指定<strong>操作的类型</strong>及<strong>操作的对象</strong>如index、type、id，第二行参数为<strong>操作的数据</strong>。<strong><code>actionName</code></strong>表示<strong>操作类型</strong>，主要有<strong><code>create</code></strong>、<strong><code>index</code></strong>、<strong><code>delete</code></strong>、<strong><code>update</code></strong>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"actionName"</span>: &#123;</span><br><span class="line">    <span class="attr">"_index"</span>: <span class="string">"indexName"</span>,</span><br><span class="line">    <span class="attr">"_type"</span>: <span class="string">"typeName"</span>,</span><br><span class="line">    <span class="attr">"_id"</span>: <span class="string">"id"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"field1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">  <span class="attr">"field2"</span>: <span class="string">"value2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">POST _bulk<span class="comment">// 批量创建文档</span></span><br><span class="line">&#123;<span class="string">"create"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"eleven 1"</span>,<span class="string">"content"</span>:<span class="string">"eleven 666"</span>,<span class="string">"tags"</span>:[<span class="string">"java"</span>,<span class="string">"面向对象"</span>],<span class="string">"create_time"</span>:<span class="number">1554015482530</span>&#125;</span><br><span class="line">&#123;<span class="string">"create"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"eleven 2"</span>,<span class="string">"content"</span>:<span class="string">"eleven NB"</span>,<span class="string">"tags"</span>:[<span class="string">"java"</span>,<span class="string">"面向对象"</span>],<span class="string">"create_time"</span>:<span class="number">1554015482530</span>&#125;</span><br><span class="line"></span><br><span class="line">POST _bulk<span class="comment">// 普通创建或全量替换index，若原文档不存在则创建，若存在则替换</span></span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"title"</span>:<span class="string">"eleven 3"</span>,<span class="string">"content"</span>:<span class="string">"eleven3 666"</span>,<span class="string">"tags"</span>:[<span class="string">"java"</span>,<span class="string">"面向对象"</span>],<span class="string">"create_time"</span>:<span class="number">1554015482530</span>&#125;</span><br><span class="line">&#123;<span class="string">"index"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"title"</span>:<span class="string">"eleven 4"</span>,<span class="string">"content"</span>:<span class="string">"eleven4 NB"</span>,<span class="string">"tags"</span>:[<span class="string">"java"</span>,<span class="string">"面向对象"</span>],<span class="string">"create_time"</span>:<span class="number">1554015482530</span>&#125;</span><br><span class="line"></span><br><span class="line">POST _bulk<span class="comment">// 批量修改update</span></span><br><span class="line">&#123;<span class="string">"update"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"doc"</span>:&#123;<span class="string">"title"</span>:<span class="string">"ES大法必修内功"</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"update"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"doc"</span>:&#123;<span class="string">"create_time"</span>:<span class="number">1554018421008</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">POST _bulk<span class="comment">// 批量删除delete</span></span><br><span class="line">&#123;<span class="string">"delete"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">3</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">"delete"</span>:&#123;<span class="string">"_index"</span>:<span class="string">"article"</span>,<span class="string">"_type"</span>:<span class="string">"_doc"</span>,<span class="string">"_id"</span>:<span class="number">4</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="乐观并发控制"><a href="#乐观并发控制" class="headerlink" title="乐观并发控制"></a>乐观并发控制</h4><p>在数据库领域中，有<strong>悲观并发控制</strong>和<strong>乐观并发控制</strong>两种方法来<strong>确保并发更新</strong>不丢失数据，<strong>悲观并发控制</strong>被<strong>关系型数据库</strong>广泛使用，阻塞访问资源以防止冲突；<strong>ES使用乐观并发控制</strong>，若源数据在读写当中被修改，更新将会失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /db_index/_doc/<span class="number">1</span>?if_seq_no=<span class="number">1</span>&amp;if_primary_term=<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"Jack"</span>,</span><br><span class="line">  <span class="string">"sex"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"age"</span>: <span class="number">25</span>,</span><br><span class="line">  <span class="string">"book"</span>: <span class="string">"Spring Boot 入门到精通2"</span>,</span><br><span class="line">  <span class="string">"remark"</span>: <span class="string">"hello world2"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ES老版本</strong>是使用<strong><code>version</code></strong>字段来乐观并发控制，新版本7.x使用<strong><code>if_seq_no</code>=文档版本号&amp;<code>if_primary_term</code>=文档位置</strong>来乐观并发控制。每当Primary Shard发生重新分配时如<strong>重启</strong>、<strong><code>Primary</code>选举</strong>等，<strong><code>_primary_term</code>会递增<code>1</code></strong>，<strong><code>_primary_term</code></strong>主要是用来<strong>恢复数据时</strong>处理当多个文档的<strong><code>_seq_no</code>一样</strong>时的冲突。如当一个shard宕机了，<code>raplica</code>需要用到最新的数据，就会根据<code>_primary_term</code>和<code>_seq_no</code>两个值来拿到最新的document。</p><h3 id="文档映射"><a href="#文档映射" class="headerlink" title="文档映射"></a>文档映射</h3><p>ES中映射可以分为<strong>动态映射</strong>和<strong>静态映射</strong>，在关系数据库中，需要事先在数据库下创建数据表，并创建表字段、类型、长度、主键等，最后才能基于表插入数据。而Elasticsearch中<strong>不需要定义<code>Mapping</code>映射</strong>，在<strong>文档写入ES时</strong>，会<strong>根据文档字段自动识别类型</strong>，该机制为<strong>动态映射</strong>；也可<strong>事先定义好映射</strong>，包含文档的各<strong>字段类型</strong>、<strong>分词器</strong>等，该方式为<strong>静态映射</strong>。</p><ul><li><strong>字符串</strong>：<strong><code>string</code>类型包含<code>text</code>和<code>keyword</code></strong></li><li><strong><code>text</code></strong>：该类型被用来<strong>索引长文本</strong>，创建索引前会<strong>将文本进行分词</strong>，转化为词的组合，建立索引；允许es来检索这些词，<strong>不能用来排序和聚合</strong></li><li><strong><code>keyword</code></strong>：该类型<strong>不能分词</strong>，可被用来<strong>检索过滤</strong>、<strong>排序</strong>和<strong>聚合</strong>，<strong>不可用<code>text</code>进行分词模糊检索</strong></li><li><strong>数值型</strong>：<strong><code>long</code></strong>、<strong><code>integer</code></strong>、<strong><code>short</code></strong>、<strong><code>byte</code></strong>、<strong><code>double</code></strong>、<strong><code>float</code></strong></li><li><strong>日期型</strong>：<strong><code>date</code></strong></li><li><strong>布尔型</strong>：<strong><code>boolean</code></strong></li></ul><p><img src="../../../../../images/DB/ES/动态映射规则.png" alt="动态映射规则"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_mapping <span class="comment">// 获取文档映射</span></span><br><span class="line">    </span><br><span class="line">PUT /es_db2 <span class="comment">// 创建索引且设置文档映射</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"properties"</span>: &#123;</span><br><span class="line">      <span class="string">"name"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"keyword"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"store"</span>: <span class="keyword">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"sex"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"store"</span>: <span class="keyword">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"age"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"integer"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"store"</span>: <span class="keyword">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"book"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"store"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"analyzer"</span>: <span class="string">"ik_smart"</span>, <span class="comment">// 指定text类型的ik分词器</span></span><br><span class="line">        <span class="string">"search_analyzer"</span>: <span class="string">"ik_smart"</span> <span class="comment">// 指定text类型的ik分词器</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"address"</span>: &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">        <span class="string">"index"</span>: <span class="keyword">true</span>,</span><br><span class="line">        <span class="string">"store"</span>: <span class="keyword">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若要<strong>推倒现有的映射</strong>，得<strong>重新建立一个静态索引</strong>，然后把之前索引里的数据<strong>导入到新的索引</strong>里，<strong>删除原创建的索引</strong>，<strong>为新索引起个别名</strong>，为原索引名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST _reindex <span class="comment">// 把之前索引里的数据导入到新的索引里</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"source"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"db_index"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"dest"</span>: &#123;</span><br><span class="line">    <span class="string">"index"</span>: <span class="string">"db_index_2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">DELETE /db_index<span class="comment">// 删除原创建的索引</span></span><br><span class="line">PUT /db_index_2/_alias/db_index<span class="comment">// 为新索引起个别名, 为原索引名</span></span><br></pre></td></tr></table></figure><p>   3）删除原创建的索引        </p><p>   4）为新索引起个别名, 为原索引名</p><h3 id="DSL高级查询"><a href="#DSL高级查询" class="headerlink" title="DSL高级查询"></a>DSL高级查询</h3><p><strong><code>Domain Specific Language</code>领域专用语言</strong>，由<strong>叶子查询子句</strong>和<strong>复合查询子句</strong>两种子句组成。DSL查询语言又分为<strong>查询<code>DSL</code></strong>和<strong>过滤<code>DSL</code></strong>。ES中索引的数据都会存储一个<strong><code>_score</code></strong>分值，<strong>分值越高就代表越匹配</strong>，<strong>查询上下文</strong>中不仅要判断查<strong>询条件与文档是否匹配</strong>，且还要关心<strong>相关度</strong>即<strong><code>_score</code></strong>分值，需要根据分值排序；过<strong>滤器上下文</strong>中值关心<strong>查询条件与文档是否匹配</strong>，不计算<strong><code>_score</code></strong>分值，<strong>不关心排序</strong>问题，经常使用过滤器，ES会<strong>自动缓存过滤器内容</strong>。</p><p><img src="../../../../../images/DB/ES/DSL.png" alt></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_doc/_search <span class="comment">// 无查询条件是查询所有，默认查询所有，或使用match_all表示所有</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"match_all"</span>:&#123;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="叶子查询"><a href="#叶子查询" class="headerlink" title="叶子查询"></a>叶子查询</h4><h5 id="模糊匹配"><a href="#模糊匹配" class="headerlink" title="模糊匹配"></a>模糊匹配</h5><p><strong>模糊匹配</strong>主要是针对<strong>文本类型</strong>的字段，文本类型的字段会对<strong>内容进行分词</strong>，<strong>查询时也会对搜索条件进行分词</strong>，然后通过<strong>倒排索引</strong>查找到匹配数据，模糊匹配主要通过<strong><code>match</code></strong>等参数来实现</p><ul><li><strong><code>match</code></strong>：通过<strong>match关键词模糊匹配</strong>条件内容，<strong>需指定字段名</strong>，<strong>会进行分词</strong><ul><li><strong><code>query</code></strong>：<strong>指定匹配的值</strong></li><li><strong><code>operator</code></strong>：<strong>匹配条件类型</strong><ul><li><strong><code>and</code></strong>：条件分词后<strong>都</strong>要匹配</li><li><strong><code>or</code></strong>：条件分词后<strong>有一个</strong>匹配即可，默认为or</li></ul></li><li><strong><code>minmum_should_match</code></strong>：指定<strong>最小匹配数量</strong></li></ul></li><li><strong><code>query_string</code></strong>：和match类似，<strong>可不指定字段</strong>即<strong>所有字段中搜索</strong>，范围更广泛</li><li><strong><code>match_phase</code></strong>：会对输入做<strong>分词</strong>，但<strong>结果中也包含所有分词</strong>，且<strong>顺序一样</strong></li><li><strong><code>prefix</code></strong>：<strong>前缀匹配</strong></li><li><strong><code>regexp</code></strong>：通过<strong>正则表达式</strong>来匹配数据</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"from"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;<span class="comment">// match会根据该字段的分词器，进行分词查询</span></span><br><span class="line">      <span class="string">"address"</span>: <span class="string">"广州"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123; <span class="comment">// 多字段模糊匹配查询</span></span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"长沙"</span>, </span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"address"</span>, <span class="string">"name"</span>] <span class="comment">// address或name字段中匹配到“长沙”</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123; <span class="comment">// 未指定字段条件查询query_string, 含AND与OR条件</span></span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"广州 OR 长沙"</span> <span class="comment">// 所有的字段中只要包含“广州”或“长沙”</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"query_string"</span>: &#123; <span class="comment">// 指定字段条件查询query_string</span></span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"admin AND 长沙"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"name"</span>, <span class="string">"address"</span>] <span class="comment">// name或address匹配admin和长沙</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123; <span class="comment">// ES执行搜索时，默认operator为or</span></span><br><span class="line">    <span class="string">"match"</span>: &#123; <span class="comment">// remark字段包含java或developer词组，则符合搜索条件。</span></span><br><span class="line">      <span class="string">"remark"</span>: <span class="string">"java developer"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"remark"</span>: &#123; <span class="comment">// remark字段包含java和developer词组</span></span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"java developer"</span>,</span><br><span class="line">        <span class="string">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match"</span>: &#123;</span><br><span class="line">      <span class="string">"remark"</span>: &#123; <span class="comment">// 需要remark字段中包含多个搜索词条中的一定比例</span></span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"java architect assistant"</span>,</span><br><span class="line">        <span class="string">"minimum_should_match"</span>: <span class="string">"50%"</span> <span class="comment">// minimum_should_match可使用百分比或固定数字</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>match_phrase</code>短语搜索</strong>，使用短语搜索时和match类似，首先<strong>对搜索条件进行分词</strong>，ES在做分词时除了将数据切分外，还会保留一个<strong>词在整个数据中的下标<code>position</code></strong>。当ES执行match phrase短语搜索时，首先<strong>将搜索条件分词</strong>，然后<strong>在倒排索引中检索数据</strong>，若<strong>搜索条件分词数据</strong>在某个document某个field出现时，则<strong>检查匹配到的单词的<code>position</code>是否连续</strong>，若<strong>不连续则匹配失败</strong>。</p><p>ES对match phrase短语搜索提供了<strong><code>slop</code>参数</strong>，可实现数据在所有匹配结果中，多个单词<strong>距离越近相关度评分越高排序越靠前</strong>，若<strong>当<code>slop</code>移动次数使用完毕还没有匹配成功则无搜索结果</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">GET _search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>: &#123; <span class="comment">// 短语搜索，搜索条件不分词</span></span><br><span class="line">      <span class="string">"remark"</span>: <span class="string">"java assistant"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase"</span>: &#123;</span><br><span class="line">      <span class="string">"remark"</span>: &#123;</span><br><span class="line">        <span class="string">"query"</span>: <span class="string">"java assistant"</span>,</span><br><span class="line">        <span class="string">"slop"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="前缀搜索"><a href="#前缀搜索" class="headerlink" title="前缀搜索"></a>前缀搜索</h5><p>通常针对<strong><code>keyword</code></strong>类型字段即<strong>不分词字段</strong>，<strong><code>keyword</code></strong>类型字段数据大小写敏感，<strong>前缀搜索效率比较低</strong>，且<strong>不计算相关度分数</strong>，<strong>前缀越短效率越低</strong>。若使用前缀搜索，建议使用长前缀，因为前缀搜索需要<strong>扫描完整索引内容</strong>，所以前缀越长相对效率越高。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"prefix"</span>: &#123;</span><br><span class="line">      <span class="string">"f.keyword"</span>: &#123;<span class="string">"value"</span>: <span class="string">"Jav"</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="通配符搜索"><a href="#通配符搜索" class="headerlink" title="通配符搜索"></a>通配符搜索</h5><p>通配符可在<strong>倒排索引</strong>中使用，也可在<strong><code>keyword</code></strong>类型字段中使用。<strong><code>?</code>问号匹配一个任意字符</strong>，<strong><code>*</code>星号匹配<code>0</code>到<code>n</code>个任意字符</strong>。<strong>性能也很低</strong>，也<strong>需要扫描完整索引</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"wildcard"</span>: &#123;</span><br><span class="line">      <span class="string">"f.keyword"</span>: &#123; <span class="string">"value"</span>: <span class="string">"?e*o*"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正则搜索"><a href="#正则搜索" class="headerlink" title="正则搜索"></a>正则搜索</h5><p>可在<strong>倒排索引</strong>或<strong><code>keyword</code></strong>类型字段中使用，<strong>性能很低需要扫描完整索引</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"regexp"</span>: &#123;<span class="string">"f.keyword"</span>: <span class="string">"[A-z].+"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="搜索推荐"><a href="#搜索推荐" class="headerlink" title="搜索推荐"></a>搜索推荐</h5><p>其原理和<strong><code>match phrase</code></strong>类似，先使<strong>用<code>match</code>匹配<code>term</code>数据</strong>即示例中的<code>java</code>，然后在指定<strong><code>slop</code></strong>移动次数范围内<strong>前缀匹配</strong>示例数据<code>sp</code>，<strong><code>max_expansions</code></strong>是用于<strong>指定<code>prefix</code>最多匹配多少个<code>term</code></strong>，超过该数量就不再匹配了。该语法限制只有<strong>最后一个<code>term</code></strong>会执行<strong>前缀搜索</strong>。执行<strong>性能很差</strong>，<strong>最后一个<code>term</code></strong>需要<strong>扫描所有符合<code>slop</code>要求的倒排索引的<code>term</code></strong>。若必须使用一定要使用参数<strong><code>max_expansions</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"match_phrase_prefix"</span>: &#123;</span><br><span class="line">      <span class="string">"f"</span>: &#123;<span class="string">"query"</span>: <span class="string">"java sp"</span>,<span class="string">"slop"</span>: <span class="number">10</span>,<span class="string">"max_expansions"</span>: <span class="number">10</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模糊搜索"><a href="#模糊搜索" class="headerlink" title="模糊搜索"></a>模糊搜索</h5><p>搜索时可能搜索条件文本输入错误，fuzzy技术就是用于解决错误拼写的，英文中很有效但中文中几乎无效，其中<strong><code>fuzziness</code></strong>代表<strong><code>value</code>值<code>word</code>可修改多少个字母来进行拼写错误纠正</strong>，修改字母数量包含字母变更，增加或减少字母。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"fuzzy"</span>: &#123;</span><br><span class="line">      <span class="string">"f"</span>: &#123;<span class="string">"value"</span>: <span class="string">"word"</span>,<span class="string">"fuzziness"</span>: <span class="number">2</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="精确匹配"><a href="#精确匹配" class="headerlink" title="精确匹配"></a>精确匹配</h5><ul><li><strong><code>term</code></strong>：<strong>单个条件相等</strong>，查询字段<strong>映射类型</strong>属于为<strong><code>keyword</code></strong>，<strong>不会被分词</strong></li><li><strong><code>terms</code></strong>：单个字段属于某个值<strong>数组</strong>内的值</li><li><strong><code>range</code></strong>：字段属于某个<strong>范围</strong>内的值<ul><li><strong><code>gte</code></strong>：大于等于</li><li><strong><code>lte</code></strong>：小于等于</li><li><strong><code>gt</code></strong>：大于</li><li><strong><code>lt</code></strong>：小于</li><li><strong><code>now</code></strong>：当前时间</li></ul></li><li><strong><code>exists</code></strong>：某个字段的值<strong>是否存在</strong></li><li><strong><code>ids</code></strong>：<strong>通过ID批量查询</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"term"</span>: &#123; <span class="comment">// term查询不会对字段进行分词查询，会采用精确匹配</span></span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"admin"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;<span class="comment">// 范围查询</span></span><br><span class="line">      <span class="string">"age"</span>: &#123;<span class="string">"gte"</span>: <span class="number">25</span>,<span class="string">"lte"</span>: <span class="number">28</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">POST /es_db/_doc/_search <span class="comment">// 范围、分页、输出字段、综合查询</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"range"</span>: &#123;<span class="comment">// 范围查询</span></span><br><span class="line">      <span class="string">"age"</span>: &#123;<span class="string">"gte"</span>: <span class="number">25</span>,<span class="string">"lte"</span>: <span class="number">28</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"from"</span>: <span class="number">0</span>, <span class="comment">// 分页</span></span><br><span class="line">  <span class="string">"size"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">"_source"</span>: [<span class="string">"name"</span>, <span class="string">"age"</span>, <span class="string">"book"</span>], <span class="comment">// 指定输出字段</span></span><br><span class="line">  <span class="string">"sort"</span>: &#123;<span class="string">"age"</span>: <span class="string">"desc"</span>&#125;<span class="comment">// 排序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><p><strong>组合条件查询</strong>是将<strong>叶子条件查询</strong>语句进行<strong>组合</strong>而形成的一个完整的查询条件，<strong><code>must</code></strong>、<strong><code>filter</code></strong>、<strong><code>shoud</code></strong>、<strong><code>must_not</code></strong>等<strong>子条件</strong>是通过<strong><code>term</code></strong>、<strong><code>terms</code></strong>、<strong><code>range</code></strong>、<strong><code>ids</code></strong>、<strong><code>exists</code></strong>、<strong><code>match</code></strong>等<strong>叶子条件为参数</strong>，当<strong>只有一个搜索条件</strong>时，must等对应的是一个<strong>对象</strong>，当<strong>多个条件</strong>时，对应的是一个<strong>数组</strong>。</p><ul><li><strong><code>bool</code></strong>：各条件之间有<strong><code>and</code></strong>，<strong><code>or</code></strong>或<strong><code>not</code></strong>关系<ul><li><strong><code>must</code></strong>：各个条件<strong>都必须满足</strong>，即各条件是<strong><code>and</code></strong>关系</li><li><strong><code>should</code></strong>：各个条件<strong>有一个满足</strong>即可，即各条件是<strong><code>or</code></strong>关系</li><li><strong><code>must_not</code></strong>：<strong>不满足所有条件</strong>，即各条件是<strong><code>not</code></strong>关系</li><li><strong><code>filter</code></strong>：<strong>不计算相关度评分</strong>，即<strong>不计算<code>_score</code></strong>，<strong>不对结果排序</strong>，效率更高，<strong>查询结果可被缓存</strong></li></ul></li><li><strong><code>constant_score</code></strong>：<strong>不计算相关度评分</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">POST /es_db/_doc/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"filter"</span>: &#123; <span class="comment">// 对数据进行过滤</span></span><br><span class="line">        <span class="string">"term"</span>: &#123;<span class="string">"age"</span>: <span class="number">25</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123; <span class="comment">// 使用should+bool搜索，控制搜索条件的匹配度</span></span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"should"</span>: [ <span class="comment">// 必须匹配java、developer、assistant三个词条中的至少2个</span></span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"java"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"developer"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"assistant"</span>&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"minimum_should_match"</span>: <span class="number">2</span><span class="comment">// 控制搜索条件的匹配度</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES中执行<strong><code>match</code>搜索</strong>时，ES底层通常会<strong>对搜索条件进行底层转换</strong>，来实现最终的搜索结果，若不怕麻烦，<strong>尽量使用转换后的语法执行搜索</strong>，<strong>效率更高</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search<span class="comment">// 转换前</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"match"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"java developer"</span>&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search<span class="comment">// 转换后</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"bool"</span>:&#123;<span class="string">"should"</span>:[&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"java"</span>&#125;&#125;,&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:&#123;<span class="string">"value"</span>:<span class="string">"developer"</span>&#125;&#125;&#125;]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">GET /es_db/_search<span class="comment">// 转换前</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"match"</span>:&#123;<span class="string">"remark"</span>:&#123;<span class="string">"query"</span>:<span class="string">"java developer"</span>,<span class="string">"operator"</span>:<span class="string">"and"</span>&#125;&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search<span class="comment">// 转换后</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"bool"</span>:&#123;<span class="string">"must"</span>:[&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"java"</span>&#125;&#125;,&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:&#123;<span class="string">"value"</span>:<span class="string">"developer"</span>&#125;&#125;&#125;]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">GET /es_db/_search<span class="comment">// 转换前</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"match"</span>:&#123;<span class="string">"remark"</span>:&#123;<span class="string">"query"</span>:<span class="string">"java architect assistant"</span>,<span class="string">"minimum_should_match"</span>:<span class="string">"68%"</span>&#125;&#125;&#125;&#125;</span><br><span class="line">GET /es_db/_search<span class="comment">// 转换后</span></span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"bool"</span>:&#123;<span class="string">"should"</span>:[&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"java"</span>&#125;&#125;,&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"architect"</span>&#125;&#125;,&#123;<span class="string">"term"</span>:&#123;<span class="string">"remark"</span>:<span class="string">"assistant"</span>&#125;&#125;],<span class="string">"minimum_should_match"</span>:<span class="number">2</span>&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="boost权重控制"><a href="#boost权重控制" class="headerlink" title="boost权重控制"></a>boost权重控制</h5><p><strong><code>boost</code>权重控制</strong>一般用于<strong>搜索时相关度排序</strong>使用，将<strong>某字段数据匹配时</strong>相关度<strong>分数增加</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [&#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"java"</span>&#125;&#125;],</span><br><span class="line">      <span class="string">"should"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: &#123;<span class="string">"query"</span>: <span class="string">"developer"</span>,<span class="string">"boost"</span>: <span class="number">3</span>&#125;&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: &#123;<span class="string">"query"</span>: <span class="string">"architect"</span>,<span class="string">"boost"</span>: <span class="number">1</span>&#125;&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="dis-max"><a href="#dis-max" class="headerlink" title="dis_max"></a>dis_max</h5><p><strong><code>dis_max</code></strong>语法是直接<strong>获取搜索多条件</strong>中<strong>单条件<code>query</code>相关度分数最高</strong>的数据，以该数据做<strong>相关度排序</strong>。<strong>基于<code>dis_max</code></strong>实现<strong><code>best fields</code>策略</strong>进行<strong>多字段搜索</strong>，<strong><code>best fields</code>策略</strong>是搜索document中<strong>某个<code>field</code></strong>，<strong>尽可能多的匹配搜索条件</strong>。与之相反的是<strong><code>most fields</code>策略</strong>即<strong>尽可能多的字段匹配到搜索条件</strong>。</p><p><strong><code>best fields</code>策略</strong>优点<strong>是精确匹配</strong>的数据可尽可能排列在<strong>最前端</strong>，且可通过<strong><code>minimum_should_match</code></strong>去除<strong>长尾数据</strong>，避免长尾数据字段对排序结果的影响。<strong>缺点</strong>相对<strong>排序不均匀</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123; </span><br><span class="line">    <span class="string">"dis_max"</span>: &#123; <span class="comment">// 找name字段中rod匹配相关度分数或remark字段中java developer匹配相关度分数,哪个高就使用哪个相关度分数进行结果排序</span></span><br><span class="line">      <span class="string">"queries"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"name"</span>: <span class="string">"rod"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"java developer"</span>&#125;&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>dis_max</code></strong>是将<strong>多个</strong>搜索query条件中<strong>相关度分数最高</strong>的用于结果排序，<strong>忽略其他<code>query</code>分数</strong>，在某些情况下<strong>需要其他query条件中相关度介入最终结果排序</strong>，此时可<strong>使用<code>tie_breaker</code>参数来优化<code>dis_max</code>搜索</strong>。<strong><code>tie_breaker</code></strong>参数表示<strong>将其他<code>query</code>搜索条件相关度分数乘以参数值再参与结果排序</strong>。若不定义<strong><code>tie_breaker</code></strong>参数相当于<strong>参数值为<code>0</code></strong>，故其他query条件的相关度分数被忽略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123; </span><br><span class="line">    <span class="string">"dis_max"</span>: &#123; <span class="comment">// 找name字段中rod匹配相关度分数或remark字段中java developer匹配相关度分数,哪个高就使用哪个相关度分数进行结果排序</span></span><br><span class="line">      <span class="string">"queries"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"name"</span>: <span class="string">"rod"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: <span class="string">"java developer"</span>&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"tie_breaker"</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用<code>multi_match</code>简化<code>dis_max+tie_breaker</code></strong>，ES中相同结果搜索也可使用不同语法语句来实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"dis_max"</span>: &#123;</span><br><span class="line">      <span class="string">"queries"</span>: [</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"name"</span>: <span class="string">"rod"</span>&#125;&#125;,</span><br><span class="line">        &#123;<span class="string">"match"</span>: &#123;<span class="string">"remark"</span>: &#123;<span class="string">"query"</span>: <span class="string">"java assistant"</span>,<span class="string">"boost"</span>: <span class="number">2</span>&#125;&#125;&#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"tie_breaker"</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123;</span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"rod java developer"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [</span><br><span class="line">        <span class="string">"name"</span>,</span><br><span class="line">        <span class="string">"remark^2"</span><span class="comment">// ^n代表权重，相当于"boost":n</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"best_fields"</span>, <span class="comment">// 其中type常用的有best_fields和most_fields</span></span><br><span class="line">      <span class="string">"tie_breaker"</span>: <span class="number">0.5</span>,</span><br><span class="line">      <span class="string">"minimum_should_match"</span>: <span class="string">"50%"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>cross fields</code></strong>是一个<strong>唯一标识</strong>，且分部在<strong>多个<code>fields</code></strong>中，<strong>使用该唯一标识搜索数据即<code>cross fields</code>搜索</strong>。如人名可分为姓和名，地址可分为省、市、区县、街道等。使用人名或地址来搜索document，就称为cross fields搜索。</p><p>实现这种搜索，一般都是使用<strong><code>most fields</code>搜索策略</strong>，因为这就是<strong>多个<code>field</code></strong>问题。<strong><code>Cross fields</code></strong>搜索策略是<strong>从多个字段中搜索条件数据</strong>，<strong>默认和<code>most fields</code>搜索逻辑一致</strong>但<strong>计算相关度分数和<code>best fields</code>策略一致</strong>。一般若使用cross fields搜索策略，都会携带<strong><code>operator</code></strong>额外参数，用来标记搜索条件如何在多个字段中匹配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /es_db/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"multi_match"</span>: &#123; <span class="comment">// 搜索条件中java必须在name或remark字段中匹配，developer也必须在name或remark字段中匹配</span></span><br><span class="line">      <span class="string">"query"</span>: <span class="string">"java developer"</span>,</span><br><span class="line">      <span class="string">"fields"</span>: [<span class="string">"name"</span>, <span class="string">"remark"</span>],</span><br><span class="line">      <span class="string">"type"</span>: <span class="string">"cross_fields"</span>,</span><br><span class="line">      <span class="string">"operator"</span>: <span class="string">"and"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>most fields</code>策略</strong>是尽可能匹配更多字段，会导致<strong>精确搜索结果排序问题</strong>，又因为cross fields搜索，不能使用<strong><code>minimum_should_match</code></strong>来去除长尾数据。故在使用<strong><code>most fields</code></strong>和<strong><code>cross fields</code></strong>策略搜索数据时，都有不同缺陷，商业项目开发中都<strong>推荐使用<code>best fields</code>策略</strong>实现搜索。</p><p>可通过<strong><code>copy_to</code></strong>解决<strong><code>cross fields</code>搜索问题</strong>，<strong><code>copy_to</code></strong>就是将<strong>多个字段复制到一个字段</strong>中实现一个<strong>多字段组合</strong>，在商业项目中，也用于<strong>解决搜索条件默认字段问题</strong>。若需要使用copy_to语法，则需要在定义<strong><code>index</code></strong>时手工指定<strong><code>mapping</code>映射策略</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /es_db/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"provice"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"standard"</span>,<span class="string">"copy_to"</span>: <span class="string">"address"</span>&#125;,</span><br><span class="line">    <span class="string">"city"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"copy_to"</span>: <span class="string">"address"</span>&#125;,</span><br><span class="line">    <span class="string">"street"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"standard"</span>,<span class="string">"copy_to"</span>: <span class="string">"address"</span>&#125;,</span><br><span class="line">    <span class="string">"address"</span>: &#123;<span class="string">"type"</span>: <span class="string">"text"</span>,<span class="string">"analyzer"</span>: <span class="string">"standard"</span>&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在mapping定义中新增provice、city、street、address等字段，其中provice、city、street三个字段值会自动复制到address字段中，实现一个字段组合。在搜索地址时可在address字段中做条件匹配，从而<strong>避免<code>most fields</code>策略导致的问题</strong>。在维护数据时不需对address字段特殊维护，ES会<strong>自动维护组合字段</strong>。在存储时<strong>物理上不一定存在但逻辑上存在</strong>，因为address由3个物理存在属性province、city、street组成。</p><p>使用<strong><code>match</code></strong>和<strong><code>proximity search</code></strong>实现<strong>召回率</strong>和<strong>精准度平衡</strong>，若搜索时只使用<code>match phrase</code>语法，会导致<strong>召回率低下</strong>，若只使用<code>match</code>语法，会导致<strong>精准度低下</strong>，因为搜索结果排序是根据相关度分数算法计算得到。若需要在结果中<strong>兼顾召回率</strong>和<strong>精准度</strong>，就需要将<strong><code>match</code></strong>和<strong><code>proximity search</code></strong>混合使用。</p><ul><li><strong>召回率</strong>：<strong>搜索结果比率</strong>，如索引A中有100个document，搜索时返回多少个document</li><li><strong>精准度</strong>：<strong>搜索结果准确率</strong>，如搜索条件为<code>hello java</code>，搜索结果中尽可能让短语匹配和<code>hello java</code>离的近的结果排序靠前</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /test_a/_doc/<span class="number">3</span></span><br><span class="line">&#123;<span class="string">"f"</span>:<span class="string">"hello, java is very good, spark is also very good"</span>&#125;</span><br><span class="line">POST /test_a/_doc/<span class="number">4</span></span><br><span class="line">&#123;<span class="string">"f"</span>:<span class="string">"java and spark, development language "</span>&#125;</span><br><span class="line">POST /test_a/_doc/<span class="number">5</span></span><br><span class="line">&#123;<span class="string">"f"</span>:<span class="string">"Java Spark is a fast and general-purpose cluster computing system. It provides high-level APIs in Java, Scala, Python and R, and an optimized engine that supports general execution graphs."</span>&#125;</span><br><span class="line">POST /test_a/_doc/<span class="number">6</span></span><br><span class="line">&#123;<span class="string">"f"</span>:<span class="string">"java spark and, development language "</span>&#125;</span><br><span class="line"></span><br><span class="line">GET /test_a/_search</span><br><span class="line">&#123;<span class="string">"query"</span>:&#123;<span class="string">"match"</span>:&#123;<span class="string">"f"</span>:<span class="string">"java spark"</span>&#125;&#125;&#125;</span><br><span class="line">GET /test_a/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"query"</span>: &#123;</span><br><span class="line">    <span class="string">"bool"</span>: &#123;</span><br><span class="line">      <span class="string">"must"</span>: [&#123;<span class="string">"match"</span>: &#123;<span class="string">"f"</span>: <span class="string">"java spark"</span>&#125;&#125;],</span><br><span class="line">      <span class="string">"should"</span>: [&#123;<span class="string">"match_phrase"</span>: &#123;<span class="string">"f"</span>: &#123;<span class="string">"query"</span>: <span class="string">"java spark"</span>,<span class="string">"slop"</span>: <span class="number">50</span>&#125;&#125;&#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h4><ul><li><strong>父子</strong>文档查询：<strong><code>parent/child</code></strong></li><li><strong>嵌套</strong>文档查询：<strong><code>nested</code></strong></li></ul><h3 id="ES架构原理"><a href="#ES架构原理" class="headerlink" title="ES架构原理"></a>ES架构原理</h3><p>在ES中主要分成<strong><code>Master</code></strong>和<strong><code>DataNode</code></strong>两类节点，ES启动时会选举出一个Master节点，当某个节点启动后，使用<strong><code>Zen Discovery</code>机制</strong>找到集群中的其他节点并<strong>建立连接</strong>，并<strong>从候选主节点中选举出一个主节点</strong>。一个ES集群中只有一个Master节点，但会有<strong><code>N</code>个<code>DataNode</code></strong>节点，在生产环境中内存可相对小一点但机器要稳定。</p><ul><li><strong><code>Master</code></strong>：<strong>管理索引</strong>即创建、删除索引，<strong>分配分片</strong>，<strong>维护元数据</strong>，<strong>管理集群节点状态</strong>，<strong>不负责数据写入和查询</strong>，比较轻量级</li><li><strong><code>DataNode</code></strong>：<strong>数据写入</strong>，<strong>数据检索</strong>，大部分ES压力都在DataNode节点上</li></ul><h5 id="分片Shard"><a href="#分片Shard" class="headerlink" title="分片Shard"></a>分片Shard</h5><p>ES是一个<strong>分布式搜索引擎</strong>，索引数据也分成若干部分，分布在不同服务器节点中，分布在不同服务器节点中的索引数据，就是Shard分片。Elasticsearch会<strong>自动管理分片</strong>，若发现分片<strong>分布不均衡</strong>，会<strong>自动迁移</strong>一个索引index由多个shard分片组成，<strong>分片是分布在不同的服务器上</strong>。</p><h5 id="副本-1"><a href="#副本-1" class="headerlink" title="副本"></a>副本</h5><p>为了<strong>对ES分片进行容错</strong>，假设某个节点不可用，会导致整个索引库都将不可用。故需要对分片进行副本容错，<strong>每个分片都会有对应的副本</strong>。<strong>默认创建索引为<code>1</code>个分片</strong>、每个分片有<strong><code>1</code>个主分片</strong>和<strong><code>1</code>个副本分片</strong>。</p><p>每个分片都会有<strong>一个<code>Primary Shard</code>主分片</strong>，也会有<strong>若干个<code>Replica Shard</code>副本分片</strong>，<strong><code>Primary Shard</code>和<code>Replica Shard</code>不在同一个节点上</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">PUT /job_idx_shard_temp <span class="comment">// 创建指定分片数量、副本数量的索引</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"mappings"</span>: &#123;</span><br><span class="line">        <span class="string">"properties"</span>: &#123;</span><br><span class="line">            <span class="string">"id"</span>: &#123;<span class="string">"type"</span>: <span class="string">"long"</span>,<span class="string">"store"</span>: <span class="keyword">true</span>&#125;,</span><br><span class="line">            <span class="string">"area"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>,<span class="string">"store"</span>: <span class="keyword">true</span>&#125;,</span><br><span class="line">            <span class="string">"edu"</span>: &#123;<span class="string">"type"</span>: <span class="string">"keyword"</span>,<span class="string">"store"</span>: <span class="keyword">true</span>&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">        <span class="string">"number_of_shards"</span>: <span class="number">3</span>,<span class="comment">// 指定分片数量</span></span><br><span class="line">        <span class="string">"number_of_replicas"</span>: <span class="number">2</span><span class="comment">// 指定副本数量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GET /_cat/indices?v<span class="comment">// 查看分片、主分片、副本分片</span></span><br></pre></td></tr></table></figure><h4 id="文档写入原理"><a href="#文档写入原理" class="headerlink" title="文档写入原理"></a>文档写入原理</h4><p><img src="../../../../../images/DB/ES/ES文档写入原理.png" alt></p><p>选择<strong>任意一个<code>DataNode</code>发送请求</strong>如node2，此时node2就成为一个<strong><code>coordinating node</code>协调节点</strong>，通过协调节点<strong>计算得到文档要写入的分片<code>shard = hash(routing) % number_of_primary_shards</code></strong>，其中<strong><code>routing</code></strong>是一个<strong>可变值</strong>，<strong>默认为文档<code>_id</code></strong>，然后<strong>协调节点会进行路由</strong>，将请求<strong>转发</strong>给对应<strong><code>primary shard</code>主分片</strong>所在的<strong><code>DataNode</code></strong>，假设primary shard主分片在node1、replica shard副分片在node2，node1节点上的Primary Shard处理请求，写入数据到索引库中，并将数据同步到Replica shard副分片，Primary Shard和Replica Shard都保存好了文档则返回Client。</p><h4 id="检索原理"><a href="#检索原理" class="headerlink" title="检索原理"></a>检索原理</h4><p><img src="../../../../../images/DB/ES/ES文档检索原理.png" alt></p><p> Client发起查询请求某个<strong><code>DataNode</code></strong>接收到请求后，该<strong><code>DataNode</code></strong>就成为<strong><code>Coordinating Node</code>协调节点</strong>，<strong>协调节点将查询请求广播到每一个数据节点</strong>，这些<strong>数据节点</strong>的<strong>分片</strong>会处理该查询请求，<strong>每个分片进行数据查询</strong>，将符合条件的数据放在一个<strong>优先队列</strong>中，并将这些数据的<strong>文档<code>ID</code></strong>、<strong>节点信息</strong>、<strong>分片信息</strong>返回给<strong>协调节点</strong>，<strong>协调节点将所有结果进行汇总并全局排序</strong>，协调节点向包含这些<strong>文档<code>ID</code></strong>的<strong>分片</strong>发送<strong><code>get</code>请求</strong>，对应的分片将文档数据返回给协调节点，最后协调节点将数据返回给客户端。</p><h4 id="准实时索引"><a href="#准实时索引" class="headerlink" title="准实时索引"></a>准实时索引</h4><p><img src="../../../../../images/DB/ES/ES准实时原理描述.png" alt></p><p>当数据写入到ES分片时会<strong>首先写入到内存中</strong>，然后通过<strong>内存<code>buffer</code></strong>生成一个<strong><code>Segment</code></strong>，并刷到<strong>文件系统缓存</strong>中而<strong>不是直接刷到磁盘</strong>，数据可被检索，ES中<strong>默认<code>1</code>秒<code>refresh</code>一次</strong>。数据在<strong>写入内存的同时</strong>，也会<strong>记录<code>Translog</code>日志</strong>，若<strong>在<code>refresh</code>期间出现异常</strong>，会<strong>根据<code>Translog</code></strong>来进行<strong>数据恢复</strong>，等到<strong>文件系统缓存</strong>中的<strong><code>Segment</code></strong>数据<strong>都刷到磁盘中</strong>，则<strong>清空<code>Translog</code>文件</strong>，ES<strong>默认每隔<code>30</code>分钟</strong>会将<strong>文件系统缓存</strong>的数据<strong>刷入到磁盘</strong>。<strong><code>Segment</code>太多</strong>时ES<strong>定期</strong>会将多个<strong><code>Segment</code>合并</strong>成为大的Segment，<strong>减少索引查询时<code>IO</code>开销</strong>，此阶段ES会真正的<strong>物理删除</strong>之前<strong>执行过<code>delete</code>的数据</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;code&gt;Elasticsearch&lt;/code&gt;&lt;/strong&gt;是用&lt;strong&gt;Java&lt;code&gt;开发&lt;/code&gt;&lt;/strong&gt;的当前&lt;strong&gt;最流行&lt;/strong&gt;的&lt;strong&gt;开源&lt;/strong&gt;的企业级搜索引擎，能够达到
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="ELK" scheme="https://yaoyinglong.github.io/categories/Cloud/ELK/"/>
    
    
      <category term="ElasticSearch" scheme="https://yaoyinglong.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper客户端之ZAB</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Zookeeper/Zookeeper%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B9%8BZAB/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Zookeeper/Zookeeper客户端之ZAB/</id>
    <published>2021-12-20T16:00:00.000Z</published>
    <updated>2021-12-21T14:41:08.209Z</updated>
    
    <content type="html"><![CDATA[<p>整个Zookeeper就是一个<strong>多节点分布式一致性算法</strong>的实现，底层采用的实现协议是<strong><code>ZAB</code></strong>，即<strong><code>Zookeeper Atomic Broadcast</code>原子广播协议</strong>。ZAB协议是为分布式协调服务Zookeeper专门设计的一种<strong>支持崩溃恢复</strong>和<strong>原子广播</strong>的协议。</p><p>ZAB协议消息广播过程使用的是一个原子广播协议，类似一个<strong>两阶段提交过程</strong>。对于客户端发送的写请求，全部由 Leader接收，Leader将请求封装成一个事务Proposal，将其发送给所有Follower，然后根据所有Follwer的反馈，若<strong>含<code>Leader</code>自己超过半数成功响应</strong>，则执行commit操作。</p><p><img src="../../../../../images/Zookeeper/ZAB广播流程.png" alt></p><ul><li>Leader在收到客户端请求之后，会将该请求封装成一个事务，并给该事务分配一个全局递增的唯一ID，称为事务ZXID，ZAB协议需要保证事务的顺序，因此必须将每一个事务按照ZXID进行先后排序然后处理，主要通过消息队列实现</li><li>在Leader和Follwer之间还有一个消息队列，用来解耦他们之间的耦合，解除同步阻塞</li><li>Zookeeper集群中为保证任何所有进程能够有序的顺序执行，只能是Leader服务器接受写请求，即使是 Follower服务器接受到客户端的写请求，也会转发到Leader服务器进行处理，Follower只处理读请求</li><li>ZAB协议规定了若一个事务在一台机器上被处理Commit成功，则应该在所有机器上都被处理成功，哪怕机器出现故障崩溃</li></ul><p>当崩溃恢复之后，需要在正式接收客户端请求之前，Leader服务器首先确认事务是否都已经被过半的Follwer提交了，即是否完成了数据同步。目的是为了保持数据一致。</p><p>当Follwer服务器成功同步之后，Leader会将这些服务器加入到可用服务器列表中，Leader服务器处理或丢弃事务都是依赖着ZXID。</p><p>实际上，Leader 服务器处理或丢弃事务都是依赖着 ZXID 的，那么这个 ZXID 如何生成呢？</p><p>在ZAB协议的事务编号ZXID设计中，<strong><code>ZXID</code></strong>是一个<strong><code>64</code>位的数字</strong>，其中<strong>低<code>32</code>位可看作是一个简单的递增的计数器</strong>，针对客户端的每一个事务请求，Leader都会产生一个新的事务Proposal并对该计数器进行<strong><code>+1</code></strong>操作。<strong>高<code>32</code>位</strong>则代表Leader服务器上取出<strong>本地日志中最大事务<code>Proposal</code>的<code>ZXID</code></strong>，并从该ZXID中解析出对应<strong><code>Leader</code>选举周期<code>epoch</code>值</strong>，当一轮新的选举结束后，会对该值加一且<strong>事务<code>id</code>又从<code>0</code>开始自增</strong>。</p><p>高32位代表了每代Leader的唯一性，低32代表了每代Leader中事务的唯一性。同时也能让Follwer通过高32位识别不同的Leader，简化数据恢复流程。基于这样的策略，当Follower连接上Leader后，<strong>Leader服务器会根据自己服务器上最后被提交的<code>ZXID</code>和<code>Follower</code>上的<code>ZXID</code>进行比对</strong>，比对结果要么回滚，要么和Leader同步。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkServiceProviderV</span> <span class="keyword">implements</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ZooKeeper zk = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String rootPath = <span class="string">"/GroupMembers"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException, KeeperException </span>&#123;</span><br><span class="line">        zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost:2181"</span>, <span class="number">5000</span>, <span class="keyword">new</span> ZkServiceProviderV());</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        zk.create(rootPath + <span class="string">"/test"</span>, <span class="string">"test carete"</span>.getBytes(), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</span><br><span class="line">        System.out.println(<span class="string">"创建集群节点test："</span> + rootPath + <span class="string">"test"</span>);</span><br><span class="line">        Thread.sleep(Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Event.KeeperState.SyncConnected == event.getState()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Event.EventType.None == event.getType() &amp;&amp; event.getPath() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过ZooKeeper的构造方法创建ZooKeeper时，首先通过<strong><code>defaultWatchManager</code></strong>创建一个<strong><code>ZKWatchManager</code></strong>对象，且将传入的<strong><code>Watcher</code></strong>赋值给其<strong><code>defaultWatcher</code></strong>属性。然后通过<strong><code>ClientCnxn</code></strong>构造方法创建连接，且在<strong><code>ClientCnxn</code></strong>构造方法中创建了<strong><code>SendThread</code></strong>和<strong><code>EventThread</code></strong>两个重要的线程。且在<strong><code>ZooKeeper</code></strong>构造方法中调用<strong><code>ClientCnxn</code></strong>的<strong><code>start</code></strong>方法启动了这两个线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(connectString, sessionTimeout, watcher, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(connectString, sessionTimeout, watcher, canBeReadOnly, createDefaultHostProvider(connectString));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly, HostProvider aHostProvider)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(connectString, sessionTimeout, watcher, canBeReadOnly, aHostProvider, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ZooKeeper</span><span class="params">(String connectString, <span class="keyword">int</span> sessionTimeout, Watcher watcher, <span class="keyword">boolean</span> canBeReadOnly, HostProvider aHostProvider, ZKClientConfig clientConfig)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (clientConfig == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clientConfig = <span class="keyword">new</span> ZKClientConfig();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clientConfig = clientConfig;</span><br><span class="line">        watchManager = defaultWatchManager();</span><br><span class="line">        watchManager.defaultWatcher = watcher;</span><br><span class="line">        ConnectStringParser connectStringParser = <span class="keyword">new</span> ConnectStringParser(connectString);</span><br><span class="line">        hostProvider = aHostProvider;</span><br><span class="line">        cnxn = createConnection(connectStringParser.getChrootPath(), hostProvider, sessionTimeout, <span class="keyword">this</span>, watchManager, getClientCnxnSocket(), canBeReadOnly);</span><br><span class="line">        cnxn.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ClientCnxn <span class="title">createConnection</span><span class="params">(String chrootPath, HostProvider hostProvider, <span class="keyword">int</span> sessionTimeout, ZooKeeper zooKeeper, ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket, <span class="keyword">boolean</span> canBeReadOnly)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ClientCnxn(chrootPath, hostProvider, sessionTimeout, <span class="keyword">this</span>, watchManager, clientCnxnSocket, canBeReadOnly);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKWatchManager</span> <span class="keyword">implements</span> <span class="title">ClientWatchManager</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; dataWatches = <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; existWatches = <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;Watcher&gt;&gt; childWatches = <span class="keyword">new</span> HashMap&lt;String, Set&lt;Watcher&gt;&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> disableAutoWatchReset;</span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">volatile</span> Watcher defaultWatcher;</span><br><span class="line">        ZKWatchManager(<span class="keyword">boolean</span> disableAutoWatchReset) &#123;</span><br><span class="line">            <span class="keyword">this</span>.disableAutoWatchReset = disableAutoWatchReset;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientCnxn</span><span class="params">(String chrootPath, HostProvider hostProvider, <span class="keyword">int</span> sessionTimeout, ZooKeeper zooKeeper, ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket, <span class="keyword">boolean</span> canBeReadOnly)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(chrootPath, hostProvider, sessionTimeout, zooKeeper, watcher, clientCnxnSocket, <span class="number">0</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">16</span>], canBeReadOnly);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientCnxn</span><span class="params">(String chrootPath, HostProvider hostProvider, <span class="keyword">int</span> sessionTimeout, ZooKeeper zooKeeper, ClientWatchManager watcher, ClientCnxnSocket clientCnxnSocket, <span class="keyword">long</span> sessionId, <span class="keyword">byte</span>[] sessionPasswd, <span class="keyword">boolean</span> canBeReadOnly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zooKeeper = zooKeeper;</span><br><span class="line">        <span class="keyword">this</span>.watcher = watcher;</span><br><span class="line">        <span class="keyword">this</span>.sessionId = sessionId;</span><br><span class="line">        <span class="keyword">this</span>.sessionPasswd = sessionPasswd;</span><br><span class="line">        <span class="keyword">this</span>.sessionTimeout = sessionTimeout;</span><br><span class="line">        <span class="keyword">this</span>.hostProvider = hostProvider;</span><br><span class="line">        <span class="keyword">this</span>.chrootPath = chrootPath;</span><br><span class="line">        connectTimeout = sessionTimeout / hostProvider.size();</span><br><span class="line">        readTimeout = sessionTimeout * <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">        readOnly = canBeReadOnly;</span><br><span class="line">        sendThread = <span class="keyword">new</span> SendThread(clientCnxnSocket);</span><br><span class="line">        eventThread = <span class="keyword">new</span> EventThread();</span><br><span class="line">        <span class="keyword">this</span>.clientConfig = zooKeeper.getClientConfig();</span><br><span class="line">        initRequestTimeout();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sendThread.start();</span><br><span class="line">        eventThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SendThread"><a href="#SendThread" class="headerlink" title="SendThread"></a>SendThread</h4><p><strong><code>SendThread</code></strong>主要<strong>跟服务端建立连接</strong>，且<strong>监听读写事件</strong>并处理。首先在<strong><code>ClientCnxn</code></strong>的<strong><code>startConnect</code></strong>方法中调用<strong><code>ClientCnxnSocketNIO</code></strong>的<strong><code>connect</code></strong>方法，创建<strong><code>SocketChannel</code></strong>并注册到<strong><code>Selector</code></strong>中。在<strong><code>ClientCnxnSocketNIO</code></strong>的<strong><code>doTransport</code></strong>方法中<strong>监听读写事件</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendThread</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        clientCnxnSocket.introduce(<span class="keyword">this</span>, sessionId, outgoingQueue);</span><br><span class="line">        clientCnxnSocket.updateNow();</span><br><span class="line">        clientCnxnSocket.updateLastSendAndHeard();</span><br><span class="line">        <span class="keyword">int</span> to;</span><br><span class="line">        <span class="keyword">long</span> lastPingRwServer = Time.currentElapsedTime();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEND_PING_INTERVAL = <span class="number">10000</span>; <span class="comment">//10 seconds</span></span><br><span class="line">        InetSocketAddress serverAddress = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (state.isAlive()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!clientCnxnSocket.isConnected()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (closing) &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (rwServerAddress != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        serverAddress = rwServerAddress;</span><br><span class="line">                        rwServerAddress = <span class="keyword">null</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        serverAddress = hostProvider.next(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    startConnect(serverAddress);</span><br><span class="line">                    clientCnxnSocket.updateLastSendAndHeard();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (state.isConnected()) &#123;<span class="comment">// determine whether we need to send an AuthFailed event.</span></span><br><span class="line">                    <span class="keyword">if</span> (zooKeeperSaslClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> sendAuthEvent = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (zooKeeperSaslClient.getSaslState() == ZooKeeperSaslClient.SaslState.INITIAL) &#123;</span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                zooKeeperSaslClient.initialize(ClientCnxn.<span class="keyword">this</span>);</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (SaslException e) &#123;</span><br><span class="line">                                state = States.AUTH_FAILED;</span><br><span class="line">                                sendAuthEvent = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        KeeperState authState = zooKeeperSaslClient.getKeeperState();</span><br><span class="line">                        <span class="keyword">if</span> (authState != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (authState == KeeperState.AuthFailed) &#123;</span><br><span class="line">                                state = States.AUTH_FAILED;</span><br><span class="line">                                sendAuthEvent = <span class="keyword">true</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (authState == KeeperState.SaslAuthenticated) &#123;</span><br><span class="line">                                    sendAuthEvent = <span class="keyword">true</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (sendAuthEvent) &#123;</span><br><span class="line">                            eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(Watcher.Event.EventType.None, authState, <span class="keyword">null</span>));</span><br><span class="line">                            <span class="keyword">if</span> (state == States.AUTH_FAILED) &#123;</span><br><span class="line">                                eventThread.queueEventOfDeath();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    to = readTimeout - clientCnxnSocket.getIdleRecv();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    to = connectTimeout - clientCnxnSocket.getIdleRecv();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (to &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> SessionTimeoutException(warnInfo);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (state.isConnected()) &#123;</span><br><span class="line">                    <span class="keyword">int</span> timeToNextPing = readTimeout / <span class="number">2</span> - clientCnxnSocket.getIdleSend() - ((clientCnxnSocket.getIdleSend() &gt; <span class="number">1000</span>) ? <span class="number">1000</span> : <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (timeToNextPing &lt;= <span class="number">0</span> || clientCnxnSocket.getIdleSend() &gt; MAX_SEND_PING_INTERVAL) &#123;</span><br><span class="line">                        sendPing();</span><br><span class="line">                        clientCnxnSocket.updateLastSend();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (timeToNextPing &lt; to) &#123;</span><br><span class="line">                            to = timeToNextPing;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (state == States.CONNECTEDREADONLY) &#123; <span class="comment">// 只读模式处理</span></span><br><span class="line">                    <span class="keyword">long</span> now = Time.currentElapsedTime();</span><br><span class="line">                    <span class="keyword">int</span> idlePingRwServer = (<span class="keyword">int</span>) (now - lastPingRwServer);</span><br><span class="line">                    <span class="keyword">if</span> (idlePingRwServer &gt;= pingRwTimeout) &#123;</span><br><span class="line">                        lastPingRwServer = now;</span><br><span class="line">                        idlePingRwServer = <span class="number">0</span>;</span><br><span class="line">                        pingRwTimeout = Math.min(<span class="number">2</span> * pingRwTimeout, maxPingRwTimeout);</span><br><span class="line">                        pingRwServer();</span><br><span class="line">                    &#125;</span><br><span class="line">                    to = Math.min(to, pingRwTimeout - idlePingRwServer);</span><br><span class="line">                &#125;</span><br><span class="line">                clientCnxnSocket.doTransport(to, pendingQueue, ClientCnxn.<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (closing) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// this is ugly, you have a better way speak up</span></span><br><span class="line">                    cleanAndNotifyState();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (state) &#123;<span class="comment">// When it comes to this point, it guarantees that later queued packet to outgoingQueue will be notified of death.</span></span><br><span class="line">            cleanup();</span><br><span class="line">        &#125;</span><br><span class="line">        clientCnxnSocket.close();</span><br><span class="line">        <span class="keyword">if</span> (state.isAlive()) &#123;</span><br><span class="line">            eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(Event.EventType.None, Event.KeeperState.Disconnected, <span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(Event.EventType.None, Event.KeeperState.Closed, <span class="keyword">null</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startConnect</span><span class="params">(InetSocketAddress addr)</span> <span class="keyword">throws</span> IOException </span>&#123;<span class="comment">// initializing it for new connection</span></span><br><span class="line">        saslLoginFailed = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isFirstConnect) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(r.nextInt(<span class="number">1000</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = States.CONNECTING;</span><br><span class="line">        String hostPort = addr.getHostString() + <span class="string">":"</span> + addr.getPort();</span><br><span class="line">        MDC.put(<span class="string">"myid"</span>, hostPort);</span><br><span class="line">        setName(getName().replaceAll(<span class="string">"\\(.*\\)"</span>, <span class="string">"("</span> + hostPort + <span class="string">")"</span>));</span><br><span class="line">        <span class="keyword">if</span> (clientConfig.isSaslClientEnabled()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (zooKeeperSaslClient != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    zooKeeperSaslClient.shutdown();</span><br><span class="line">                &#125;</span><br><span class="line">                zooKeeperSaslClient = <span class="keyword">new</span> ZooKeeperSaslClient(SaslServerPrincipal.getServerPrincipal(addr, clientConfig), clientConfig);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LoginException e) &#123;</span><br><span class="line">                eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.AuthFailed, <span class="keyword">null</span>));</span><br><span class="line">                saslLoginFailed = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        clientCnxnSocket.connect(addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxnSocketNIO</span> <span class="keyword">extends</span> <span class="title">ClientCnxnSocket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">connect</span><span class="params">(InetSocketAddress addr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel sock = createSock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registerAndConnect(sock, addr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            sock.close();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        initialized = <span class="keyword">false</span>;</span><br><span class="line">        lenBuffer.clear();</span><br><span class="line">        incomingBuffer = lenBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">SocketChannel <span class="title">createSock</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SocketChannel sock;</span><br><span class="line">        sock = SocketChannel.open();</span><br><span class="line">        sock.configureBlocking(<span class="keyword">false</span>);</span><br><span class="line">        sock.socket().setSoLinger(<span class="keyword">false</span>, -<span class="number">1</span>);</span><br><span class="line">        sock.socket().setTcpNoDelay(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> sock;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">registerAndConnect</span><span class="params">(SocketChannel sock, InetSocketAddress addr)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        sockKey = sock.register(selector, SelectionKey.OP_CONNECT);</span><br><span class="line">        <span class="keyword">boolean</span> immediateConnect = sock.connect(addr);</span><br><span class="line">        <span class="keyword">if</span> (immediateConnect) &#123;</span><br><span class="line">            sendThread.primeConnection();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong><code>SendThread</code></strong>中通过<strong><code>startConnect</code></strong>方法与服务端建立好连接后，调用<strong><code>ClientCnxnSocketNIO</code></strong>的<strong><code>doTransport</code></strong>监听读写事件，当接收到读写事件后调用<strong><code>doIO</code></strong>方法对读写逻辑分别处理。对于写事件通过从<strong><code>outgoingQueue</code>队列</strong>中取出<strong>命令包</strong>，最终调用<strong><code>ClientCnxn</code></strong>的<strong><code>createBB</code></strong>方法将数据发送给服务端，服务端最终通过<strong><code>CnxnChannelHandler</code></strong>的<strong><code>channelRead</code></strong>方法处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxnSocketNIO</span> <span class="keyword">extends</span> <span class="title">ClientCnxnSocket</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doTransport</span><span class="params">(<span class="keyword">int</span> waitTimeOut, List&lt;Packet&gt; pendingQueue, ClientCnxn cnxn)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        selector.select(waitTimeOut);</span><br><span class="line">        Set&lt;SelectionKey&gt; selected;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            selected = selector.selectedKeys();</span><br><span class="line">        &#125;</span><br><span class="line">        updateNow();</span><br><span class="line">        <span class="keyword">for</span> (SelectionKey k : selected) &#123;</span><br><span class="line">            SocketChannel sc = ((SocketChannel) k.channel());</span><br><span class="line">            <span class="keyword">if</span> ((k.readyOps() &amp; SelectionKey.OP_CONNECT) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sc.finishConnect()) &#123;</span><br><span class="line">                    updateLastSendAndHeard(); <span class="comment">// 更新最后发送以及心跳时间</span></span><br><span class="line">                    updateSocketAddresses();</span><br><span class="line">                    sendThread.primeConnection(); <span class="comment">// 处理会话、之前的监听器、身份验证</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((k.readyOps() &amp; (SelectionKey.OP_READ | SelectionKey.OP_WRITE)) != <span class="number">0</span>) &#123;</span><br><span class="line">                doIO(pendingQueue, cnxn); <span class="comment">// 有NIO读写事件发生</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sendThread.getZkState().isConnected()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                enableWrite();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        selected.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doIO</span><span class="params">(List&lt;Packet&gt; pendingQueue, ClientCnxn cnxn)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        SocketChannel sock = (SocketChannel) sockKey.channel();</span><br><span class="line">        <span class="keyword">if</span> (sock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Socket is null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sockKey.isReadable()) &#123; <span class="comment">// 处理服务端响应信息</span></span><br><span class="line">            <span class="keyword">int</span> rc = sock.read(incomingBuffer);</span><br><span class="line">            <span class="keyword">if</span> (rc &lt; <span class="number">0</span>) &#123; <span class="comment">// 未读取到数据抛出异常</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> EndOfStreamException(<span class="string">"Unable to read additional data from server sessionid 0x"</span> + Long.toHexString(sessionId) + <span class="string">", likely server has closed socket"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!incomingBuffer.hasRemaining()) &#123;</span><br><span class="line">                incomingBuffer.flip();</span><br><span class="line">                <span class="keyword">if</span> (incomingBuffer == lenBuffer) &#123;</span><br><span class="line">                    recvCount.getAndIncrement();</span><br><span class="line">                    readLength();</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">                    readConnectResult();</span><br><span class="line">                    enableRead();</span><br><span class="line">                    <span class="keyword">if</span> (findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        enableWrite();</span><br><span class="line">                    &#125;</span><br><span class="line">                    lenBuffer.clear();</span><br><span class="line">                    incomingBuffer = lenBuffer;</span><br><span class="line">                    updateLastHeard();</span><br><span class="line">                    initialized = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sendThread.readResponse(incomingBuffer);</span><br><span class="line">                    lenBuffer.clear();</span><br><span class="line">                    incomingBuffer = lenBuffer;</span><br><span class="line">                    updateLastHeard();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sockKey.isWritable()) &#123; <span class="comment">// 向服务端发送消息</span></span><br><span class="line">            Packet p = findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress()); <span class="comment">// 从outgoingQueue队列中取出命令包</span></span><br><span class="line">            <span class="keyword">if</span> (p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                updateLastSend();</span><br><span class="line">                <span class="keyword">if</span> (p.bb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((p.requestHeader != <span class="keyword">null</span>) &amp;&amp; (p.requestHeader.getType() != OpCode.ping) &amp;&amp; (p.requestHeader.getType() != OpCode.auth)) &#123;</span><br><span class="line">                        p.requestHeader.setXid(cnxn.getXid());</span><br><span class="line">                    &#125;</span><br><span class="line">                    p.createBB(); <span class="comment">// 将待发送数据通过jute序列化后封装到ByteBuffer中去</span></span><br><span class="line">                &#125;</span><br><span class="line">                sock.write(p.bb); <span class="comment">// 将数据发送给服务端，服务端通过SocketChannel接收客户端请求命令</span></span><br><span class="line">                <span class="keyword">if</span> (!p.bb.hasRemaining()) &#123;</span><br><span class="line">                    sentCount.getAndIncrement();</span><br><span class="line">                    outgoingQueue.removeFirstOccurrence(p);</span><br><span class="line">                    <span class="keyword">if</span> (p.requestHeader != <span class="keyword">null</span> &amp;&amp; p.requestHeader.getType() != OpCode.ping &amp;&amp; p.requestHeader.getType() != OpCode.auth) &#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (pendingQueue) &#123;</span><br><span class="line">                            pendingQueue.add(p);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (outgoingQueue.isEmpty()) &#123;</span><br><span class="line">                disableWrite();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!initialized &amp;&amp; p != <span class="keyword">null</span> &amp;&amp; !p.bb.hasRemaining()) &#123;</span><br><span class="line">                disableWrite();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// Just in case</span></span><br><span class="line">                enableWrite();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">            boa.writeInt(-<span class="number">1</span>, <span class="string">"len"</span>); <span class="comment">// We'll fill this in later</span></span><br><span class="line">            <span class="keyword">if</span> (requestHeader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                requestHeader.serialize(boa, <span class="string">"header"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ConnectRequest) &#123;</span><br><span class="line">                request.serialize(boa, <span class="string">"connect"</span>);</span><br><span class="line">                boa.writeBool(readOnly, <span class="string">"readOnly"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.serialize(boa, <span class="string">"request"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            baos.close();</span><br><span class="line">            <span class="keyword">this</span>.bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class="line">            <span class="keyword">this</span>.bb.putInt(<span class="keyword">this</span>.bb.capacity() - <span class="number">4</span>);</span><br><span class="line">            <span class="keyword">this</span>.bb.rewind();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于读事件若收到<strong>服务端数据变动返回事件</strong>，首先反序列化服务端响应数据为<strong><code>WatcherEvent</code></strong>，然后从服务端路径转换为客户端路径，最后将监听事件添加到<strong><code>EventThread</code></strong>的<strong><code>waitingEvents</code>阻塞队列</strong>中异步处理，在<strong><code>finally</code></strong>中调用<strong><code>finishPacket</code></strong>中判断若getData方法watch若为true，则将Watcher加入到path对应的Watcher集合中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SendThread</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readResponse</span><span class="params">(ByteBuffer incomingBuffer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteBufferInputStream bbis = <span class="keyword">new</span> ByteBufferInputStream(incomingBuffer);</span><br><span class="line">        BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis);</span><br><span class="line">        ReplyHeader replyHdr = <span class="keyword">new</span> ReplyHeader();</span><br><span class="line">        replyHdr.deserialize(bbia, <span class="string">"header"</span>);</span><br><span class="line">        <span class="keyword">if</span> (replyHdr.getXid() == -<span class="number">2</span>) &#123; <span class="comment">// -2 is the xid for pings 处理Ping</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (replyHdr.getXid() == -<span class="number">4</span>) &#123; <span class="comment">// -4 is the xid for AuthPacket               </span></span><br><span class="line">            <span class="keyword">if</span> (replyHdr.getErr() == KeeperException.Code.AUTHFAILED.intValue()) &#123;</span><br><span class="line">                state = States.AUTH_FAILED;</span><br><span class="line">                eventThread.queueEvent(<span class="keyword">new</span> WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.AuthFailed, <span class="keyword">null</span>));</span><br><span class="line">                eventThread.queueEventOfDeath();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (replyHdr.getXid() == -<span class="number">1</span>) &#123; <span class="comment">// 收到服务端数据变动返回事件</span></span><br><span class="line">            WatcherEvent event = <span class="keyword">new</span> WatcherEvent();</span><br><span class="line">            event.deserialize(bbia, <span class="string">"response"</span>);</span><br><span class="line">            <span class="keyword">if</span> (chrootPath != <span class="keyword">null</span>) &#123; <span class="comment">// 从服务端路径转换为客户端路径</span></span><br><span class="line">                String serverPath = event.getPath();</span><br><span class="line">                <span class="keyword">if</span> (serverPath.compareTo(chrootPath) == <span class="number">0</span>)</span><br><span class="line">                    event.setPath(<span class="string">"/"</span>);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (serverPath.length() &gt; chrootPath.length())</span><br><span class="line">                    event.setPath(serverPath.substring(chrootPath.length()));</span><br><span class="line">            &#125;</span><br><span class="line">            WatchedEvent we = <span class="keyword">new</span> WatchedEvent(event);</span><br><span class="line">            eventThread.queueEvent(we);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (tunnelAuthInProgress()) &#123;</span><br><span class="line">            GetSASLRequest request = <span class="keyword">new</span> GetSASLRequest();</span><br><span class="line">            request.deserialize(bbia, <span class="string">"token"</span>);</span><br><span class="line">            zooKeeperSaslClient.respondToServer(request.getToken(), ClientCnxn.<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Packet packet;</span><br><span class="line">        <span class="keyword">synchronized</span> (pendingQueue) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pendingQueue.size() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Nothing in the queue, but got "</span> + replyHdr.getXid());</span><br><span class="line">            &#125;</span><br><span class="line">            packet = pendingQueue.remove();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (packet.requestHeader.getXid() != replyHdr.getXid()) &#123;</span><br><span class="line">                packet.replyHeader.setErr(KeeperException.Code.CONNECTIONLOSS.intValue());</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Xid out of order. Got Xid "</span> + replyHdr.getXid() + <span class="string">" with err "</span> + +replyHdr.getErr() + <span class="string">" expected Xid "</span> + packet.requestHeader.getXid() + <span class="string">" for a packet with details: "</span> + packet);</span><br><span class="line">            &#125;</span><br><span class="line">            packet.replyHeader.setXid(replyHdr.getXid());</span><br><span class="line">            packet.replyHeader.setErr(replyHdr.getErr());</span><br><span class="line">            packet.replyHeader.setZxid(replyHdr.getZxid());</span><br><span class="line">            <span class="keyword">if</span> (replyHdr.getZxid() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                lastZxid = replyHdr.getZxid();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (packet.response != <span class="keyword">null</span> &amp;&amp; replyHdr.getErr() == <span class="number">0</span>) &#123;</span><br><span class="line">                packet.response.deserialize(bbia, <span class="string">"response"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            finishPacket(packet); <span class="comment">// 收到服务端命令执行完毕返回事件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finishPacket</span><span class="params">(Packet p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> err = p.replyHeader.getErr();</span><br><span class="line">        <span class="keyword">if</span> (p.watchRegistration != <span class="keyword">null</span>) &#123; <span class="comment">// getData方法watch若为true则执行该逻辑</span></span><br><span class="line">            p.watchRegistration.register(err); <span class="comment">// 初始化watchRegistration，将watcher加入到path对应的watcher集合中取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.watchDeregistration != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Map&lt;EventType, Set&lt;Watcher&gt;&gt; materializedWatchers = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                materializedWatchers = p.watchDeregistration.unregister(err);</span><br><span class="line">                <span class="keyword">for</span> (Entry&lt;EventType, Set&lt;Watcher&gt;&gt; entry : materializedWatchers.entrySet()) &#123;</span><br><span class="line">                    Set&lt;Watcher&gt; watchers = entry.getValue();</span><br><span class="line">                    <span class="keyword">if</span> (watchers.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        queueEvent(p.watchDeregistration.getClientPath(), err, watchers, entry.getKey());</span><br><span class="line">                        p.replyHeader.setErr(Code.OK.intValue());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (KeeperException.NoWatcherException nwe) &#123;</span><br><span class="line">                p.replyHeader.setErr(nwe.code().intValue());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (KeeperException ke) &#123;</span><br><span class="line">                p.replyHeader.setErr(ke.code().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.cb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (p) &#123;</span><br><span class="line">                p.finished = <span class="keyword">true</span>;</span><br><span class="line">                p.notifyAll(); <span class="comment">// 唤醒客户端等待</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p.finished = <span class="keyword">true</span>;</span><br><span class="line">            eventThread.queuePacket(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EventThread"><a href="#EventThread" class="headerlink" title="EventThread"></a>EventThread</h4><p>EventThread只要完成<strong>监听事件的异步执行</strong>，通过queueEvent方法将监听事件添加到<strong><code>waitingEvents</code>阻塞队列</strong>中，通过<strong><code>processEvent</code></strong>方法执行具体的监听器的回调方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EventThread</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;Object&gt; waitingEvents = <span class="keyword">new</span> LinkedBlockingQueue&lt;Object&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueEvent</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        queueEvent(event, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queueEvent</span><span class="params">(WatchedEvent event, Set&lt;Watcher&gt; materializedWatchers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getType() == EventType.None &amp;&amp; sessionState == event.getState()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sessionState = event.getState();</span><br><span class="line">        <span class="keyword">final</span> Set&lt;Watcher&gt; watchers;</span><br><span class="line">        <span class="keyword">if</span> (materializedWatchers == <span class="keyword">null</span>) &#123;<span class="comment">// materialize the watchers based on the event</span></span><br><span class="line">            watchers = watcher.materialize(event.getState(), event.getType(), event.getPath());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            watchers = <span class="keyword">new</span> HashSet&lt;Watcher&gt;();</span><br><span class="line">            watchers.addAll(materializedWatchers);</span><br><span class="line">        &#125;</span><br><span class="line">        WatcherSetEventPair pair = <span class="keyword">new</span> WatcherSetEventPair(watchers, event);</span><br><span class="line">        waitingEvents.add(pair);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            isRunning = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Object event = waitingEvents.take();</span><br><span class="line">                <span class="keyword">if</span> (event == eventOfDeath) &#123;</span><br><span class="line">                    wasKilled = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    processEvent(event);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (wasKilled)</span><br><span class="line">                    <span class="keyword">synchronized</span> (waitingEvents) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (waitingEvents.isEmpty()) &#123;</span><br><span class="line">                        isRunning = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processEvent</span><span class="params">(Object event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> WatcherSetEventPair) &#123;<span class="comment">// each watcher will process the event</span></span><br><span class="line">                WatcherSetEventPair pair = (WatcherSetEventPair) event;</span><br><span class="line">                <span class="keyword">for</span> (Watcher watcher : pair.watchers) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        watcher.process(pair.event); <span class="comment">// 执行具体Watcher的process方法</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event <span class="keyword">instanceof</span> LocalCallback) &#123;</span><br><span class="line">                LocalCallback lcb = (LocalCallback) event;</span><br><span class="line">                <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> StatCallback) &#123;</span><br><span class="line">                    ((StatCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> DataCallback) &#123;</span><br><span class="line">                    ((DataCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> ACLCallback) &#123;</span><br><span class="line">                    ((ACLCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> ChildrenCallback) &#123;</span><br><span class="line">                    ((ChildrenCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> Children2Callback) &#123;</span><br><span class="line">                    ((Children2Callback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lcb.cb <span class="keyword">instanceof</span> StringCallback) &#123;</span><br><span class="line">                    ((StringCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, <span class="keyword">null</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ((VoidCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Packet p = (Packet) event;</span><br><span class="line">                <span class="keyword">int</span> rc = <span class="number">0</span>;</span><br><span class="line">                String clientPath = p.clientPath;</span><br><span class="line">                <span class="keyword">if</span> (p.replyHeader.getErr() != <span class="number">0</span>) &#123;</span><br><span class="line">                    rc = p.replyHeader.getErr();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.cb == <span class="keyword">null</span>) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> ExistsResponse || p.response <span class="keyword">instanceof</span> SetDataResponse || p.response <span class="keyword">instanceof</span> SetACLResponse) &#123;</span><br><span class="line">                    StatCallback cb = (StatCallback) p.cb;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> ExistsResponse) &#123;</span><br><span class="line">                            cb.processResult(rc, clientPath, p.ctx, ((ExistsResponse) p.response).getStat());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> SetDataResponse) &#123;</span><br><span class="line">                            cb.processResult(rc, clientPath, p.ctx, ((SetDataResponse) p.response).getStat());</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> SetACLResponse) &#123;</span><br><span class="line">                            cb.processResult(rc, clientPath, p.ctx, ((SetACLResponse) p.response).getStat());</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> GetDataResponse) &#123;</span><br><span class="line">                    DataCallback cb = (DataCallback) p.cb;</span><br><span class="line">                    GetDataResponse rsp = (GetDataResponse) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, rsp.getData(), rsp.getStat());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> GetACLResponse) &#123;</span><br><span class="line">                    ACLCallback cb = (ACLCallback) p.cb;</span><br><span class="line">                    GetACLResponse rsp = (GetACLResponse) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, rsp.getAcl(), rsp.getStat());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> GetChildrenResponse) &#123;</span><br><span class="line">                    ChildrenCallback cb = (ChildrenCallback) p.cb;</span><br><span class="line">                    GetChildrenResponse rsp = (GetChildrenResponse) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, rsp.getChildren());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> GetChildren2Response) &#123;</span><br><span class="line">                    Children2Callback cb = (Children2Callback) p.cb;</span><br><span class="line">                    GetChildren2Response rsp = (GetChildren2Response) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, rsp.getChildren(), rsp.getStat());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> CreateResponse) &#123;</span><br><span class="line">                    StringCallback cb = (StringCallback) p.cb;</span><br><span class="line">                    CreateResponse rsp = (CreateResponse) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, (chrootPath == <span class="keyword">null</span> ? rsp.getPath() : rsp.getPath().substring(chrootPath.length())));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> Create2Response) &#123;</span><br><span class="line">                    Create2Callback cb = (Create2Callback) p.cb;</span><br><span class="line">                    Create2Response rsp = (Create2Response) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, (chrootPath == <span class="keyword">null</span> ? rsp.getPath() : rsp.getPath().substring(chrootPath.length())), rsp.getStat());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.response <span class="keyword">instanceof</span> MultiResponse) &#123;</span><br><span class="line">                    MultiCallback cb = (MultiCallback) p.cb;</span><br><span class="line">                    MultiResponse rsp = (MultiResponse) p.response;</span><br><span class="line">                    <span class="keyword">if</span> (rc == <span class="number">0</span>) &#123;</span><br><span class="line">                        List&lt;OpResult&gt; results = rsp.getResultList();</span><br><span class="line">                        <span class="keyword">int</span> newRc = rc;</span><br><span class="line">                        <span class="keyword">for</span> (OpResult result : results) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ErrorResult &amp;&amp; KeeperException.Code.OK.intValue() != (newRc = ((ErrorResult) result).getErr())) &#123;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        cb.processResult(newRc, clientPath, p.ctx, results);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        cb.processResult(rc, clientPath, p.ctx, <span class="keyword">null</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.cb <span class="keyword">instanceof</span> VoidCallback) &#123;</span><br><span class="line">                    VoidCallback cb = (VoidCallback) p.cb;</span><br><span class="line">                    cb.processResult(rc, clientPath, p.ctx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><p>对于创建节点将数据和serverPath等数据封装到CreateRequest中，调用<strong><code>ClientCnxn</code></strong>的<strong><code>submitRequest</code></strong>方法，将Request封装到packet中，将packet放入发送队列outgoingQueue阻塞队列中等待发送，然后调用<strong><code>ClientCnxnSocketNIO</code></strong>的<strong><code>packetAdded</code></strong>方法<strong>唤醒阻塞在<code>selector</code>的<code>select</code>方法上的线程</strong>，<strong>将待发送队列<code>outgoingQueue</code>中的命令数据发给服务端</strong>。然后调用<strong><code>Packet</code></strong>的<strong><code>wait</code></strong>方法阻塞等待Server返回，最终被<strong><code>SendThread</code></strong>的<strong><code>doIO</code></strong>的isReadable逻辑中执行<strong><code>finishPacket</code></strong>方法中调用Packet的notifyAll方法唤醒。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl, CreateMode createMode)</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String clientPath = path;</span><br><span class="line">        PathUtils.validatePath(clientPath, createMode.isSequential());</span><br><span class="line">        EphemeralType.validateTTL(createMode, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">final</span> String serverPath = prependChroot(clientPath);</span><br><span class="line">        RequestHeader h = <span class="keyword">new</span> RequestHeader();</span><br><span class="line">        h.setType(createMode.isContainer() ? ZooDefs.OpCode.createContainer : ZooDefs.OpCode.create);</span><br><span class="line">        CreateRequest request = <span class="keyword">new</span> CreateRequest();</span><br><span class="line">        CreateResponse response = <span class="keyword">new</span> CreateResponse();</span><br><span class="line">        request.setData(data);</span><br><span class="line">        request.setFlags(createMode.toFlag());</span><br><span class="line">        request.setPath(serverPath);</span><br><span class="line">        <span class="keyword">if</span> (acl != <span class="keyword">null</span> &amp;&amp; acl.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.InvalidACLException();</span><br><span class="line">        &#125;</span><br><span class="line">        request.setAcl(acl);</span><br><span class="line">        ReplyHeader r = cnxn.submitRequest(h, request, response, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (r.getErr() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cnxn.chrootPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> response.getPath();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> response.getPath().substring(cnxn.chrootPath.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReplyHeader <span class="title">submitRequest</span><span class="params">(RequestHeader h, Record request, Record response, WatchRegistration watchRegistration)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> submitRequest(h, request, response, watchRegistration, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReplyHeader <span class="title">submitRequest</span><span class="params">(RequestHeader h, Record request, Record response, WatchRegistration watchRegistration, WatchDeregistration watchDeregistration)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        ReplyHeader r = <span class="keyword">new</span> ReplyHeader();</span><br><span class="line">        <span class="comment">// 将Request封装到packet中，将packet放入发送队列outgoingQueue中等待发送</span></span><br><span class="line">        Packet packet = queuePacket(h, r, request, response, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, watchRegistration, watchDeregistration);</span><br><span class="line">        <span class="keyword">synchronized</span> (packet) &#123;</span><br><span class="line">            <span class="keyword">if</span> (requestTimeout &gt; <span class="number">0</span>) &#123; <span class="comment">// Wait for request completion with timeout</span></span><br><span class="line">                waitForPacketFinish(r, packet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// Wait for request completion infinitely</span></span><br><span class="line">                <span class="keyword">while</span> (!packet.finished) &#123;</span><br><span class="line">                    packet.wait(); <span class="comment">// 等待Server返回，最终会被SendThread的doIO的isReadable逻辑中执行finishPacket方法唤醒</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (r.getErr() == Code.REQUESTTIMEOUT.intValue()) &#123;</span><br><span class="line">            sendThread.cleanAndNotifyState();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Packet <span class="title">queuePacket</span><span class="params">(RequestHeader h, ReplyHeader r, Record request, Record response, AsyncCallback cb, String clientPath, String serverPath, Object ctx, WatchRegistration watchRegistration, WatchDeregistration watchDeregistration)</span> </span>&#123;</span><br><span class="line">        Packet packet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// request中有一个是否监听的watch属性传到服务端，服务端根据该属性做对应监听处理</span></span><br><span class="line">        packet = <span class="keyword">new</span> Packet(h, r, request, response, watchRegistration);</span><br><span class="line">        packet.cb = cb;</span><br><span class="line">        packet.ctx = ctx;</span><br><span class="line">        packet.clientPath = clientPath;</span><br><span class="line">        packet.serverPath = serverPath;</span><br><span class="line">        packet.watchDeregistration = watchDeregistration;</span><br><span class="line">        <span class="keyword">synchronized</span> (state) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!state.isAlive() || closing) &#123;</span><br><span class="line">                conLossPacket(packet);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (h.getType() == OpCode.closeSession) &#123;</span><br><span class="line">                    closing = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                outgoingQueue.add(packet); <span class="comment">// 将发送数据包放入outgoingQueue阻塞队列</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 用于唤醒阻塞在select方法上的线程，为了出发写事件，底层会往管道中写一个字节，写事件出发后会将待发送队列中的命令数据发给服务端</span></span><br><span class="line">        sendThread.getClientCnxnSocket().packetAdded();</span><br><span class="line">        <span class="keyword">return</span> packet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="getData"><a href="#getData" class="headerlink" title="getData"></a>getData</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeper</span> <span class="keyword">implements</span> <span class="title">AutoCloseable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getData(String path, <span class="keyword">boolean</span> watch, Stat stat) <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">return</span> getData(path, watch ? watchManager.defaultWatcher : <span class="keyword">null</span>, stat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getData(<span class="keyword">final</span> String path, Watcher watcher, Stat stat) <span class="keyword">throws</span> KeeperException, InterruptedException &#123;</span><br><span class="line">        <span class="keyword">final</span> String clientPath = path;</span><br><span class="line">        PathUtils.validatePath(clientPath);</span><br><span class="line">        <span class="comment">// the watch contains the un-chroot path</span></span><br><span class="line">        WatchRegistration wcb = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (watcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            wcb = <span class="keyword">new</span> DataWatchRegistration(watcher, clientPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> String serverPath = prependChroot(clientPath);</span><br><span class="line">        RequestHeader h = <span class="keyword">new</span> RequestHeader();</span><br><span class="line">        h.setType(ZooDefs.OpCode.getData);</span><br><span class="line">        GetDataRequest request = <span class="keyword">new</span> GetDataRequest();</span><br><span class="line">        request.setPath(serverPath);</span><br><span class="line">        request.setWatch(watcher != <span class="keyword">null</span>); <span class="comment">// 是否注册监听器</span></span><br><span class="line">        GetDataResponse response = <span class="keyword">new</span> GetDataResponse();</span><br><span class="line">        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);</span><br><span class="line">        <span class="keyword">if</span> (r.getErr() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stat != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DataTree.copyStat(response.getStat(), stat);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response.getData();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务端最终通过<strong><code>FinalRequestProcessor</code></strong>的<strong><code>processRequest</code></strong>调用<strong><code>ZKDatabase</code></strong>的<strong><code>getData</code></strong>方法获取数据，若客户端请求时watch为true，则<strong><code>Watcher</code></strong>不为<strong><code>null</code></strong>则将其添加到<strong><code>dataWatches</code></strong>中。若发生数据变更时则调用<strong><code>WatchManager</code></strong>的<strong><code>triggerWatch</code></strong>方法触发监听机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKDatabase</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getData(String path, Stat stat, Watcher watcher) <span class="keyword">throws</span> KeeperException.NoNodeException &#123;</span><br><span class="line">        <span class="keyword">return</span> dataTree.getData(path, stat, watcher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTree</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getData(String path, Stat stat, Watcher watcher) <span class="keyword">throws</span> KeeperException.NoNodeException &#123;</span><br><span class="line">        DataNode n = nodes.get(path);</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (n) &#123;</span><br><span class="line">            n.copyStat(stat);</span><br><span class="line">            <span class="keyword">if</span> (watcher != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dataWatches.addWatch(path, watcher);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> n.data;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">addWatch</span><span class="params">(String path, Watcher watcher)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Watcher&gt; list = watchTable.get(path);</span><br><span class="line">        <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">            list = <span class="keyword">new</span> HashSet&lt;Watcher&gt;(<span class="number">4</span>);</span><br><span class="line">            watchTable.put(path, list);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(watcher);</span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; paths = watch2Paths.get(watcher);</span><br><span class="line">        <span class="keyword">if</span> (paths == <span class="keyword">null</span>) &#123;</span><br><span class="line">            paths = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">            watch2Paths.put(watcher, paths);</span><br><span class="line">        &#125;</span><br><span class="line">        paths.add(path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>triggerWatch触发监听机制首先将该路径对应的监听器移除，然后调用每个监听器对应客户端对应的<strong><code>NettyServerCnxn</code></strong>的process方法通知客户端节点变更，客户端收到通知会触发监听回调方法。<strong>监听的回调方法并没有注册到服务端</strong>，只是将<strong>监听路径</strong>注册到了服务端，当服务端发生数据变更时，遍历监听的路径回发给客户端，<strong>客户端通过路径匹配到对应的监听器回调方法完成回调</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WatchManager</span> </span>&#123;</span><br><span class="line">    <span class="function">Set&lt;Watcher&gt; <span class="title">triggerWatch</span><span class="params">(String path, EventType type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> triggerWatch(path, type, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Set&lt;Watcher&gt; <span class="title">triggerWatch</span><span class="params">(String path, EventType type, Set&lt;Watcher&gt; supress)</span> </span>&#123;</span><br><span class="line">        WatchedEvent e = <span class="keyword">new</span> WatchedEvent(type, KeeperState.SyncConnected, path);</span><br><span class="line">        HashSet&lt;Watcher&gt; watchers;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            watchers = watchTable.remove(path); <span class="comment">// 一次性监听体现</span></span><br><span class="line">            <span class="keyword">if</span> (watchers == <span class="keyword">null</span> || watchers.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Watcher w : watchers) &#123;</span><br><span class="line">                HashSet&lt;String&gt; paths = watch2Paths.get(w);</span><br><span class="line">                <span class="keyword">if</span> (paths != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    paths.remove(path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Watcher w : watchers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (supress != <span class="keyword">null</span> &amp;&amp; supress.contains(w)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w.process(e); <span class="comment">// 调用NettyServerCnxn的process方法节点变更通知客户端，客户端收到通知会触发监听回调方法调用</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> watchers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerCnxn</span> <span class="keyword">extends</span> <span class="title">ServerCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent event)</span> </span>&#123;</span><br><span class="line">        ReplyHeader h = <span class="keyword">new</span> ReplyHeader(-<span class="number">1</span>, -<span class="number">1L</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// Convert WatchedEvent to a type that can be sent over the wire</span></span><br><span class="line">        WatcherEvent e = event.getWrapper();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sendResponse(h, e, <span class="string">"notification"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整个Zookeeper就是一个&lt;strong&gt;多节点分布式一致性算法&lt;/strong&gt;的实现，底层采用的实现协议是&lt;strong&gt;&lt;code&gt;ZAB&lt;/code&gt;&lt;/strong&gt;，即&lt;strong&gt;&lt;code&gt;Zookeeper Atomic Broadcast&lt;/cod
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Zookeeper" scheme="https://yaoyinglong.github.io/categories/Cloud/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="https://yaoyinglong.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper服务端之ZAB</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Zookeeper/Zookeeper%E6%9C%8D%E5%8A%A1%E7%AB%AF%E4%B9%8BZAB/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Zookeeper/Zookeeper服务端之ZAB/</id>
    <published>2021-12-19T16:00:00.000Z</published>
    <updated>2021-12-21T14:53:14.585Z</updated>
    
    <content type="html"><![CDATA[<p>服务端处理客户端的请求<strong>入口</strong>是通过<strong><code>NettyServerCnxnFactory</code>无产构造函数</strong>中启动<strong><code>Netty</code>服务端</strong>时绑定的<strong><code>CnxnChannelHandler</code></strong>的<strong><code>channelRead</code></strong>方法。该<strong>构造方法</strong>是<strong>集群启动时</strong>通过<strong><code>QuorumPeerMain</code></strong>的<strong><code>runFromConfig</code></strong>中调用<strong><code>ServerCnxnFactory.createFactory()</code>反射调用</strong>。</p><p>当收到客户端请求后<strong><code>CnxnChannelHandler</code></strong>的<strong><code>channelRead</code></strong>方法中调用<strong><code>NettyServerCnxn</code></strong>的<strong><code>processMessage</code></strong>方法从而调用<strong><code>receiveMessage</code></strong>方法，将数据读到<strong><code>ByteBuffer</code></strong>中，然后调用<strong><code>ZooKeeperServer</code></strong>的<strong><code>processPacket</code></strong>处理数据包，最终在<strong><code>submitRequest</code></strong>方法中通过执行<strong><code>firstProcessor</code></strong>的<strong><code>processRequest</code></strong>方法<strong>执行请求处理链</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerCnxnFactory</span> <span class="keyword">extends</span> <span class="title">ServerCnxnFactory</span> </span>&#123;</span><br><span class="line">    CnxnChannelHandler channelHandler = <span class="keyword">new</span> CnxnChannelHandler();</span><br><span class="line">    NettyServerCnxnFactory() &#123;</span><br><span class="line">        x509Util = <span class="keyword">new</span> ClientX509Util();</span><br><span class="line">        <span class="keyword">boolean</span> usePortUnification = Boolean.getBoolean(PORT_UNIFICATION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (usePortUnification) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                QuorumPeerConfig.configureSSLAuth();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (QuorumPeerConfig.ConfigException e) &#123;</span><br><span class="line">                usePortUnification = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.shouldUsePortUnification = usePortUnification;</span><br><span class="line">        <span class="comment">// 初始化Netty线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = NettyUtils.newNioOrEpollEventLoopGroup(NettyUtils.getClientReachableLocalInetAddressCount());</span><br><span class="line">        EventLoopGroup workerGroup = NettyUtils.newNioOrEpollEventLoopGroup();</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</span><br><span class="line">            .group(bossGroup, workerGroup)</span><br><span class="line">            .channel(NettyUtils.nioOrEpollServerSocketChannel())</span><br><span class="line">            .option(ChannelOption.SO_REUSEADDR, <span class="keyword">true</span>) <span class="comment">// parent channel options</span></span><br><span class="line">            .childOption(ChannelOption.TCP_NODELAY, <span class="keyword">true</span>) <span class="comment">// child channels options</span></span><br><span class="line">            .childOption(ChannelOption.SO_LINGER, -<span class="number">1</span>)</span><br><span class="line">            .childHandler(<span class="keyword">new</span> ChannelInitializer&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                    ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">                        initSSL(pipeline, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shouldUsePortUnification) &#123;</span><br><span class="line">                        initSSL(pipeline, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    pipeline.addLast(<span class="string">"servercnxnfactory"</span>, channelHandler); <span class="comment">// 绑定业务处理CnxnChannelHandler</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        <span class="keyword">this</span>.bootstrap = configureBootstrapAllocator(bootstrap);</span><br><span class="line">        <span class="keyword">this</span>.bootstrap.validate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnxnChannelHandler</span> <span class="keyword">extends</span> <span class="title">ChannelDuplexHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();</span><br><span class="line">                <span class="keyword">if</span> (cnxn == <span class="keyword">null</span>) &#123;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cnxn.processMessage((ByteBuf) msg); <span class="comment">// 客户端执行命令最终调用该方法</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ex;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerCnxn</span> <span class="keyword">extends</span> <span class="title">ServerCnxn</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">processMessage</span><span class="params">(ByteBuf buf)</span> </span>&#123;</span><br><span class="line">        checkIsInEventLoop(<span class="string">"processMessage"</span>);</span><br><span class="line">        <span class="keyword">if</span> (throttled.get()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (queuedBuffer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                queuedBuffer = channel.alloc().compositeBuffer();</span><br><span class="line">            &#125;</span><br><span class="line">            appendToQueuedBuffer(buf.retainedDuplicate());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (queuedBuffer != <span class="keyword">null</span>) &#123;</span><br><span class="line">                appendToQueuedBuffer(buf.retainedDuplicate());</span><br><span class="line">                processQueuedBuffer();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                receiveMessage(buf); <span class="comment">// 处理客户端命令</span></span><br><span class="line">                <span class="keyword">if</span> (!closingChannel &amp;&amp; buf.isReadable()) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (queuedBuffer == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        queuedBuffer = channel.alloc().compositeBuffer();</span><br><span class="line">                    &#125;</span><br><span class="line">                    appendToQueuedBuffer(buf.retainedSlice(buf.readerIndex(), buf.readableBytes()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">receiveMessage</span><span class="params">(ByteBuf message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span>(message.isReadable() &amp;&amp; !throttled.get()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (bb != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                        ByteBuffer dat = bb.duplicate();</span><br><span class="line">                        dat.flip();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (bb.remaining() &gt; message.readableBytes()) &#123;</span><br><span class="line">                        <span class="keyword">int</span> newLimit = bb.position() + message.readableBytes();</span><br><span class="line">                        bb.limit(newLimit);</span><br><span class="line">                    &#125;</span><br><span class="line">                    message.readBytes(bb);</span><br><span class="line">                    bb.limit(bb.capacity());</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                        ByteBuffer dat = bb.duplicate();</span><br><span class="line">                        dat.flip();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (bb.remaining() == <span class="number">0</span>) &#123;</span><br><span class="line">                        packetReceived();</span><br><span class="line">                        bb.flip();</span><br><span class="line">                        ZooKeeperServer zks = <span class="keyword">this</span>.zkServer;</span><br><span class="line">                        <span class="keyword">if</span> (zks == <span class="keyword">null</span> || !zks.isRunning()) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"ZK down"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">                            zks.processPacket(<span class="keyword">this</span>, bb);</span><br><span class="line">                            <span class="keyword">if</span> (zks.shouldThrottle(outstandingCount.incrementAndGet())) &#123;</span><br><span class="line">                                disableRecvNoWait();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            zks.processConnectRequest(<span class="keyword">this</span>, bb);</span><br><span class="line">                            initialized = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        bb = <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                        ByteBuffer dat = bbLen.duplicate();</span><br><span class="line">                        dat.flip();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (message.readableBytes() &lt; bbLen.remaining()) &#123;</span><br><span class="line">                        bbLen.limit(bbLen.position() + message.readableBytes());</span><br><span class="line">                    &#125;</span><br><span class="line">                    message.readBytes(bbLen);</span><br><span class="line">                    bbLen.limit(bbLen.capacity());</span><br><span class="line">                    <span class="keyword">if</span> (bbLen.remaining() == <span class="number">0</span>) &#123;</span><br><span class="line">                        bbLen.flip();</span><br><span class="line">                        <span class="keyword">int</span> len = bbLen.getInt();</span><br><span class="line">                        bbLen.clear();</span><br><span class="line">                        <span class="keyword">if</span> (!initialized) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (checkFourLetterWord(channel, message, len)) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (len &lt; <span class="number">0</span> || len &gt; BinaryInputArchive.maxBuffer) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Len error "</span> + len);</span><br><span class="line">                        &#125;</span><br><span class="line">                        bb = ByteBuffer.allocate(len);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">            close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperServer</span> <span class="keyword">implements</span> <span class="title">SessionExpirer</span>, <span class="title">ServerStats</span>.<span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processPacket</span><span class="params">(ServerCnxn cnxn, ByteBuffer incomingBuffer)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStream bais = <span class="keyword">new</span> ByteBufferInputStream(incomingBuffer);</span><br><span class="line">        BinaryInputArchive bia = BinaryInputArchive.getArchive(bais);</span><br><span class="line">        RequestHeader h = <span class="keyword">new</span> RequestHeader();</span><br><span class="line">        h.deserialize(bia, <span class="string">"header"</span>);</span><br><span class="line">        incomingBuffer = incomingBuffer.slice();</span><br><span class="line">        <span class="keyword">if</span> (h.getType() == OpCode.auth) &#123;</span><br><span class="line">            AuthPacket authPacket = <span class="keyword">new</span> AuthPacket();</span><br><span class="line">            ByteBufferInputStream.byteBuffer2Record(incomingBuffer, authPacket);</span><br><span class="line">            String scheme = authPacket.getScheme();</span><br><span class="line">            AuthenticationProvider ap = ProviderRegistry.getProvider(scheme);</span><br><span class="line">            Code authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class="line">            <span class="keyword">if</span> (ap != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    authReturn = ap.handleAuthentication(cnxn, authPacket.getAuth());</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                    authReturn = KeeperException.Code.AUTHFAILED;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (authReturn == KeeperException.Code.OK) &#123;</span><br><span class="line">                ReplyHeader rh = <span class="keyword">new</span> ReplyHeader(h.getXid(), <span class="number">0</span>, KeeperException.Code.OK.intValue());</span><br><span class="line">                cnxn.sendResponse(rh, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ReplyHeader rh = <span class="keyword">new</span> ReplyHeader(h.getXid(), <span class="number">0</span>, KeeperException.Code.AUTHFAILED.intValue());</span><br><span class="line">                cnxn.sendResponse(rh, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                cnxn.sendBuffer(ServerCnxnFactory.closeConn);</span><br><span class="line">                cnxn.disableRecv();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (h.getType() == OpCode.sasl) &#123;</span><br><span class="line">                Record rsp = processSasl(incomingBuffer, cnxn);</span><br><span class="line">                ReplyHeader rh = <span class="keyword">new</span> ReplyHeader(h.getXid(), <span class="number">0</span>, KeeperException.Code.OK.intValue());</span><br><span class="line">                cnxn.sendResponse(rh, rsp, <span class="string">"response"</span>); <span class="comment">// not sure about 3rd arg..what is it?</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Request si = <span class="keyword">new</span> Request(cnxn, cnxn.getSessionId(), h.getXid(), h.getType(), incomingBuffer, cnxn.getAuthInfo());</span><br><span class="line">                si.setOwner(ServerCnxn.me);</span><br><span class="line">                setLocalSessionFlag(si);</span><br><span class="line">                submitRequest(si);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cnxn.incrOutstandingRequests(h);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submitRequest</span><span class="params">(Request si)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (firstProcessor == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> (state == State.INITIAL) &#123;</span><br><span class="line">                        wait(<span class="number">1000</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (firstProcessor == <span class="keyword">null</span> || state != State.RUNNING) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not started"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            touch(si.cnxn);</span><br><span class="line">            <span class="keyword">boolean</span> validpacket = Request.isValid(si.type);</span><br><span class="line">            <span class="keyword">if</span> (validpacket) &#123;</span><br><span class="line">                firstProcessor.processRequest(si);</span><br><span class="line">                <span class="keyword">if</span> (si.cnxn != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    incInProcess();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">new</span> UnimplementedRequestProcessor().processRequest(si);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MissingSessionException e) &#123;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RequestProcessorException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若是<strong>单机</strong>则是通过<strong><code>ZooKeeperServerMain</code></strong>的<strong><code>runFromConfig</code></strong>中调用<strong><code>ServerCnxnFactory</code></strong>的<strong><code>startup</code></strong>方法，最终调用子类<strong><code>NettyServerCnxnFactory</code></strong>的<strong><code>startup</code></strong>方法从而调用<strong><code>ZooKeeperServer</code></strong>子类<strong><code>LeaderZooKeeperServer</code></strong>的<strong><code>startup</code></strong>方法从而调用其<strong><code>setupRequestProcessors</code></strong>方法完成<strong>Leader请求处理链加载</strong>。若为<strong>集群</strong>则是<strong>在<code>Leader</code>选举出来后</strong>通过<strong><code>Leader</code></strong>的<strong><code>lead</code></strong>方法中调用<strong><code>startZkServer</code></strong>从而调用<strong><code>ZooKeeperServer</code></strong>子类<strong><code>LeaderZooKeeperServer</code></strong>的<strong><code>startup</code></strong>方法从而调用其<strong><code>setupRequestProcessors</code></strong>方法完成<strong>Leader请求处理链加载</strong>。</p><p>最终产生的请求处理链为<strong><code>LeaderRequestProcessor</code></strong>、<strong><code>PrepRequestProcessor</code></strong>、<strong><code>ProposalRequestProcessor</code></strong>、<strong><code>CommitProcessor</code></strong>、<strong><code>ToBeAppliedRequestProcessor</code></strong>、<strong><code>FinalRequestProcessor</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startZkServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        lastCommitted = zk.getZxid();</span><br><span class="line">        QuorumVerifier newQV = self.getLastSeenQuorumVerifier();</span><br><span class="line">        Long designatedLeader = getDesignatedLeader(newLeaderProposal, zk.getZxid());</span><br><span class="line">        self.processReconfig(newQV, designatedLeader, zk.getZxid(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (designatedLeader != self.getId()) &#123;</span><br><span class="line">            allowedToCommit = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        zk.startup(); <span class="comment">// 加载</span></span><br><span class="line">        self.updateElectionVote(getEpoch());</span><br><span class="line">        zk.getZKDatabase().setlastProcessedZxid(zk.getZxid());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderZooKeeperServer</span> <span class="keyword">extends</span> <span class="title">QuorumZooKeeperServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.startup();</span><br><span class="line">        <span class="keyword">if</span> (containerManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">            containerManager.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">        RequestProcessor toBeAppliedProcessor = <span class="keyword">new</span> Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());</span><br><span class="line">        commitProcessor = <span class="keyword">new</span> CommitProcessor(toBeAppliedProcessor, Long.toString(getServerId()), <span class="keyword">false</span>, getZooKeeperServerListener());</span><br><span class="line">        commitProcessor.start();</span><br><span class="line">        ProposalRequestProcessor proposalProcessor = <span class="keyword">new</span> ProposalRequestProcessor(<span class="keyword">this</span>, commitProcessor);</span><br><span class="line">        proposalProcessor.initialize();</span><br><span class="line">        prepRequestProcessor = <span class="keyword">new</span> PrepRequestProcessor(<span class="keyword">this</span>, proposalProcessor);</span><br><span class="line">        prepRequestProcessor.start();</span><br><span class="line">        firstProcessor = <span class="keyword">new</span> LeaderRequestProcessor(<span class="keyword">this</span>, prepRequestProcessor);</span><br><span class="line">        setupContainerManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperServer</span> <span class="keyword">implements</span> <span class="title">SessionExpirer</span>, <span class="title">ServerStats</span>.<span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">startup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sessionTracker == <span class="keyword">null</span>) &#123;</span><br><span class="line">            createSessionTracker();</span><br><span class="line">        &#125;</span><br><span class="line">        startSessionTracker();</span><br><span class="line">        setupRequestProcessors(); <span class="comment">// 回调子类LeaderZooKeeperServer的setupRequestProcessors方法</span></span><br><span class="line">        registerJMX();</span><br><span class="line">        setState(State.RUNNING);</span><br><span class="line">        notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LeaderRequestProcessor"><a href="#LeaderRequestProcessor" class="headerlink" title="LeaderRequestProcessor"></a>LeaderRequestProcessor</h4><p>首先执行<strong><code>LeaderRequestProcessor</code></strong>的<strong><code>processRequest</code></strong>方法完成<strong>检查处理<code>Session</code></strong>，然后继续调用<strong><code>PrepRequestProcessor</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeaderRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">        Request upgradeRequest = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            upgradeRequest = lzks.checkUpgradeSession(request); <span class="comment">// 检查处理Session</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException ke) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.getHdr().setType(OpCode.error);</span><br><span class="line">                request.setTxn(<span class="keyword">new</span> ErrorTxn(ke.code().intValue()));</span><br><span class="line">            &#125;</span><br><span class="line">            request.setException(ke);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ie) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (upgradeRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">            nextProcessor.processRequest(upgradeRequest);</span><br><span class="line">        &#125;</span><br><span class="line">        nextProcessor.processRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PrepRequestProcessor"><a href="#PrepRequestProcessor" class="headerlink" title="PrepRequestProcessor"></a>PrepRequestProcessor</h4><p>调用<strong><code>PrepRequestProcessor</code></strong>的<strong><code>processRequest</code></strong>方法只是将请求任务放入<strong><code>submittedRequests</code>阻塞队列</strong>中，<strong><code>PrepRequestProcessor</code></strong>本身是一个线程类，在<strong><code>LeaderZooKeeperServer</code></strong>中创建时就被启动，当队列中有数据时通过<strong><code>pRequest</code></strong>方法根据<strong><code>OpCode</code></strong>执行对应的逻辑，<strong>主要是做一些校验</strong>，若有变化则将其其添加到<strong><code>ZooKeeperServer</code></strong>的<strong><code>outstandingChanges</code></strong>队列中，然后调用下一个处理器<strong><code>ProposalRequestProcessor</code></strong>，生成<strong>事务<code>zxid</code></strong>处理客户端命令逻辑是<strong>单线程从队列中拿数据处理</strong>保证事务处理的顺序一致性，且只在主节点调用<strong><code>ZooKeeperServer</code></strong>的<strong><code>getNextZxid</code></strong>方法通过<strong><code>AtomicLong</code></strong>自增得到<strong>事务<code>zxid</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrepRequestProcessor</span> <span class="keyword">extends</span> <span class="title">ZooKeeperCriticalThread</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    LinkedBlockingQueue&lt;Request&gt; submittedRequests = <span class="keyword">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        submittedRequests.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; <span class="comment">// 单线程处理</span></span><br><span class="line">                Request request = submittedRequests.take();</span><br><span class="line">                <span class="keyword">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">                <span class="keyword">if</span> (request.type == OpCode.ping) &#123;</span><br><span class="line">                    traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (Request.requestOfDeath == request) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pRequest(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RequestProcessorException e) &#123;</span><br><span class="line">            handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">pRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">        request.setHdr(<span class="keyword">null</span>);</span><br><span class="line">        request.setTxn(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (request.type) &#123;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createContainer:</span><br><span class="line">                <span class="keyword">case</span> OpCode.create:</span><br><span class="line">                <span class="keyword">case</span> OpCode.create2:</span><br><span class="line">                    CreateRequest create2Request = <span class="keyword">new</span> CreateRequest();</span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createTTL:</span><br><span class="line">                    CreateTTLRequest createTtlRequest = <span class="keyword">new</span> CreateTTLRequest();</span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.deleteContainer:</span><br><span class="line">                <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">                    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest();</span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">                    SetDataRequest setDataRequest = <span class="keyword">new</span> SetDataRequest();                </span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.reconfig:</span><br><span class="line">                    ReconfigRequest reconfigRequest = <span class="keyword">new</span> ReconfigRequest();</span><br><span class="line">                    ByteBufferInputStream.byteBuffer2Record(request.request, reconfigRequest);</span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.setACL:</span><br><span class="line">                    SetACLRequest setAclRequest = <span class="keyword">new</span> SetACLRequest();                </span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.check:</span><br><span class="line">                    CheckVersionRequest checkRequest = <span class="keyword">new</span> CheckVersionRequest();              </span><br><span class="line">                    pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.multi:</span><br><span class="line">                    MultiTransactionRecord multiRequest = <span class="keyword">new</span> MultiTransactionRecord();</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        ByteBufferInputStream.byteBuffer2Record(request.request, multiRequest);</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(IOException e) &#123;</span><br><span class="line">                        request.setHdr(<span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(), Time.currentWallTime(), OpCode.multi));</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                    List&lt;Txn&gt; txns = <span class="keyword">new</span> ArrayList&lt;Txn&gt;();</span><br><span class="line">                    <span class="keyword">long</span> zxid = zks.getNextZxid();</span><br><span class="line">                    KeeperException ke = <span class="keyword">null</span>;</span><br><span class="line">                    Map&lt;String, ChangeRecord&gt; pendingChanges = getPendingChanges(multiRequest);</span><br><span class="line">                    <span class="keyword">for</span>(Op op: multiRequest) &#123;</span><br><span class="line">                        Record subrequest = op.toRequestRecord();</span><br><span class="line">                        <span class="keyword">int</span> type;</span><br><span class="line">                        Record txn;</span><br><span class="line">                        <span class="keyword">if</span> (ke != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            type = OpCode.error;</span><br><span class="line">                            txn = <span class="keyword">new</span> ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123; <span class="comment">/* Prep the request and convert to a Txn */</span></span><br><span class="line">                            <span class="keyword">try</span> &#123;</span><br><span class="line">                                pRequest2Txn(op.getType(), zxid, request, subrequest, <span class="keyword">false</span>);</span><br><span class="line">                                type = request.getHdr().getType();</span><br><span class="line">                                txn = request.getTxn();</span><br><span class="line">                            &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">                                ke = e;</span><br><span class="line">                                type = OpCode.error;</span><br><span class="line">                                txn = <span class="keyword">new</span> ErrorTxn(e.code().intValue());</span><br><span class="line">                                request.setException(e);</span><br><span class="line">                                rollbackPendingChanges(zxid, pendingChanges);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">                        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);</span><br><span class="line">                        txn.serialize(boa, <span class="string">"request"</span>) ;</span><br><span class="line">                        ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());</span><br><span class="line">                        txns.add(<span class="keyword">new</span> Txn(type, bb.array()));</span><br><span class="line">                    &#125;</span><br><span class="line">                    request.setHdr(<span class="keyword">new</span> TxnHeader(request.sessionId, request.cxid, zxid, Time.currentWallTime(), request.type));</span><br><span class="line">                    request.setTxn(<span class="keyword">new</span> MultiTxn(txns));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createSession:</span><br><span class="line">                <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">                    <span class="keyword">if</span> (!request.isLocalSession()) &#123;</span><br><span class="line">                        pRequest2Txn(request.type, zks.getNextZxid(), request, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.sync:</span><br><span class="line">                <span class="keyword">case</span> OpCode.exists:</span><br><span class="line">                <span class="keyword">case</span> OpCode.getData:</span><br><span class="line">                <span class="keyword">case</span> OpCode.getACL:</span><br><span class="line">                <span class="keyword">case</span> OpCode.getChildren:</span><br><span class="line">                <span class="keyword">case</span> OpCode.getChildren2:</span><br><span class="line">                <span class="keyword">case</span> OpCode.ping:</span><br><span class="line">                <span class="keyword">case</span> OpCode.setWatches:</span><br><span class="line">                <span class="keyword">case</span> OpCode.checkWatches:</span><br><span class="line">                <span class="keyword">case</span> OpCode.removeWatches:</span><br><span class="line">                    zks.sessionTracker.checkSession(request.sessionId, request.getOwner());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.getHdr().setType(OpCode.error);</span><br><span class="line">                request.setTxn(<span class="keyword">new</span> ErrorTxn(e.code().intValue()));</span><br><span class="line">            &#125;</span><br><span class="line">            request.setException(e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            ByteBuffer bb = request.request;</span><br><span class="line">            <span class="keyword">if</span>(bb != <span class="keyword">null</span>)&#123;</span><br><span class="line">                bb.rewind();</span><br><span class="line">                <span class="keyword">while</span> (bb.hasRemaining()) &#123;</span><br><span class="line">                    sb.append(Integer.toHexString(bb.get() &amp; <span class="number">0xff</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(<span class="string">"request buffer is null"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.getHdr().setType(OpCode.error);</span><br><span class="line">                request.setTxn(<span class="keyword">new</span> ErrorTxn(Code.MARSHALLINGERROR.intValue()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        request.zxid = zks.getZxid();</span><br><span class="line">        nextProcessor.processRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperServer</span> <span class="keyword">implements</span> <span class="title">SessionExpirer</span>, <span class="title">ServerStats</span>.<span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicLong hzxid = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getNextZxid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hzxid.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ProposalRequestProcessor"><a href="#ProposalRequestProcessor" class="headerlink" title="ProposalRequestProcessor"></a>ProposalRequestProcessor</h4><p><strong><code>ProposalRequestProcessor</code></strong>主要完成三件事，首先<strong>调用<code>CommitProcessor</code></strong>，然后<strong>给所有<code>follower</code>发送<code>proposal</code></strong>，最后<strong>将数据存储到本机日志文件中</strong>。若是<strong><code>getData</code></strong>等<strong>不涉及事务变更</strong>的请求，则其<strong>Request的hdr属性为空</strong>，则直接<strong>跳过给follower发送proposal以及将数据保存到本机日志文件中的步骤</strong>。</p><p><strong>给所有<code>follower</code>发送<code>proposal</code></strong>是通过调用<strong><code>Leader</code></strong>的<strong><code>propose</code></strong>方法，首先封装要发送给<strong><code>follower</code></strong>的<strong><code>proposal</code></strong>，然后遍历所有follower发送packet，实际是将packet放入各自follower对应<strong><code>LearnerHandler</code></strong>的<strong><code>queuedPackets</code>阻塞队列</strong>中。队列中的数据最终被各自的<strong><code>LearnerHandler</code></strong>线程中调用<strong><code>startSendingPackets</code></strong>方法<strong>启动一个新线程</strong>完成队列的消费从而给<strong><code>follower</code></strong>发送<strong><code>proposal</code></strong>。<strong><code>LearnerHandler</code></strong>线程是在<strong>选举完成后<code>Leader</code>的lead方法</strong>中<strong><code>LearnerCnxAcceptor</code></strong>线程启动中启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProposalRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProposalRequestProcessor</span><span class="params">(LeaderZooKeeperServer zks, RequestProcessor nextProcessor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.zks = zks;</span><br><span class="line">        <span class="keyword">this</span>.nextProcessor = nextProcessor;</span><br><span class="line">        AckRequestProcessor ackProcessor = <span class="keyword">new</span> AckRequestProcessor(zks.getLeader());</span><br><span class="line">        syncProcessor = <span class="keyword">new</span> SyncRequestProcessor(zks, ackProcessor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        syncProcessor.start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> LearnerSyncRequest)&#123;</span><br><span class="line">            zks.getLeader().processSync((LearnerSyncRequest)request);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nextProcessor.processRequest(request); <span class="comment">// 调用CommitProcessor</span></span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123; <span class="comment">// 若为getData等不需要同步数据的请求则跳过以下两步</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    zks.getLeader().propose(request); <span class="comment">// 给所有follower发送propose</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (XidRolloverException e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> RequestProcessorException(e.getMessage(), e);</span><br><span class="line">                &#125;</span><br><span class="line">                syncProcessor.processRequest(request); <span class="comment">// 将数据存储到本机日志文件中，ACK处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Proposal <span class="title">propose</span><span class="params">(Request request)</span> <span class="keyword">throws</span> XidRolloverException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((request.zxid &amp; <span class="number">0xffffffffL</span>) == <span class="number">0xffffffffL</span>) &#123;</span><br><span class="line">            String msg = <span class="string">"zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start"</span>;</span><br><span class="line">            shutdown(msg);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> XidRolloverException(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">byte</span>[] data = SerializeUtils.serializeRequest(request);</span><br><span class="line">        proposalStats.setLastBufferSize(data.length);</span><br><span class="line">        QuorumPacket pp = <span class="keyword">new</span> QuorumPacket(Leader.PROPOSAL, request.zxid, data, <span class="keyword">null</span>);</span><br><span class="line">        Proposal p = <span class="keyword">new</span> Proposal();</span><br><span class="line">        p.packet = pp;</span><br><span class="line">        p.request = request;</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">            p.addQuorumVerifier(self.getQuorumVerifier());</span><br><span class="line">            <span class="keyword">if</span> (request.getHdr().getType() == OpCode.reconfig)&#123;</span><br><span class="line">                self.setLastSeenQuorumVerifier(request.qv, <span class="keyword">true</span>);                     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (self.getQuorumVerifier().getVersion()&lt;self.getLastSeenQuorumVerifier().getVersion()) &#123;</span><br><span class="line">                p.addQuorumVerifier(self.getLastSeenQuorumVerifier());</span><br><span class="line">            &#125;</span><br><span class="line">            lastProposed = p.packet.getZxid();</span><br><span class="line">            outstandingProposals.put(lastProposed, p);</span><br><span class="line">            sendPacket(pp); <span class="comment">// 遍历follower放入其对应的阻塞队列中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendPacket</span><span class="params">(QuorumPacket qp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (forwardingFollowers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (LearnerHandler f : forwardingFollowers) &#123;</span><br><span class="line">                f.queuePacket(qp); <span class="comment">// 将Proposal放入对应阻塞队列中</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnerHandler</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startSendingPackets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sendingThreadStarted) &#123;</span><br><span class="line">            <span class="comment">// Start sending packets</span></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Thread.currentThread().setName(<span class="string">"Sender-"</span> + sock.getRemoteSocketAddress());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sendPackets(); <span class="comment">// 从队列中取出Proposal发送给对应的follower</span></span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">            sendingThreadStarted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackets</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                QuorumPacket p;</span><br><span class="line">                p = queuedPackets.poll(); <span class="comment">// 从队列中拿packet发给follower</span></span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bufferedOutput.flush();</span><br><span class="line">                    p = queuedPackets.take();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == proposalOfDeath) &#123;<span class="comment">// Packet of death!</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.getType() == Leader.PING) &#123;</span><br><span class="line">                    traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.getType() == Leader.PROPOSAL) &#123;</span><br><span class="line">                    syncLimitCheck.updateProposal(p.getZxid(), System.nanoTime());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                    ZooTrace.logQuorumPacket(LOG, traceMask, <span class="string">'o'</span>, p);</span><br><span class="line">                &#125;</span><br><span class="line">                oa.writeRecord(p, <span class="string">"packet"</span>); <span class="comment">// 使用jute序列化方式发给follower</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!sock.isClosed()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sock.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span>(IOException ie) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>将数据存储到本机日志文件中</strong>是通过在<strong><code>ProposalRequestProcessor</code>构造方法</strong>中创建的<strong><code>SyncRequestProcessor</code></strong>和<strong><code>AckRequestProcessor</code></strong>来完成。<strong><code>SyncRequestProcessor</code></strong>也是线程类通过<strong><code>ProposalRequestProcessor</code></strong>的<strong><code>initialize</code></strong>方法启动。</p><p>调用<strong><code>SyncRequestProcessor</code></strong>的<strong><code>processRequest</code></strong>方法只是将Request放入到<strong>阻塞队列</strong>中。通过其run方法异步处理，将其更新到事务日志文件中，若是Leader则调用<strong><code>AckRequestProcessor</code></strong>从而调用<strong><code>Leader</code></strong>的<strong><code>processAck</code></strong>方法，通过<strong><code>addAck</code></strong>方法将当前节点<strong><code>ACK</code></strong>放入<strong><code>qvAcksetPairs</code></strong>中，然后调用<strong><code>tryToCommit</code></strong>方法<strong>判断收到的<code>ACK</code>是否超过半数</strong>，若未超过则退出，<strong>若超过则向所有<code>follower</code>发送<code>commit</code>命令且向<code>Observer</code>发送<code>proposal</code></strong>，最后<strong>唤醒<code>CommitProcessor</code>线程的<code>wait</code>等待</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncRequestProcessor</span> <span class="keyword">extends</span> <span class="title">ZooKeeperCriticalThread</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        queuedRequests.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> logCount = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> randRoll = r.nextInt(snapCount/<span class="number">2</span>);</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                Request si = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (toFlush.isEmpty()) &#123;</span><br><span class="line">                    si = queuedRequests.take();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    si = queuedRequests.poll();</span><br><span class="line">                    <span class="keyword">if</span> (si == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        flush(toFlush);</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (si == requestOfDeath) &#123; <span class="comment">// 若为失效请求则直接退出</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (si != <span class="keyword">null</span>) &#123;<span class="comment">// track the number of records written to the log</span></span><br><span class="line">                    <span class="keyword">if</span> (zks.getZKDatabase().append(si)) &#123;<span class="comment">// 添加到事务日志文件中</span></span><br><span class="line">                        logCount++;</span><br><span class="line">                        <span class="keyword">if</span> (logCount &gt; (snapCount / <span class="number">2</span> + randRoll)) &#123;</span><br><span class="line">                            randRoll = r.nextInt(snapCount/<span class="number">2</span>);</span><br><span class="line">                            zks.getZKDatabase().rollLog(); <span class="comment">// roll the log</span></span><br><span class="line">                            <span class="keyword">if</span> (snapInProcess != <span class="keyword">null</span> &amp;&amp; snapInProcess.isAlive()) &#123; <span class="comment">// take a snapshot</span></span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                snapInProcess = <span class="keyword">new</span> ZooKeeperThread(<span class="string">"Snapshot Thread"</span>) &#123;</span><br><span class="line">                                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            zks.takeSnapshot();</span><br><span class="line">                                        &#125; <span class="keyword">catch</span>(Exception e) &#123;&#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;;</span><br><span class="line">                                snapInProcess.start();</span><br><span class="line">                            &#125;</span><br><span class="line">                            logCount = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (toFlush.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (nextProcessor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            nextProcessor.processRequest(si);</span><br><span class="line">                            <span class="keyword">if</span> (nextProcessor <span class="keyword">instanceof</span> Flushable) &#123;</span><br><span class="line">                                ((Flushable)nextProcessor).flush();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    toFlush.add(si);</span><br><span class="line">                    <span class="keyword">if</span> (toFlush.size() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                        flush(toFlush);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            handleException(<span class="keyword">this</span>.getName(), t);</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            running = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">flush</span><span class="params">(LinkedList&lt;Request&gt; toFlush)</span> <span class="keyword">throws</span> IOException, RequestProcessorException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (toFlush.isEmpty()) <span class="keyword">return</span>;</span><br><span class="line">        zks.getZKDatabase().commit();</span><br><span class="line">        <span class="keyword">while</span> (!toFlush.isEmpty()) &#123;</span><br><span class="line">            Request i = toFlush.remove();</span><br><span class="line">            <span class="keyword">if</span> (nextProcessor != <span class="keyword">null</span>) &#123;</span><br><span class="line">                nextProcessor.processRequest(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (nextProcessor != <span class="keyword">null</span> &amp;&amp; nextProcessor <span class="keyword">instanceof</span> Flushable) &#123;</span><br><span class="line">            ((Flushable) nextProcessor).flush();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AckRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        QuorumPeer self = leader.self;</span><br><span class="line">        <span class="keyword">if</span>(self != <span class="keyword">null</span>) leader.processAck(self.getId(), request.zxid, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processAck</span><span class="params">(<span class="keyword">long</span> sid, <span class="keyword">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123; <span class="comment">// 在LearnerHandler中当Leader接收到Follower的ACK时也会调用该方法</span></span><br><span class="line">        <span class="keyword">if</span> (!allowedToCommit) <span class="keyword">return</span>; <span class="comment">// last op committed was a leader change - from now on </span></span><br><span class="line">        <span class="keyword">if</span> ((zxid &amp; <span class="number">0xffffffffL</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (outstandingProposals.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lastCommitted &gt;= zxid) &#123; <span class="comment">// The proposal has already been committed</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Proposal p = outstandingProposals.get(zxid); <span class="comment">// 在ProposalRequestProcessor中给给follower发送propose之前放入</span></span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        p.addAck(sid); <span class="comment">// leader节点直接将ack放入qvAcksetPairs中</span></span><br><span class="line">        <span class="keyword">boolean</span> hasCommitted = tryToCommit(p, zxid, followerAddr);</span><br><span class="line">        <span class="keyword">if</span> (hasCommitted &amp;&amp; p.request != <span class="keyword">null</span> &amp;&amp; p.request.getHdr().getType() == OpCode.reconfig) &#123;</span><br><span class="line">            <span class="keyword">long</span> curZxid = zxid;</span><br><span class="line">            <span class="keyword">while</span> (allowedToCommit &amp;&amp; hasCommitted &amp;&amp; p != <span class="keyword">null</span>) &#123;</span><br><span class="line">                curZxid++;</span><br><span class="line">                p = outstandingProposals.get(curZxid);</span><br><span class="line">                <span class="keyword">if</span> (p != <span class="keyword">null</span>) hasCommitted = tryToCommit(p, curZxid, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">synchronized</span> <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryToCommit</span><span class="params">(Proposal p, <span class="keyword">long</span> zxid, SocketAddress followerAddr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (outstandingProposals.containsKey(zxid - <span class="number">1</span>)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (!p.hasAllQuorums()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>; <span class="comment">// 若ACK未超过半数则直接返回false</span></span><br><span class="line">        &#125;</span><br><span class="line">        outstandingProposals.remove(zxid);</span><br><span class="line">        <span class="keyword">if</span> (p.request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            toBeApplied.add(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.request == <span class="keyword">null</span>) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (p.request.getHdr().getType() == OpCode.reconfig) &#123;</span><br><span class="line">            Long designatedLeader = getDesignatedLeader(p, zxid);</span><br><span class="line">            QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size() - <span class="number">1</span>).getQuorumVerifier();</span><br><span class="line">            self.processReconfig(newQV, designatedLeader, zk.getZxid(), <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (designatedLeader != self.getId()) &#123;</span><br><span class="line">                allowedToCommit = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            commitAndActivate(zxid, designatedLeader);</span><br><span class="line">            informAndActivate(p, designatedLeader);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            commit(zxid); <span class="comment">// 向follower发送commit命令</span></span><br><span class="line">            inform(p); <span class="comment">// 向Observer同步发送proposal</span></span><br><span class="line">        &#125;</span><br><span class="line">        zk.commitProcessor.commit(p.request); <span class="comment">// 唤醒CommitProcessor线程的wait等待</span></span><br><span class="line">        <span class="keyword">if</span> (pendingSyncs.containsKey(zxid)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (LearnerSyncRequest r : pendingSyncs.remove(zxid)) &#123;</span><br><span class="line">                sendSync(r);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            lastCommitted = zxid;</span><br><span class="line">        &#125;</span><br><span class="line">        QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.COMMIT, zxid, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        sendPacket(qp); <span class="comment">// 给所有follower发送COMMIT命令</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inform</span><span class="params">(Proposal proposal)</span> </span>&#123;</span><br><span class="line">        QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.INFORM, proposal.request.zxid, proposal.packet.getData(), <span class="keyword">null</span>);</span><br><span class="line">        sendObserverPacket(qp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendObserverPacket</span><span class="params">(QuorumPacket qp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (LearnerHandler f : getObservingLearners()) &#123;</span><br><span class="line">            f.queuePacket(qp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SyncedLearnerTracker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAck</span><span class="params">(Long sid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> change = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (QuorumVerifierAcksetPair qvAckset : qvAcksetPairs) &#123;</span><br><span class="line">            <span class="keyword">if</span> (qvAckset.getQuorumVerifier().getVotingMembers().containsKey(sid)) &#123;</span><br><span class="line">                qvAckset.getAckset().add(sid);</span><br><span class="line">                change = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> change;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CommitProcessor"><a href="#CommitProcessor" class="headerlink" title="CommitProcessor"></a>CommitProcessor</h4><p>当调用<strong><code>CommitProcessor</code></strong>的<strong><code>processRequest</code></strong>方法时会将Request添加到<strong><code>queuedRequests</code>阻塞队列</strong>中，通过run方法<strong>异步处理</strong>，首先明显<strong><code>queuedRequests</code></strong>不为null，正在等待提交的请求为null，正在提交的请求为null，故不会执行wait方法，<strong>若<code>Request</code>不需要<code>commit</code>如<code>getData</code>等命令，则直接往下执行下一个<code>RequestProcessor</code></strong>，否则将其放入<strong><code>nextPending</code></strong>中，然后执行<strong><code>processCommitted</code></strong>方法时由于<strong><code>committedRequests</code>为空</strong>则什么都不做，当再次执行while时，明显正在等待提交的请求不为null且<strong><code>committedRequests</code></strong>为空，则现场会被wait住。</p><p>当Leader收到的选票超过半数时在<strong><code>tryToCommit</code></strong>中调用<strong><code>CommitProcessor</code></strong>的<strong><code>commit</code></strong>方法将request放入<strong><code>committedRequests</code></strong>阻塞队列中且会唤醒<strong><code>CommitProcessor</code></strong>线程，然后执行<strong><code>processCommitted</code></strong>方法从而执行<strong><code>sendToNextProcessor</code></strong>，在<strong><code>CommitWorkRequest</code></strong>的<strong><code>doWork</code></strong>方法中调用下一个请求处理器<strong><code>ToBeAppliedRequestProcessor</code></strong>，且清除当前正在提交的请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommitProcessor</span> <span class="keyword">extends</span> <span class="title">ZooKeeperCriticalThread</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 在提交到来之前一直持有的请求</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;Request&gt; queuedRequests = <span class="keyword">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class="line">    <span class="comment">// 已提交的请求</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> LinkedBlockingQueue&lt;Request&gt; committedRequests = <span class="keyword">new</span> LinkedBlockingQueue&lt;Request&gt;();</span><br><span class="line">    <span class="comment">// 目前正在等待提交的请求</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> AtomicReference&lt;Request&gt; nextPending = <span class="keyword">new</span> AtomicReference&lt;Request&gt;();</span><br><span class="line">    <span class="comment">// 当前正在提交的请求（即发送到下一个处理器）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicReference&lt;Request&gt; currentlyCommitting = <span class="keyword">new</span> AtomicReference&lt;Request&gt;();</span><br><span class="line">    <span class="comment">// 当前正在处理的请求数</span></span><br><span class="line">    <span class="keyword">protected</span> AtomicInteger numRequestsProcessing = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stopped) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        queuedRequests.add(request);</span><br><span class="line">        <span class="keyword">if</span> (!isWaitingForCommit()) &#123;</span><br><span class="line">            wakeup(); <span class="comment">// 目前正在等待提交的请求为null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(Request request)</span> </span>&#123; <span class="comment">// 被Leader的tryToCommit调用或被LearnerZooKeeperServer的commit方法调用</span></span><br><span class="line">        <span class="keyword">if</span> (stopped || request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        committedRequests.add(request);</span><br><span class="line">        <span class="keyword">if</span> (!isProcessingCommit()) &#123; <span class="comment">// 正在提交的请求为null</span></span><br><span class="line">            wakeup(); <span class="comment">// 唤醒CommitProcessor线程的wait等待</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Request request;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stopped) &#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    <span class="keyword">while</span> (!stopped &amp;&amp; ((queuedRequests.isEmpty() || isWaitingForCommit() || isProcessingCommit()) &amp;&amp; (committedRequests.isEmpty() || isProcessingRequest()))) &#123;</span><br><span class="line">                        wait();<span class="comment">// (提交的请求为空 | 正在等待提交的请求不为null | 正在提交的请求数不为null) &amp;&amp; (已提交的请求为null || 正在处理的请求数不为0)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 正在等待提交的请求为null &amp;&amp; 正在提交的请求为null &amp;&amp; 提交的请求不为null，queuedRequests是阻塞队列没有数据poll会被阻塞</span></span><br><span class="line">                <span class="keyword">while</span> (!stopped &amp;&amp; !isWaitingForCommit() &amp;&amp; !isProcessingCommit() &amp;&amp; (request = queuedRequests.poll()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (needCommit(request)) &#123;</span><br><span class="line">                        nextPending.set(request); <span class="comment">// 放入等待提交请求队列</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若是不需要执行commit的getData等命令直接往下走</span></span><br><span class="line">                        sendToNextProcessor(request);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                processCommitted(); <span class="comment">// 等待线程被唤醒后返回客户端结果以及写内存数据</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            handleException(<span class="keyword">this</span>.getName(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendToNextProcessor</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        numRequestsProcessing.incrementAndGet(); <span class="comment">// 当前正在处理的请求数加一</span></span><br><span class="line">        workerPool.schedule(<span class="keyword">new</span> CommitWorkRequest(request), request.sessionId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processCommitted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Request request;</span><br><span class="line">        <span class="keyword">if</span> (!stopped &amp;&amp; !isProcessingRequest() &amp;&amp; (committedRequests.peek() != <span class="keyword">null</span>)) &#123; <span class="comment">// 当前正在处理的请求数为0，且被提交的请求不为null</span></span><br><span class="line">            <span class="keyword">if</span> (!isWaitingForCommit() &amp;&amp; !queuedRequests.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// 正在等待提交的请求为null或queuedRequests中有新请求等待</span></span><br><span class="line">            &#125;</span><br><span class="line">            request = committedRequests.poll();</span><br><span class="line">            <span class="comment">// 与nextPending匹配，以便可以在提交时移动到下一个请求。还想使用nextPending，因为它正确设置了cnxn成员。</span></span><br><span class="line">            Request pending = nextPending.get();</span><br><span class="line">            <span class="keyword">if</span> (pending != <span class="keyword">null</span> &amp;&amp; pending.sessionId == request.sessionId &amp;&amp; pending.cxid == request.cxid) &#123;</span><br><span class="line">                pending.setHdr(request.getHdr());</span><br><span class="line">                pending.setTxn(request.getTxn());</span><br><span class="line">                pending.zxid = request.zxid;</span><br><span class="line">                currentlyCommitting.set(pending);</span><br><span class="line">                nextPending.set(<span class="keyword">null</span>);</span><br><span class="line">                sendToNextProcessor(pending);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 若请求来自其他人则只发送提交数据包</span></span><br><span class="line">                currentlyCommitting.set(request);</span><br><span class="line">                sendToNextProcessor(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommitWorkRequest</span> <span class="keyword">extends</span> <span class="title">WorkerService</span>.<span class="title">WorkRequest</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doWork</span><span class="params">()</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                nextProcessor.processRequest(request); <span class="comment">// 调用下一个请求处理器ToBeAppliedRequestProcessor</span></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                currentlyCommitting.compareAndSet(request, <span class="keyword">null</span>); <span class="comment">// 若此请求是阻塞处理器提交请求，则清除当前正在提交的请求</span></span><br><span class="line">                <span class="keyword">if</span> (numRequestsProcessing.decrementAndGet() == <span class="number">0</span>) &#123; <span class="comment">// 正在处理的请求数减一</span></span><br><span class="line">                    <span class="keyword">if</span> (!queuedRequests.isEmpty() || !committedRequests.isEmpty()) &#123;</span><br><span class="line">                        wakeup(); <span class="comment">// 减少处理的请求计数，处理器目前可能被阻塞，因为它正在等待管道排空，该情况下若有待处理请求，则将其唤醒</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ToBeAppliedRequestProcessor"><a href="#ToBeAppliedRequestProcessor" class="headerlink" title="ToBeAppliedRequestProcessor"></a>ToBeAppliedRequestProcessor</h4><p>ToBeAppliedRequestProcessor的<strong>下一个<code>RequestProcessor</code>必须是<code>FinalRequestProcessor</code></strong>，其本身没有做什么事，将在请求从<strong><code>toBeApplied</code></strong>中移除，调用<strong><code>FinalRequestProcessor</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ToBeAppliedRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    ToBeAppliedRequestProcessor(RequestProcessor next, Leader leader) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(next <span class="keyword">instanceof</span> FinalRequestProcessor)) &#123;</span><br><span class="line">            throw new RuntimeException(ToBeAppliedRequestProcessor.class.getName() + " must be connected to " + FinalRequestProcessor.class.getName() + " not " + next.getClass().getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.leader = leader;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> <span class="keyword">throws</span> RequestProcessorException </span>&#123;</span><br><span class="line">        next.processRequest(request);<span class="comment">// 调用下一个请求处理器FinalRequestProcessor</span></span><br><span class="line">        <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> zxid = request.getHdr().getZxid();</span><br><span class="line">            Iterator&lt;Proposal&gt; iter = leader.toBeApplied.iterator();</span><br><span class="line">            <span class="keyword">if</span> (iter.hasNext()) &#123;</span><br><span class="line">                Proposal p = iter.next();</span><br><span class="line">                <span class="keyword">if</span> (p.request != <span class="keyword">null</span> &amp;&amp; p.request.zxid == zxid) &#123;</span><br><span class="line">                    iter.remove(); <span class="comment">// 将在请求从toBeApplied中移除</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FinalRequestProcessor"><a href="#FinalRequestProcessor" class="headerlink" title="FinalRequestProcessor"></a>FinalRequestProcessor</h4><p><strong><code>FinalRequestProcessor</code></strong>会<strong>将数据写入到内存中</strong>，这时客户端才可以真正查到该数据，当调用<strong><code>ZKDatabase</code></strong>的<strong><code>processTxn</code></strong>从而根据请求类型调用具体的方法将数据<strong>更新到<code>DataTree</code>时</strong>，会<strong>触发设置的监听器</strong>，最后<strong>将结果响应给客户端</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;</span><br><span class="line">        <span class="keyword">if</span> (request.type == OpCode.ping) &#123;</span><br><span class="line">            traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">        &#125;</span><br><span class="line">        ProcessTxnResult rc = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">synchronized</span> (zks.outstandingChanges) &#123; <span class="comment">// outstandingChanges数据是在PrepRequestProcessor中添加</span></span><br><span class="line">            rc = zks.processTxn(request); <span class="comment">// 写数据到内存中，这这之后客户端节点才可以操作该数据</span></span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span>) &#123; <span class="comment">// request.hdr是为写请求设置的，这是唯一添加到outstandingChanges的请求</span></span><br><span class="line">                TxnHeader hdr = request.getHdr();</span><br><span class="line">                Record txn = request.getTxn();</span><br><span class="line">                <span class="keyword">long</span> zxid = hdr.getZxid();</span><br><span class="line">                <span class="keyword">while</span> (!zks.outstandingChanges.isEmpty() &amp;&amp; zks.outstandingChanges.peek().zxid &lt;= zxid) &#123;</span><br><span class="line">                    ChangeRecord cr = zks.outstandingChanges.remove();</span><br><span class="line">                    <span class="keyword">if</span> (zks.outstandingChangesForPath.get(cr.path) == cr) &#123;</span><br><span class="line">                        zks.outstandingChangesForPath.remove(cr.path);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (request.isQuorum()) &#123; <span class="comment">// do not add non quorum packets to the queue.</span></span><br><span class="line">                zks.getZKDatabase().addCommittedProposal(request);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.type == OpCode.closeSession &amp;&amp; connClosedByClient(request)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (closeSession(zks.serverCnxnFactory, request.sessionId) || closeSession(zks.secureServerCnxnFactory, request.sessionId)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (request.cnxn == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ServerCnxn cnxn = request.cnxn;</span><br><span class="line">        String lastOp = <span class="string">"NA"</span>;</span><br><span class="line">        zks.decInProcess();</span><br><span class="line">        Code err = Code.OK;</span><br><span class="line">        Record rsp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (request.getHdr() != <span class="keyword">null</span> &amp;&amp; request.getHdr().getType() == OpCode.error) &#123;</span><br><span class="line">                <span class="keyword">if</span> (request.getException() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> request.getException();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            KeeperException ke = request.getException();</span><br><span class="line">            <span class="keyword">if</span> (ke != <span class="keyword">null</span> &amp;&amp; request.type != OpCode.multi) &#123;</span><br><span class="line">                <span class="keyword">throw</span> ke;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">switch</span> (request.type) &#123; <span class="comment">// 根据request.type生成对应的rsp</span></span><br><span class="line">                <span class="keyword">case</span> OpCode.ping: &#123;</span><br><span class="line">                    zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">                    lastOp = <span class="string">"PING"</span>;</span><br><span class="line">                    cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp, request.createTime, Time.currentElapsedTime());</span><br><span class="line">                    cnxn.sendResponse(<span class="keyword">new</span> ReplyHeader(-<span class="number">2</span>, zks.getZKDatabase().getDataTreeLastProcessedZxid(), <span class="number">0</span>), <span class="keyword">null</span>, <span class="string">"response"</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createSession: &#123;</span><br><span class="line">                    zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">                    lastOp = <span class="string">"SESS"</span>;</span><br><span class="line">                    cnxn.updateStatsForResponse(request.cxid, request.zxid, lastOp, request.createTime, Time.currentElapsedTime());</span><br><span class="line">                    zks.finishSessionInit(request.cnxn, <span class="keyword">true</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.create: &#123;</span><br><span class="line">                    lastOp = <span class="string">"CREA"</span>;</span><br><span class="line">                    rsp = <span class="keyword">new</span> CreateResponse(rc.path);</span><br><span class="line">                    err = Code.get(rc.err);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.create2:</span><br><span class="line">                <span class="keyword">case</span> OpCode.createTTL:</span><br><span class="line">                <span class="keyword">case</span> OpCode.createContainer: &#123;</span><br><span class="line">                    lastOp = <span class="string">"CREA"</span>;</span><br><span class="line">                    rsp = <span class="keyword">new</span> Create2Response(rc.path, rc.stat);</span><br><span class="line">                    err = Code.get(rc.err);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">                <span class="keyword">case</span> OpCode.deleteContainer: &#123;</span><br><span class="line">                    lastOp = <span class="string">"DELE"</span>;</span><br><span class="line">                    err = Code.get(rc.err);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.setData: &#123;</span><br><span class="line">                    lastOp = <span class="string">"SETD"</span>;</span><br><span class="line">                    rsp = <span class="keyword">new</span> SetDataResponse(rc.stat);</span><br><span class="line">                    err = Code.get(rc.err);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.sync: &#123;</span><br><span class="line">                    lastOp = <span class="string">"SYNC"</span>;</span><br><span class="line">                    SyncRequest syncRequest = <span class="keyword">new</span> SyncRequest();</span><br><span class="line">                    ByteBufferInputStream.byteBuffer2Record(request.request,</span><br><span class="line">                                                            syncRequest);</span><br><span class="line">                    rsp = <span class="keyword">new</span> SyncResponse(syncRequest.getPath());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.getData: &#123;</span><br><span class="line">                    lastOp = <span class="string">"GETD"</span>;</span><br><span class="line">                    GetDataRequest getDataRequest = <span class="keyword">new</span> GetDataRequest();</span><br><span class="line">                    ByteBufferInputStream.byteBuffer2Record(request.request, getDataRequest);</span><br><span class="line">                    DataNode n = zks.getZKDatabase().getNode(getDataRequest.getPath());</span><br><span class="line">                    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, request.authInfo);</span><br><span class="line">                    Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">                    <span class="keyword">byte</span> b[] = zks.getZKDatabase().getData(getDataRequest.getPath(), stat, getDataRequest.getWatch() ? cnxn : <span class="keyword">null</span>);</span><br><span class="line">                    rsp = <span class="keyword">new</span> GetDataResponse(b, stat);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.setWatches: &#123;</span><br><span class="line">                    lastOp = <span class="string">"SETW"</span>;</span><br><span class="line">                    SetWatches setWatches = <span class="keyword">new</span> SetWatches();</span><br><span class="line">                    <span class="comment">// XXX We really should NOT need this!!!!</span></span><br><span class="line">                    request.request.rewind();</span><br><span class="line">                    ByteBufferInputStream.byteBuffer2Record(request.request, setWatches);</span><br><span class="line">                    <span class="keyword">long</span> relativeZxid = setWatches.getRelativeZxid();</span><br><span class="line">                    zks.getZKDatabase().setWatches(relativeZxid, setWatches.getDataWatches(), setWatches.getExistWatches(), setWatches.getChildWatches(), cnxn);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">case</span> OpCode.getChildren: &#123;</span><br><span class="line">                    lastOp = <span class="string">"GETC"</span>;</span><br><span class="line">                    GetChildrenRequest getChildrenRequest = <span class="keyword">new</span> GetChildrenRequest();</span><br><span class="line">                    ByteBufferInputStream.byteBuffer2Record(request.request, getChildrenRequest);</span><br><span class="line">                    DataNode n = zks.getZKDatabase().getNode(getChildrenRequest.getPath());</span><br><span class="line">                    <span class="keyword">if</span> (n == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">                    &#125;</span><br><span class="line">                    PrepRequestProcessor.checkACL(zks, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, request.authInfo);</span><br><span class="line">                    List&lt;String&gt; children = zks.getZKDatabase().getChildren(getChildrenRequest.getPath(), <span class="keyword">null</span>, getChildrenRequest.getWatch() ? cnxn : <span class="keyword">null</span>);</span><br><span class="line">                    rsp = <span class="keyword">new</span> GetChildrenResponse(children);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">        ReplyHeader hdr = <span class="keyword">new</span> ReplyHeader(request.cxid, lastZxid, err.intValue());</span><br><span class="line">        zks.serverStats().updateLatency(request.createTime);</span><br><span class="line">        cnxn.updateStatsForResponse(request.cxid, lastZxid, lastOp, request.createTime, Time.currentElapsedTime());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            cnxn.sendResponse(hdr, rsp, <span class="string">"response"</span>); <span class="comment">// 响应客户端</span></span><br><span class="line">            <span class="keyword">if</span> (request.type == OpCode.closeSession) &#123;</span><br><span class="line">                cnxn.sendCloseSession();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZooKeeperServer</span> <span class="keyword">implements</span> <span class="title">SessionExpirer</span>, <span class="title">ServerStats</span>.<span class="title">Provider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> processTxn(request, request.getHdr(), request.getTxn());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(Request request, TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class="line">        ProcessTxnResult rc;</span><br><span class="line">        <span class="keyword">int</span> opCode = request != <span class="keyword">null</span> ? request.type : hdr.getType();</span><br><span class="line">        <span class="keyword">long</span> sessionId = request != <span class="keyword">null</span> ? request.sessionId : hdr.getClientId();</span><br><span class="line">        <span class="keyword">if</span> (hdr != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rc = getZKDatabase().processTxn(hdr, txn); <span class="comment">// 写数据到内存中</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            rc = <span class="keyword">new</span> ProcessTxnResult();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (opCode == OpCode.createSession) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hdr != <span class="keyword">null</span> &amp;&amp; txn <span class="keyword">instanceof</span> CreateSessionTxn) &#123;</span><br><span class="line">                CreateSessionTxn cst = (CreateSessionTxn) txn;</span><br><span class="line">                sessionTracker.addGlobalSession(sessionId, cst.getTimeOut());</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (request != <span class="keyword">null</span> &amp;&amp; request.isLocalSession()) &#123;</span><br><span class="line">                request.request.rewind();</span><br><span class="line">                <span class="keyword">int</span> timeout = request.request.getInt();</span><br><span class="line">                request.request.rewind();</span><br><span class="line">                sessionTracker.addSession(request.sessionId, timeout);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (opCode == OpCode.closeSession) &#123;</span><br><span class="line">            sessionTracker.removeSession(sessionId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZKDatabase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dataTree.processTxn(hdr, txn);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(TxnHeader header, Record txn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.processTxn(header, txn, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProcessTxnResult <span class="title">processTxn</span><span class="params">(TxnHeader header, Record txn, <span class="keyword">boolean</span> isSubTxn)</span> </span>&#123;</span><br><span class="line">        ProcessTxnResult rc = <span class="keyword">new</span> ProcessTxnResult();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            rc.clientId = header.getClientId();</span><br><span class="line">            rc.cxid = header.getCxid();</span><br><span class="line">            rc.zxid = header.getZxid();</span><br><span class="line">            rc.type = header.getType();</span><br><span class="line">            rc.err = <span class="number">0</span>;</span><br><span class="line">            rc.multiResult = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">switch</span> (header.getType()) &#123;</span><br><span class="line">                <span class="keyword">case</span> OpCode.create:</span><br><span class="line">                    CreateTxn createTxn = (CreateTxn) txn;</span><br><span class="line">                    rc.path = createTxn.getPath();</span><br><span class="line">                    createNode(createTxn.getPath(), createTxn.getData(), createTxn.getAcl(), createTxn.getEphemeral() ? header.getClientId() : <span class="number">0</span>, createTxn.getParentCVersion(), header.getZxid(), header.getTime(), <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.create2:</span><br><span class="line">                    CreateTxn create2Txn = (CreateTxn) txn;</span><br><span class="line">                    rc.path = create2Txn.getPath();</span><br><span class="line">                    Stat stat = <span class="keyword">new</span> Stat();</span><br><span class="line">                    createNode(create2Txn.getPath(), create2Txn.getData(), create2Txn.getAcl(), create2Txn.getEphemeral() ? header.getClientId() : <span class="number">0</span>, create2Txn.getParentCVersion(), header.getZxid(), header.getTime(), stat);</span><br><span class="line">                    rc.stat = stat;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createTTL:</span><br><span class="line">                    CreateTTLTxn createTtlTxn = (CreateTTLTxn) txn;</span><br><span class="line">                    rc.path = createTtlTxn.getPath();</span><br><span class="line">                    stat = <span class="keyword">new</span> Stat();</span><br><span class="line">                    createNode(createTtlTxn.getPath(), createTtlTxn.getData(), createTtlTxn.getAcl(), EphemeralType.TTL.toEphemeralOwner(createTtlTxn.getTtl()), createTtlTxn.getParentCVersion(), header.getZxid(), header.getTime(), stat);</span><br><span class="line">                    rc.stat = stat;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.createContainer:</span><br><span class="line">                    CreateContainerTxn createContainerTxn = (CreateContainerTxn) txn;</span><br><span class="line">                    rc.path = createContainerTxn.getPath();</span><br><span class="line">                    stat = <span class="keyword">new</span> Stat();</span><br><span class="line">                    createNode(createContainerTxn.getPath(), createContainerTxn.getData(), createContainerTxn.getAcl(), EphemeralType.CONTAINER_EPHEMERAL_OWNER, createContainerTxn.getParentCVersion(), header.getZxid(), header.getTime(), stat);</span><br><span class="line">                    rc.stat = stat;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.delete:</span><br><span class="line">                <span class="keyword">case</span> OpCode.deleteContainer:</span><br><span class="line">                    DeleteTxn deleteTxn = (DeleteTxn) txn;</span><br><span class="line">                    rc.path = deleteTxn.getPath();</span><br><span class="line">                    deleteNode(deleteTxn.getPath(), header.getZxid());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.reconfig:</span><br><span class="line">                <span class="keyword">case</span> OpCode.setData:</span><br><span class="line">                    SetDataTxn setDataTxn = (SetDataTxn) txn;</span><br><span class="line">                    rc.path = setDataTxn.getPath();</span><br><span class="line">                    rc.stat = setData(setDataTxn.getPath(), setDataTxn.getData(), setDataTxn.getVersion(), header.getZxid(), header.getTime());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> OpCode.closeSession:</span><br><span class="line">                    killSession(header.getClientId(), header.getZxid());</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (KeeperException e) &#123;</span><br><span class="line">            rc.err = e.code().intValue();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;&#125;</span><br><span class="line">        <span class="keyword">if</span> (!isSubTxn) &#123;</span><br><span class="line">            <span class="keyword">if</span> (rc.zxid &gt; lastProcessedZxid) &#123;</span><br><span class="line">                lastProcessedZxid = rc.zxid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (header.getType() == OpCode.create &amp;&amp; rc.err == Code.NODEEXISTS.intValue()) &#123;</span><br><span class="line">            <span class="keyword">int</span> lastSlash = rc.path.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">            String parentName = rc.path.substring(<span class="number">0</span>, lastSlash);</span><br><span class="line">            CreateTxn cTxn = (CreateTxn)txn;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                setCversionPzxid(parentName, cTxn.getParentCVersion(), header.getZxid());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (KeeperException.NoNodeException e) &#123;</span><br><span class="line">                rc.err = e.code().intValue();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataTree</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createNode</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl, <span class="keyword">long</span> ephemeralOwner, <span class="keyword">int</span> parentCVersion, <span class="keyword">long</span> zxid, <span class="keyword">long</span> time, Stat outputStat)</span> <span class="keyword">throws</span> KeeperException.NoNodeException, KeeperException.NodeExistsException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lastSlash = path.lastIndexOf(<span class="string">'/'</span>);</span><br><span class="line">        String parentName = path.substring(<span class="number">0</span>, lastSlash);</span><br><span class="line">        String childName = path.substring(lastSlash + <span class="number">1</span>);</span><br><span class="line">        StatPersisted stat = <span class="keyword">new</span> StatPersisted();</span><br><span class="line">        stat.setCtime(time);</span><br><span class="line">        stat.setMtime(time);</span><br><span class="line">        stat.setCzxid(zxid);</span><br><span class="line">        stat.setMzxid(zxid);</span><br><span class="line">        stat.setPzxid(zxid);</span><br><span class="line">        stat.setVersion(<span class="number">0</span>);</span><br><span class="line">        stat.setAversion(<span class="number">0</span>);</span><br><span class="line">        stat.setEphemeralOwner(ephemeralOwner);</span><br><span class="line">        DataNode parent = nodes.get(parentName);</span><br><span class="line">        <span class="keyword">if</span> (parent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NoNodeException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (parent) &#123;</span><br><span class="line">            Set&lt;String&gt; children = parent.getChildren();</span><br><span class="line">            <span class="keyword">if</span> (children.contains(childName)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> KeeperException.NodeExistsException();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (parentCVersion == -<span class="number">1</span>) &#123;</span><br><span class="line">                parentCVersion = parent.stat.getCversion();</span><br><span class="line">                parentCVersion++;</span><br><span class="line">            &#125;</span><br><span class="line">            parent.stat.setCversion(parentCVersion);</span><br><span class="line">            parent.stat.setPzxid(zxid);</span><br><span class="line">            Long longval = aclCache.convertAcls(acl);</span><br><span class="line">            DataNode child = <span class="keyword">new</span> DataNode(data, longval, stat);</span><br><span class="line">            parent.addChild(childName);</span><br><span class="line">            nodes.put(path, child);</span><br><span class="line">            EphemeralType ephemeralType = EphemeralType.get(ephemeralOwner);</span><br><span class="line">            <span class="keyword">if</span> (ephemeralType == EphemeralType.CONTAINER) &#123;</span><br><span class="line">                containers.add(path);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ephemeralType == EphemeralType.TTL) &#123;</span><br><span class="line">                ttls.add(path);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ephemeralOwner != <span class="number">0</span>) &#123;</span><br><span class="line">                HashSet&lt;String&gt; list = ephemerals.get(ephemeralOwner);</span><br><span class="line">                <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    list = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">                    ephemerals.put(ephemeralOwner, list);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">synchronized</span> (list) &#123;</span><br><span class="line">                    list.add(path);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (outputStat != <span class="keyword">null</span>) &#123;</span><br><span class="line">                child.copyStat(outputStat);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (parentName.startsWith(quotaZookeeper)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Quotas.limitNode.equals(childName)) &#123;</span><br><span class="line">                pTrie.addPath(parentName.substring(quotaZookeeper.length()));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Quotas.statNode.equals(childName)) &#123;</span><br><span class="line">                updateQuotaForPath(parentName.substring(quotaZookeeper.length()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String lastPrefix = getMaxPrefixWithQuota(path);</span><br><span class="line">        <span class="keyword">if</span>(lastPrefix != <span class="keyword">null</span>) &#123; <span class="comment">// ok we have some match and need to update</span></span><br><span class="line">            updateCount(lastPrefix, <span class="number">1</span>);</span><br><span class="line">            updateBytes(lastPrefix, data == <span class="keyword">null</span> ? <span class="number">0</span> : data.length);</span><br><span class="line">        &#125;</span><br><span class="line">        dataWatches.triggerWatch(path, Event.EventType.NodeCreated);</span><br><span class="line">        childWatches.triggerWatch(parentName.equals(<span class="string">""</span>) ? <span class="string">"/"</span> : parentName, Event.EventType.NodeChildrenChanged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="与Follower交互"><a href="#与Follower交互" class="headerlink" title="与Follower交互"></a>与Follower交互</h4><p>在<strong><code>LearnerHandler</code></strong>的<strong><code>run</code></strong>方法中会<strong>死循环接收从节点发来的数据</strong>，然后根据请求类型做响应的逻辑，当收到ACK请求时，将调用<strong><code>Leader</code></strong>的<strong><code>processAck</code></strong>方法收集ACK投票，当<strong>票数超过一半</strong>时<strong>唤醒<code>CommitProcessor</code>线程</strong>的wait等待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnerHandler</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            leader.addLearnerHandler(<span class="keyword">this</span>);</span><br><span class="line">            tickOfNextAckDeadline = leader.self.tick.get() + leader.self.initLimit + leader.self.syncLimit;</span><br><span class="line">            ia = BinaryInputArchive.getArchive(bufferedInput);</span><br><span class="line">            bufferedOutput = <span class="keyword">new</span> BufferedOutputStream(sock.getOutputStream());</span><br><span class="line">            oa = BinaryOutputArchive.getArchive(bufferedOutput);</span><br><span class="line">            QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">            ia.readRecord(qp, <span class="string">"packet"</span>);</span><br><span class="line">            <span class="keyword">if</span> (qp.getType() != Leader.FOLLOWERINFO &amp;&amp; qp.getType() != Leader.OBSERVERINFO) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">byte</span> learnerInfoData[] = qp.getData();</span><br><span class="line">            <span class="keyword">if</span> (learnerInfoData != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ByteBuffer bbsid = ByteBuffer.wrap(learnerInfoData);</span><br><span class="line">                <span class="keyword">if</span> (learnerInfoData.length &gt;= <span class="number">8</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.sid = bbsid.getLong();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (learnerInfoData.length &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.version = bbsid.getInt(); <span class="comment">// protocolVersion</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (learnerInfoData.length &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">                    <span class="keyword">long</span> configVersion = bbsid.getLong();</span><br><span class="line">                    <span class="keyword">if</span> (configVersion &gt; leader.self.getQuorumVerifier().getVersion()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Follower is ahead of the leader (has a later activated configuration)"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.sid = leader.followerCounter.getAndDecrement();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (qp.getType() == Leader.OBSERVERINFO) &#123;</span><br><span class="line">                learnerType = LearnerType.OBSERVER;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">long</span> lastAcceptedEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());</span><br><span class="line">            <span class="keyword">long</span> peerLastZxid;</span><br><span class="line">            StateSummary ss = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">long</span> zxid = qp.getZxid();</span><br><span class="line">            <span class="keyword">long</span> newEpoch = leader.getEpochToPropose(<span class="keyword">this</span>.getSid(), lastAcceptedEpoch);</span><br><span class="line">            <span class="keyword">long</span> newLeaderZxid = ZxidUtils.makeZxid(newEpoch, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.getVersion() &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> epoch = ZxidUtils.getEpochFromZxid(zxid);</span><br><span class="line">                ss = <span class="keyword">new</span> StateSummary(epoch, zxid);</span><br><span class="line">                leader.waitForEpochAck(<span class="keyword">this</span>.getSid(), ss);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">byte</span> ver[] = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>];</span><br><span class="line">                ByteBuffer.wrap(ver).putInt(<span class="number">0x10000</span>);</span><br><span class="line">                QuorumPacket newEpochPacket = <span class="keyword">new</span> QuorumPacket(Leader.LEADERINFO, newLeaderZxid, ver, <span class="keyword">null</span>);</span><br><span class="line">                oa.writeRecord(newEpochPacket, <span class="string">"packet"</span>);</span><br><span class="line">                bufferedOutput.flush();</span><br><span class="line">                QuorumPacket ackEpochPacket = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">                ia.readRecord(ackEpochPacket, <span class="string">"packet"</span>);</span><br><span class="line">                <span class="keyword">if</span> (ackEpochPacket.getType() != Leader.ACKEPOCH) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ByteBuffer bbepoch = ByteBuffer.wrap(ackEpochPacket.getData());</span><br><span class="line">                ss = <span class="keyword">new</span> StateSummary(bbepoch.getInt(), ackEpochPacket.getZxid());</span><br><span class="line">                leader.waitForEpochAck(<span class="keyword">this</span>.getSid(), ss);</span><br><span class="line">            &#125;</span><br><span class="line">            peerLastZxid = ss.getLastZxid();</span><br><span class="line">            <span class="keyword">boolean</span> needSnap = syncFollower(peerLastZxid, leader.zk.getZKDatabase(), leader);</span><br><span class="line">            <span class="keyword">if</span> (needSnap) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> exemptFromThrottle = getLearnerType() != LearnerType.OBSERVER;</span><br><span class="line">                LearnerSnapshot snapshot = leader.getLearnerSnapshotThrottler().beginSnapshot(exemptFromThrottle);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">long</span> zxidToSend = leader.zk.getZKDatabase().getDataTreeLastProcessedZxid();</span><br><span class="line">                    oa.writeRecord(<span class="keyword">new</span> QuorumPacket(Leader.SNAP, zxidToSend, <span class="keyword">null</span>, <span class="keyword">null</span>), <span class="string">"packet"</span>);</span><br><span class="line">                    bufferedOutput.flush();</span><br><span class="line">                    leader.zk.getZKDatabase().serializeSnapshot(oa);</span><br><span class="line">                    oa.writeString(<span class="string">"BenWasHere"</span>, <span class="string">"signature"</span>);</span><br><span class="line">                    bufferedOutput.flush();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    snapshot.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (getVersion() &lt; <span class="number">0x10000</span>) &#123;</span><br><span class="line">                QuorumPacket newLeaderQP = <span class="keyword">new</span> QuorumPacket(Leader.NEWLEADER, newLeaderZxid, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                oa.writeRecord(newLeaderQP, <span class="string">"packet"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                QuorumPacket newLeaderQP = <span class="keyword">new</span> QuorumPacket(Leader.NEWLEADER, newLeaderZxid, leader.self.getLastSeenQuorumVerifier().toString().getBytes(), <span class="keyword">null</span>);</span><br><span class="line">                queuedPackets.add(newLeaderQP);</span><br><span class="line">            &#125;</span><br><span class="line">            bufferedOutput.flush();</span><br><span class="line">            startSendingPackets(); <span class="comment">// 启动线程将队列中的数据包发送给Follower</span></span><br><span class="line">            qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">            ia.readRecord(qp, <span class="string">"packet"</span>);</span><br><span class="line">            <span class="keyword">if</span> (qp.getType() != Leader.ACK) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            leader.waitForNewLeaderAck(getSid(), qp.getZxid());</span><br><span class="line">            syncLimitCheck.start();</span><br><span class="line">            sock.setSoTimeout(leader.self.tickTime * leader.self.syncLimit);</span><br><span class="line">            <span class="keyword">synchronized</span> (leader.zk) &#123;</span><br><span class="line">                <span class="keyword">while</span> (!leader.zk.isRunning() &amp;&amp; !<span class="keyword">this</span>.isInterrupted()) &#123;</span><br><span class="line">                    leader.zk.wait(<span class="number">20</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            queuedPackets.add(<span class="keyword">new</span> QuorumPacket(Leader.UPTODATE, -<span class="number">1</span>, <span class="keyword">null</span>, <span class="keyword">null</span>));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">                ia.readRecord(qp, <span class="string">"packet"</span>);</span><br><span class="line">                <span class="keyword">long</span> traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;</span><br><span class="line">                <span class="keyword">if</span> (qp.getType() == Leader.PING) &#123;</span><br><span class="line">                    traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">                &#125;</span><br><span class="line">                tickOfNextAckDeadline = leader.self.tick.get() + leader.self.syncLimit;</span><br><span class="line">                ByteBuffer bb;</span><br><span class="line">                <span class="keyword">long</span> sessionId;</span><br><span class="line">                <span class="keyword">int</span> cxid;</span><br><span class="line">                <span class="keyword">int</span> type;</span><br><span class="line">                <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> Leader.ACK: <span class="comment">// 处理Follower发送给Leader的ACK</span></span><br><span class="line">                        syncLimitCheck.updateAck(qp.getZxid());</span><br><span class="line">                        leader.processAck(<span class="keyword">this</span>.sid, qp.getZxid(), sock.getLocalSocketAddress());</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Leader.PING:<span class="comment">// Process the touches</span></span><br><span class="line">                        ByteArrayInputStream bis = <span class="keyword">new</span> ByteArrayInputStream(qp.getData());</span><br><span class="line">                        DataInputStream dis = <span class="keyword">new</span> DataInputStream(bis);</span><br><span class="line">                        <span class="keyword">while</span> (dis.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">long</span> sess = dis.readLong();</span><br><span class="line">                            <span class="keyword">int</span> to = dis.readInt();</span><br><span class="line">                            leader.zk.touch(sess, to);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Leader.REQUEST:</span><br><span class="line">                        bb = ByteBuffer.wrap(qp.getData());</span><br><span class="line">                        sessionId = bb.getLong();</span><br><span class="line">                        cxid = bb.getInt();</span><br><span class="line">                        type = bb.getInt();</span><br><span class="line">                        bb = bb.slice();</span><br><span class="line">                        Request si;</span><br><span class="line">                        <span class="keyword">if</span> (type == OpCode.sync) &#123;</span><br><span class="line">                            si = <span class="keyword">new</span> LearnerSyncRequest(<span class="keyword">this</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            si = <span class="keyword">new</span> Request(<span class="keyword">null</span>, sessionId, cxid, type, bb, qp.getAuthinfo());</span><br><span class="line">                        &#125;</span><br><span class="line">                        si.setOwner(<span class="keyword">this</span>);</span><br><span class="line">                        leader.zk.submitLearnerRequest(si);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sock != <span class="keyword">null</span> &amp;&amp; !sock.isClosed()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">//close the socket to make sure the other side can see it being close</span></span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<strong><code>LearnerHandler</code></strong>的<strong><code>run</code></strong>方法中通过<strong><code>startSendingPackets</code></strong>方法，启动了一个线程从阻塞队列<strong><code>queuedPackets</code></strong>中poll请求数据包，发送给follower。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LearnerHandler</span> <span class="keyword">extends</span> <span class="title">ZooKeeperThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">startSendingPackets</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!sendingThreadStarted) &#123;<span class="comment">// Start sending packets</span></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    Thread.currentThread().setName(<span class="string">"Sender-"</span> + sock.getRemoteSocketAddress());</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        sendPackets();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;.start();</span><br><span class="line">            sendingThreadStarted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendPackets</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                QuorumPacket p;</span><br><span class="line">                p = queuedPackets.poll();</span><br><span class="line">                <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    bufferedOutput.flush();</span><br><span class="line">                    p = queuedPackets.take();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p == proposalOfDeath) &#123;<span class="comment">// Packet of death!</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.getType() == Leader.PING) &#123;</span><br><span class="line">                    traceMask = ZooTrace.SERVER_PING_TRACE_MASK;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (p.getType() == Leader.PROPOSAL) &#123;</span><br><span class="line">                    syncLimitCheck.updateProposal(p.getZxid(), System.nanoTime());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (LOG.isTraceEnabled()) &#123;</span><br><span class="line">                    ZooTrace.logQuorumPacket(LOG, traceMask, <span class="string">'o'</span>, p);</span><br><span class="line">                &#125;</span><br><span class="line">                oa.writeRecord(p, <span class="string">"packet"</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!sock.isClosed()) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;<span class="comment">// this will cause everything to shutdown on this learner handler and will help notify the learner/observer instantaneously</span></span><br><span class="line">                        sock.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException ie) &#123;&#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="从节点"><a href="#从节点" class="headerlink" title="从节点"></a>从节点</h4><p>对于从节点当<strong>选举完成后</strong>会调用<strong><code>Follower</code></strong>的<strong><code>followLeader</code></strong>方法中通过<strong><code>syncWithLeader</code></strong>调用<strong><code>ZooKeeperServer</code></strong>的子类<strong><code>FollowerZooKeeperServer</code></strong>的<strong><code>setupRequestProcessors</code></strong>方法加载请求处理链<strong><code>FollowerRequestProcessor</code></strong>、<strong><code>CommitProcessor</code></strong>、<strong><code>FinalRequestProcessor</code></strong>和<strong><code>SyncRequestProcessor</code></strong>、<strong><code>SendAckRequestProcessor</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Follower</span> <span class="keyword">extends</span> <span class="title">Learner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">followLeader</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        self.end_fle = Time.currentElapsedTime();</span><br><span class="line">        <span class="keyword">long</span> electionTimeTaken = self.end_fle - self.start_fle;</span><br><span class="line">        self.setElectionTimeTaken(electionTimeTaken);</span><br><span class="line">        self.start_fle = <span class="number">0</span>;</span><br><span class="line">        self.end_fle = <span class="number">0</span>;</span><br><span class="line">        fzk.registerJMX(<span class="keyword">new</span> FollowerBean(<span class="keyword">this</span>, zk), self.jmxLocalPeerBean);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            QuorumServer leaderServer = findLeader();  <span class="comment">// 获取leader server</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                connectToLeader(leaderServer.addr, leaderServer.hostname); <span class="comment">// 主动向leader发起socket连接</span></span><br><span class="line">                <span class="keyword">long</span> newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO); <span class="comment">// 注册自己到Leader</span></span><br><span class="line">                <span class="keyword">if</span> (self.isReconfigStateChange())</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"learned about role change"</span>);</span><br><span class="line">                <span class="keyword">long</span> newEpoch = ZxidUtils.getEpochFromZxid(newEpochZxid);</span><br><span class="line">                <span class="keyword">if</span> (newEpoch &lt; self.getAcceptedEpoch()) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Error: Epoch of leader is lower"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                syncWithLeader(newEpochZxid); <span class="comment">// 同步leader数据</span></span><br><span class="line">                QuorumPacket qp = <span class="keyword">new</span> QuorumPacket();</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">this</span>.isRunning()) &#123; <span class="comment">// while死循环接收leader同步的数据</span></span><br><span class="line">                    readPacket(qp); <span class="comment">// 若leader挂了，这里从leader取数据时会抛出异常退出循环</span></span><br><span class="line">                    processPacket(qp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sock.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">                    e1.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                pendingRevalidations.clear();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            zk.unregisterJMX((Learner)<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowerZooKeeperServer</span> <span class="keyword">extends</span> <span class="title">LearnerZooKeeperServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setupRequestProcessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        RequestProcessor finalProcessor = <span class="keyword">new</span> FinalRequestProcessor(<span class="keyword">this</span>);</span><br><span class="line">        commitProcessor = <span class="keyword">new</span> CommitProcessor(finalProcessor, Long.toString(getServerId()), <span class="keyword">true</span>, getZooKeeperServerListener());</span><br><span class="line">        commitProcessor.start();</span><br><span class="line">        firstProcessor = <span class="keyword">new</span> FollowerRequestProcessor(<span class="keyword">this</span>, commitProcessor);</span><br><span class="line">        ((FollowerRequestProcessor) firstProcessor).start();</span><br><span class="line">        syncProcessor = <span class="keyword">new</span> SyncRequestProcessor(<span class="keyword">this</span>, <span class="keyword">new</span> SendAckRequestProcessor((Learner)getFollower()));</span><br><span class="line">        syncProcessor.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当接收到Leader发送的数据时调用首先调用<strong><code>readPacket</code></strong>使用jute序列化从输入流中拿数据，然后调用<strong><code>processPacket</code></strong>根据<strong>请求类型</strong>调用具体的方法处理请求数据。对于<strong><code>Leader.PROPOSAL</code>类型</strong>的请求调用<strong><code>FollowerZooKeeperServer</code></strong>的<strong><code>logRequest</code></strong>方法，从而<strong>异步</strong>执行<strong><code>SyncRequestProcessor</code></strong>将数据更新到事务日志文件中。</p><p>对于Follower来说，<strong><code>SyncRequestProcessor</code></strong>的<strong><code>nextProcessor</code></strong>为<strong><code>SendAckRequestProcessor</code></strong>，故当将数据同步到事务日志文件中后，则执行<strong><code>SendAckRequestProcessor</code>给Leader回复<code>ACK</code>命令</strong>，当Leader收到的ACK票数超过一半时执行Commit操作，且给<strong><code>Follower</code></strong>发送<code>Commit</code>命令。当收到Leader的Commit命令后调用<strong><code>FollowerZooKeeperServer</code></strong>的<strong><code>commit</code></strong>方法执行<strong><code>CommitProcessor</code></strong>的<strong><code>commit</code></strong>关键方法，然后执行<strong><code>FinalRequestProcessor</code></strong>将数据<strong>同步到内存</strong>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Learner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">readPacket</span><span class="params">(QuorumPacket pp)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (leaderIs) &#123;</span><br><span class="line">            leaderIs.readRecord(pp, <span class="string">"packet"</span>); <span class="comment">// 调用QuorumPacket的deserialize方法，使用jute序列化从输入流中拿数据，jute类似protobuf</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Follower</span> <span class="keyword">extends</span> <span class="title">Learner</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">processPacket</span><span class="params">(QuorumPacket qp)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (qp.getType()) &#123;</span><br><span class="line">            <span class="keyword">case</span> Leader.PING:            </span><br><span class="line">                ping(qp);            </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.PROPOSAL:</span><br><span class="line">                TxnHeader hdr = <span class="keyword">new</span> TxnHeader();</span><br><span class="line">                Record txn = SerializeUtils.deserializeTxn(qp.getData(), hdr);</span><br><span class="line">                lastQueued = hdr.getZxid();</span><br><span class="line">                <span class="keyword">if</span> (hdr.getType() == OpCode.reconfig)&#123;</span><br><span class="line">                    SetDataTxn setDataTxn = (SetDataTxn) txn;       </span><br><span class="line">                    QuorumVerifier qv = self.configFromString(<span class="keyword">new</span> String(setDataTxn.getData()));</span><br><span class="line">                    self.setLastSeenQuorumVerifier(qv, <span class="keyword">true</span>);                               </span><br><span class="line">                &#125;</span><br><span class="line">                fzk.logRequest(hdr, txn);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.COMMIT:</span><br><span class="line">                fzk.commit(qp.getZxid());</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.COMMITANDACTIVATE:</span><br><span class="line">                Request request = fzk.pendingTxns.element();</span><br><span class="line">                SetDataTxn setDataTxn = (SetDataTxn) request.getTxn();</span><br><span class="line">                QuorumVerifier qv = self.configFromString(<span class="keyword">new</span> String(setDataTxn.getData()));</span><br><span class="line">                ByteBuffer buffer = ByteBuffer.wrap(qp.getData());    </span><br><span class="line">                <span class="keyword">long</span> suggestedLeaderId = buffer.getLong();</span><br><span class="line">                <span class="keyword">boolean</span> majorChange = self.processReconfig(qv, suggestedLeaderId, qp.getZxid(), <span class="keyword">true</span>);</span><br><span class="line">                fzk.commit(qp.getZxid());</span><br><span class="line">                <span class="keyword">if</span> (majorChange) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">"changes proposed in reconfig"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.UPTODATE:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.REVALIDATE:</span><br><span class="line">                revalidate(qp);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Leader.SYNC:</span><br><span class="line">                fzk.sync();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FollowerZooKeeperServer</span> <span class="keyword">extends</span> <span class="title">LearnerZooKeeperServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logRequest</span><span class="params">(TxnHeader hdr, Record txn)</span> </span>&#123;</span><br><span class="line">        Request request = <span class="keyword">new</span> Request(hdr.getClientId(), hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());</span><br><span class="line">        <span class="keyword">if</span> ((request.zxid &amp; <span class="number">0xffffffffL</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            pendingTxns.add(request);</span><br><span class="line">        &#125;</span><br><span class="line">        syncProcessor.processRequest(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">long</span> zxid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pendingTxns.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> firstElementZxid = pendingTxns.element().zxid;</span><br><span class="line">        <span class="keyword">if</span> (firstElementZxid != zxid) &#123;</span><br><span class="line">            System.exit(<span class="number">12</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Request request = pendingTxns.remove();</span><br><span class="line">        commitProcessor.commit(request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendAckRequestProcessor</span> <span class="keyword">implements</span> <span class="title">RequestProcessor</span>, <span class="title">Flushable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processRequest</span><span class="params">(Request si)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(si.type != OpCode.sync)&#123;</span><br><span class="line">            QuorumPacket qp = <span class="keyword">new</span> QuorumPacket(Leader.ACK, si.getHdr().getZxid(), <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                learner.writePacket(qp, <span class="keyword">false</span>); <span class="comment">// 向Leader发送构建的ACK的packet，被LearnerHandler.run接收到执行Leader的processAck方法</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!learner.sock.isClosed()) &#123;</span><br><span class="line">                        learner.sock.close();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e1) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务端处理客户端的请求&lt;strong&gt;入口&lt;/strong&gt;是通过&lt;strong&gt;&lt;code&gt;NettyServerCnxnFactory&lt;/code&gt;无产构造函数&lt;/strong&gt;中启动&lt;strong&gt;&lt;code&gt;Netty&lt;/code&gt;服务端&lt;/strong&gt;时绑定的&lt;
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Zookeeper" scheme="https://yaoyinglong.github.io/categories/Cloud/Zookeeper/"/>
    
    
      <category term="Zookeeper" scheme="https://yaoyinglong.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务调用</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo服务调用/</id>
    <published>2021-12-16T16:00:00.000Z</published>
    <updated>2022-01-13T12:01:21.924Z</updated>
    
    <content type="html"><![CDATA[<h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端调用Dubbo方法时首先通过<strong><code>InvokerInvocationHandler</code></strong>调用<strong><code>MockClusterInvoker</code></strong>首先判断Mock逻辑，若未配置Mock则直接往下调用，若配置了force强制Mock，则直接本地<strong>通过配置构造返回结果</strong>，若配置了Mock则<strong>调用远程服务失败</strong>才通过<strong><code>doMockInvoke</code></strong>走本地Mock逻辑，且在走本地Mock逻辑时会先判断异常是否为业务异常，<strong>若为业务异常直接抛出异常</strong>。</p><p>然后通过<strong><code>AbstractClusterInvoker</code></strong>调用<strong><code>Directory</code></strong>的<strong><code>list</code></strong>方法最终调用<strong><code>RegistryDirectory</code></strong>的<strong><code>doList</code></strong>方法执行<strong>路由链</strong>依次执行<strong><code>MockInvokersSelector</code></strong>、<strong><code>TagRouter</code></strong>、<strong><code>AppRouter</code></strong>、<strong><code>ServiceRouter</code></strong>的<strong><code>route</code></strong>方法过滤出符合路由条件的<strong><code>invokers</code></strong>。然后通过<strong><code>Invoker</code></strong>的<strong><code>URL</code>信息</strong>通过<strong><code>SPI</code>机制获取负载均衡器</strong>，默认为<strong><code>RandomLoadBalance</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(invoker, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// recreate方法会调用AppResponse的recreate方法，若AppResponse对象中存在exception信息，则此方法中会throw该异常</span></span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppResponse</span> <span class="keyword">extends</span> <span class="title">AbstractResult</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">recreate</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="comment">// get Throwable class</span></span><br><span class="line">                Class clazz = exception.getClass();</span><br><span class="line">                <span class="keyword">while</span> (!clazz.getName().equals(Throwable<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())) </span>&#123;</span><br><span class="line">                    clazz = clazz.getSuperclass();</span><br><span class="line">                &#125;</span><br><span class="line">                Field stackTraceField = clazz.getDeclaredField(<span class="string">"stackTrace"</span>); <span class="comment">// get stackTrace value</span></span><br><span class="line">                stackTraceField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                Object stackTrace = stackTraceField.get(exception);</span><br><span class="line">                <span class="keyword">if</span> (stackTrace == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    exception.setStackTrace(<span class="keyword">new</span> StackTraceElement[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;<span class="comment">// ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> exception;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        Result result = <span class="keyword">null</span>;</span><br><span class="line">        String value = directory.getUrl().getMethodParameter(invocation.getMethodName(), MOCK_KEY, Boolean.FALSE.toString()).trim();</span><br><span class="line">        <span class="keyword">if</span> (value.length() == <span class="number">0</span> || <span class="string">"false"</span>.equalsIgnoreCase(value)) &#123;</span><br><span class="line">            result = <span class="keyword">this</span>.invoker.invoke(invocation); <span class="comment">// 未配置Mock</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value.startsWith(<span class="string">"force"</span>)) &#123; <span class="comment">// 若强制走Mock</span></span><br><span class="line">            result = doMockInvoke(invocation, <span class="keyword">null</span>); <span class="comment">//force:direct mock</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 若配置了Mock，只有调用远程服务失败才通过doMockInvoke走Mock逻辑</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = <span class="keyword">this</span>.invoker.invoke(invocation);</span><br><span class="line">                <span class="keyword">if</span> (result.getException() != <span class="keyword">null</span> &amp;&amp; result.getException() <span class="keyword">instanceof</span> RpcException) &#123; <span class="comment">// 若直接返回的是一个异常对象</span></span><br><span class="line">                    RpcException rpcException = (RpcException) result.getException();</span><br><span class="line">                    <span class="keyword">if</span> (rpcException.isBiz()) &#123; <span class="comment">// 若为业务异常直接抛出异常不走Mock逻辑</span></span><br><span class="line">                        <span class="keyword">throw</span> rpcException;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result = doMockInvoke(invocation, rpcException);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isBiz()) &#123; <span class="comment">// 若为业务异常直接抛出异常不走Mock逻辑</span></span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                result = doMockInvoke(invocation, e); <span class="comment">// 返回Mock值</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        checkWhetherDestroyed();</span><br><span class="line">        Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();</span><br><span class="line">        <span class="keyword">if</span> (contextAttachments != <span class="keyword">null</span> &amp;&amp; contextAttachments.size() != <span class="number">0</span>) &#123;</span><br><span class="line">            ((RpcInvocation) invocation).addAttachments(contextAttachments);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokers = list(invocation); <span class="comment">// 先路由过滤出符合路由条件的invokers</span></span><br><span class="line">        LoadBalance loadbalance = initLoadBalance(invokers, invocation); <span class="comment">// 通过Invoker的URL信息通过SPI机制获取负载均衡器</span></span><br><span class="line">        RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">        <span class="keyword">return</span> doInvoke(invocation, invokers, loadbalance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> List&lt;Invoker&lt;T&gt;&gt; list(Invocation invocation) <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">return</span> directory.list(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Directory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; list(Invocation invocation) <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Directory already destroyed .url: "</span> + getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doList(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; doList(Invocation invocation) &#123;</span><br><span class="line">        <span class="keyword">if</span> (forbidden) &#123;<span class="comment">// 无服务提供者或服务提供者被禁用</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.FORBIDDEN_EXCEPTION, <span class="string">"No provider available from registry "</span> + getUrl().getAddress() + <span class="string">" for service "</span> + getConsumerUrl().getServiceKey() + <span class="string">" on consumer "</span> + NetUtils.getLocalHost() + <span class="string">" use dubbo version "</span> + Version.getVersion() + <span class="string">", please check status of providers(disabled, not registered or in blacklist)."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (multiGroup) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.invokers == <span class="keyword">null</span> ? Collections.emptyList() : <span class="keyword">this</span>.invokers;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invokers = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 执行路由过滤器链</span></span><br><span class="line">            invokers = routerChain.route(getConsumerUrl(), invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invokers == <span class="keyword">null</span> ? Collections.emptyList() : invokers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterChain</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Invoker&lt;T&gt;&gt; route(URL url, Invocation invocation) &#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; finalInvokers = invokers;</span><br><span class="line">        <span class="keyword">for</span> (Router router : routers) &#123; <span class="comment">// 使用路由对服务提供者进行过滤</span></span><br><span class="line">            finalInvokers = router.route(finalInvokers, url, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> finalInvokers;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先调用<strong><code>FailoverClusterInvoker</code></strong>的<strong><code>doInvoke</code></strong>，首先获取重试次数，若重试次数小于等于0，则将重试次数置为1，然后遍历重试次数，调用<strong>负载均衡策略</strong>选择具体的Invoker。若选出的<strong><code>invoker</code></strong>在<strong><code>selected</code></strong>中或invoker不可用且<strong><code>availablecheck</code></strong>为真则<strong>重新选择</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FailoverClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">doInvoke</span><span class="params">(Invocation invocation, <span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, LoadBalance loadbalance)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; copyInvokers = invokers;</span><br><span class="line">        checkInvokers(copyInvokers, invocation);</span><br><span class="line">        String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">        <span class="keyword">int</span> len = getUrl().getMethodParameter(methodName, RETRIES_KEY, DEFAULT_RETRIES) + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (len &lt;= <span class="number">0</span>) &#123; <span class="comment">// 若重试次数小于等于0，则将重试次数置为1</span></span><br><span class="line">            len = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        RpcException le = <span class="keyword">null</span>; <span class="comment">// last exception.</span></span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; invoked = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(copyInvokers.size()); <span class="comment">// invoked invokers.</span></span><br><span class="line">        Set&lt;String&gt; providers = <span class="keyword">new</span> HashSet&lt;String&gt;(len);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                checkWhetherDestroyed();</span><br><span class="line">                copyInvokers = list(invocation);</span><br><span class="line">                checkInvokers(copyInvokers, invocation);</span><br><span class="line">            &#125;</span><br><span class="line">            Invoker&lt;T&gt; invoker = select(loadbalance, invocation, copyInvokers, invoked);   <span class="comment">// 调用负载均衡策略选择具体的Invoker</span></span><br><span class="line">            invoked.add(invoker);</span><br><span class="line">            RpcContext.getContext().setInvokers((List) invoked);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Result result = invoker.invoke(invocation);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.isBiz()) &#123; <span class="comment">// biz exception.</span></span><br><span class="line">                    <span class="keyword">throw</span> e;</span><br><span class="line">                &#125;</span><br><span class="line">                le = e;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                le = <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                providers.add(invoker.getUrl().getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(le.getCode(), <span class="string">"Failed to invoke the method "</span> + methodName + <span class="string">" in the service "</span> + getInterface().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClusterInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Invoker&lt;T&gt; <span class="title">select</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String methodName = invocation == <span class="keyword">null</span> ? StringUtils.EMPTY : invocation.getMethodName();</span><br><span class="line">        <span class="keyword">boolean</span> sticky = invokers.get(<span class="number">0</span>).getUrl().getMethodParameter(methodName, CLUSTER_STICKY_KEY, DEFAULT_CLUSTER_STICKY);</span><br><span class="line">        <span class="keyword">if</span> (stickyInvoker != <span class="keyword">null</span> &amp;&amp; !invokers.contains(stickyInvoker)) &#123;</span><br><span class="line">            stickyInvoker = <span class="keyword">null</span>; <span class="comment">// 忽略重载方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sticky &amp;&amp; stickyInvoker != <span class="keyword">null</span> &amp;&amp; (selected == <span class="keyword">null</span> || !selected.contains(stickyInvoker))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (availablecheck &amp;&amp; stickyInvoker.isAvailable()) &#123;</span><br><span class="line">                <span class="keyword">return</span> stickyInvoker;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Invoker&lt;T&gt; invoker = doSelect(loadbalance, invocation, invokers, selected);</span><br><span class="line">        <span class="keyword">if</span> (sticky) &#123;</span><br><span class="line">            stickyInvoker = invoker;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title">doSelect</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invokers.size() == <span class="number">1</span>) &#123; <span class="comment">// 若只有一个则直接返回</span></span><br><span class="line">            <span class="keyword">return</span> invokers.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Invoker&lt;T&gt; invoker = loadbalance.select(invokers, getUrl(), invocation); <span class="comment">// 调用具体负载均衡器的方法</span></span><br><span class="line">        <span class="keyword">if</span> ((selected != <span class="keyword">null</span> &amp;&amp; selected.contains(invoker)) || (!invoker.isAvailable() &amp;&amp; getUrl() != <span class="keyword">null</span> &amp;&amp; availablecheck)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; <span class="comment">// 若选出的invoker在selected中或invoker不可用&amp;&amp;availablecheck为真，则重新选择</span></span><br><span class="line">                Invoker&lt;T&gt; rInvoker = reselect(loadbalance, invocation, invokers, selected, availablecheck);</span><br><span class="line">                <span class="keyword">if</span> (rInvoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    invoker = rInvoker;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// 查看当前选中的调用者的索引，若不是最后一个，选择索引+1的那个</span></span><br><span class="line">                    <span class="keyword">int</span> index = invokers.indexOf(invoker);</span><br><span class="line">                    <span class="keyword">try</span> &#123;<span class="comment">//Avoid collision 避免碰撞</span></span><br><span class="line">                        invoker = invokers.get((index + <span class="number">1</span>) % invokers.size());</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Invoker&lt;T&gt; <span class="title">reselect</span><span class="params">(LoadBalance loadbalance, Invocation invocation, List&lt;Invoker&lt;T&gt;&gt; invokers, List&lt;Invoker&lt;T&gt;&gt; selected, <span class="keyword">boolean</span> availablecheck)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; reselectInvokers = <span class="keyword">new</span> ArrayList&lt;&gt;(invokers.size() &gt; <span class="number">1</span> ? (invokers.size() - <span class="number">1</span>) : invokers.size());</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123; <span class="comment">// 尝试选择不在selected中的调用者</span></span><br><span class="line">            <span class="keyword">if</span> (availablecheck &amp;&amp; !invoker.isAvailable()) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (selected == <span class="keyword">null</span> || !selected.contains(invoker)) &#123;</span><br><span class="line">                reselectInvokers.add(invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!reselectInvokers.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (selected != <span class="keyword">null</span>) &#123; <span class="comment">// 使用负载平衡策略选择一个可用的调用程序</span></span><br><span class="line">            <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : selected) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((invoker.isAvailable()) &amp;&amp; !reselectInvokers.contains(invoker)) &#123;</span><br><span class="line">                    reselectInvokers.add(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!reselectInvokers.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> loadbalance.select(reselectInvokers, getUrl(), invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>选出具体的Invoker后通过<strong><code>InvokerWrapper</code></strong>然后调用<strong><code>ListenerInvokerWrapper</code></strong>，从而调用<strong><code>ProtocolFilterWrapper</code></strong>的<strong><code>CallbackRegistrationInvoker</code></strong>的invoke方法，首先调用<strong><code>buildInvokerChain</code>中构造的过滤器链</strong>。首先执行<strong><code>ConsumerContextFilter</code>设置<code>RpcContext</code>参数</strong>，然后执行<strong><code>FutureFilter</code></strong>若当前方法为<strong>回调方法</strong>则执行回调方法，调用<strong><code>MonitorFilter</code></strong>，最终通过<strong><code>AsyncToSyncInvoker</code></strong>掉到<strong><code>DubboInvoker</code></strong>。若请求是同步请求会在<strong><code>AsyncToSyncInvoker</code>异步转同步</strong>同步获取请求结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerInvokerWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation); <span class="comment">// AsyncToSyncInvoker</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackRegistrationInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;T&gt; filterInvoker;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Filter&gt; filters;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallbackRegistrationInvoker</span><span class="params">(Invoker&lt;T&gt; filterInvoker, List&lt;Filter&gt; filters)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.filterInvoker = filterInvoker;</span><br><span class="line">            <span class="keyword">this</span>.filters = filters;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">            Result asyncResult = filterInvoker.invoke(invocation); <span class="comment">// 执行过滤器链</span></span><br><span class="line">            <span class="comment">// 过滤器都执行完了之后，回调每个ListenableFilter过滤器的onResponse或onError方法</span></span><br><span class="line">            asyncResult = asyncResult.whenCompleteWithContext((r, t) -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    Filter filter = filters.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123; <span class="comment">// onResponse callback</span></span><br><span class="line">                        Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                listener.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                listener.onError(t, filterInvoker, invocation);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filter.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> asyncResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">buildInvokerChain</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class="line">        Invoker&lt;T&gt; last = invoker;</span><br><span class="line">        <span class="comment">// 根据url获取filter，根据url中的parameters取key为key的value所对应的filter，但是还会匹配group</span></span><br><span class="line">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class="class">.<span class="keyword">class</span>).<span class="title">getActivateExtension</span>(<span class="title">invoker</span>.<span class="title">getUrl</span>(), <span class="title">key</span>, <span class="title">group</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!filters.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> Filter filter = filters.get(i);</span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;T&gt; next = last;</span><br><span class="line">                last = <span class="keyword">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">                        Result asyncResult;</span><br><span class="line">                        <span class="keyword">try</span> &#123;<span class="comment">// 得到一个异步结果</span></span><br><span class="line">                            asyncResult = filter.invoke(next, invocation);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123;</span><br><span class="line">                                Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    listener.onError(e, invoker, invocation);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> asyncResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CallbackRegistrationInvoker&lt;&gt;(last, filters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerContextFilter</span> <span class="keyword">extends</span> <span class="title">ListenableFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123; <span class="comment">// 设置RpcContext参数</span></span><br><span class="line">        RpcContext.getContext().setInvoker(invoker).setInvocation(invocation).setLocalAddress(NetUtils.getLocalHost(), <span class="number">0</span>)</span><br><span class="line">            .setRemoteAddress(invoker.getUrl().getHost(), invoker.getUrl().getPort())</span><br><span class="line">            .setRemoteApplicationName(invoker.getUrl().getParameter(REMOTE_APPLICATION_KEY))</span><br><span class="line">            .setAttachment(REMOTE_APPLICATION_KEY, invoker.getUrl().getParameter(APPLICATION_KEY));</span><br><span class="line">        <span class="keyword">if</span> (invocation <span class="keyword">instanceof</span> RpcInvocation) &#123;</span><br><span class="line">            ((RpcInvocation) invocation).setInvoker(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RpcContext.removeServerContext();</span><br><span class="line">            <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            RpcContext.removeContext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureFilter</span> <span class="keyword">extends</span> <span class="title">ListenableFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(<span class="keyword">final</span> Invoker&lt;?&gt; invoker, <span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        fireInvokeCallback(invoker, invocation);</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fireInvokeCallback</span><span class="params">(<span class="keyword">final</span> Invoker&lt;?&gt; invoker, <span class="keyword">final</span> Invocation invocation)</span> </span>&#123;<span class="comment">// 当前调用的方法是不是有callback</span></span><br><span class="line">        <span class="keyword">final</span> ConsumerMethodModel.AsyncMethodInfo asyncMethodInfo = getAsyncMethodInfo(invoker, invocation);</span><br><span class="line">        <span class="keyword">if</span> (asyncMethodInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> Method onInvokeMethod = asyncMethodInfo.getOninvokeMethod();</span><br><span class="line">        <span class="keyword">final</span> Object onInvokeInst = asyncMethodInfo.getOninvokeInstance();</span><br><span class="line">        <span class="keyword">if</span> (onInvokeMethod == <span class="keyword">null</span> &amp;&amp; onInvokeInst == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (onInvokeMethod == <span class="keyword">null</span> || onInvokeInst == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"service:"</span> + invoker.getUrl().getServiceKey() + <span class="string">" has a oninvoke callback config , but no such "</span> + (onInvokeMethod == <span class="keyword">null</span> ? <span class="string">"method"</span> : <span class="string">"instance"</span>) + <span class="string">" found. url:"</span> + invoker.getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!onInvokeMethod.isAccessible()) &#123;</span><br><span class="line">            onInvokeMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Object[] params = invocation.getArguments();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            onInvokeMethod.invoke(onInvokeInst, params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            fireThrowCallback(invoker, invocation, e.getTargetException());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            fireThrowCallback(invoker, invocation, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MonitorFilter</span> <span class="keyword">extends</span> <span class="title">ListenableFilter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invoker.getUrl().hasParameter(MONITOR_KEY)) &#123;</span><br><span class="line">            invocation.setAttachment(MONITOR_FILTER_START_TIME, String.valueOf(System.currentTimeMillis()));</span><br><span class="line">            getConcurrent(invoker, invocation).incrementAndGet(); <span class="comment">// 方法的执行次数+1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation); <span class="comment">// proceed invocation chain</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncToSyncInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;<span class="comment">// 异步转同步</span></span><br><span class="line">        Result asyncResult = invoker.invoke(invocation);  <span class="comment">// AsyncRpcResult---&gt;CompletableFuture---&gt;DefaultFuure</span></span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 如果invocation指定是同步的，则阻塞等待结果</span></span><br><span class="line">            <span class="keyword">if</span> (InvokeMode.SYNC == ((RpcInvocation) invocation).getInvokeMode()) &#123;</span><br><span class="line">                asyncResult.get(Integer.MAX_VALUE, TimeUnit.MILLISECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Interrupted unexpectedly while waiting for remoting result to return!  method: "</span> + invocation.getMethodName() + <span class="string">", provider: "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            Throwable t = e.getCause();</span><br><span class="line">            <span class="keyword">if</span> (t <span class="keyword">instanceof</span> TimeoutException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.TIMEOUT_EXCEPTION, <span class="string">"Invoke remote method timeout. method: "</span> + invocation.getMethodName() + <span class="string">", provider: "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t <span class="keyword">instanceof</span> RemotingException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.NETWORK_EXCEPTION, <span class="string">"Failed to invoke remote method: "</span> + invocation.getMethodName() + <span class="string">", provider: "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> asyncResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation inv)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        RpcInvocation invocation = (RpcInvocation) inv;</span><br><span class="line">        invocation.setInvoker(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmptyMap(attachment)) &#123;</span><br><span class="line">            invocation.addAttachmentsIfAbsent(attachment);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; contextAttachments = RpcContext.getContext().getAttachments();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmptyMap(contextAttachments)) &#123;</span><br><span class="line">            invocation.addAttachments(contextAttachments);</span><br><span class="line">        &#125;</span><br><span class="line">        invocation.setInvokeMode(RpcUtils.getInvokeMode(url, invocation));</span><br><span class="line">        RpcUtils.attachInvocationIdIfAsync(getUrl(), invocation);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> doInvoke(invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123; <span class="comment">// biz exception</span></span><br><span class="line">            Throwable te = e.getTargetException();</span><br><span class="line">            <span class="keyword">if</span> (te == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, e, invocation);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (te <span class="keyword">instanceof</span> RpcException) &#123;</span><br><span class="line">                    ((RpcException) te).setCode(RpcException.BIZ_EXCEPTION);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, te, invocation);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RpcException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.isBiz()) &#123;</span><br><span class="line">                <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, e, invocation);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, e, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终请求发送到服务端是通过<strong><code>DubboInvoker</code></strong>的<strong><code>doInvoke</code></strong>方法完成的，一个<strong><code>DubboInvoker</code></strong>对象可能<strong>并发同时</strong>调用某个服务，故单独一次调用都需要一个单独client去发送请求。然后依次调用<strong><code>ReferenceCountExchangeClient</code></strong>、<strong><code>HeaderExchangeClient</code></strong>，<strong><code>HeaderExchangeChannel</code></strong>中会构造一个<strong><code>Request</code></strong>对象且会构造一个<strong><code>DefaultFuture</code></strong>对象来<strong>阻塞<code>timeout</code></strong>等待结果，在构造<strong><code>DefaultFuture</code></strong>对象时会把<strong><code>DefaultFuture</code></strong>对象和<strong><code>req</code></strong>的<strong><code>id</code></strong>存入<strong><code>FUTURES</code></strong>中，当<strong><code>HeaderExchangeHandler</code></strong>接收到结果时，会从<strong><code>FUTURES</code></strong>中根据<strong><code>id</code></strong>获取到<strong><code>DefaultFuture</code></strong>对象，然后返回<strong><code>Response</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractInvoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Result <span class="title">doInvoke</span><span class="params">(<span class="keyword">final</span> Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        RpcInvocation inv = (RpcInvocation) invocation;</span><br><span class="line">        <span class="keyword">final</span> String methodName = RpcUtils.getMethodName(invocation);</span><br><span class="line">        inv.setAttachment(PATH_KEY, getUrl().getPath());</span><br><span class="line">        inv.setAttachment(VERSION_KEY, version);</span><br><span class="line">        <span class="comment">// 一个DubboInvoker对象可能并发同时调用某个服务，故单独一次调用都需要一个单独client去发送请求，这里会去选择使用本次调用该使用哪个client</span></span><br><span class="line">        ExchangeClient currentClient;</span><br><span class="line">        <span class="keyword">if</span> (clients.length == <span class="number">1</span>) &#123;</span><br><span class="line">            currentClient = clients[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 轮询使用clients</span></span><br><span class="line">            currentClient = clients[index.getAndIncrement() % clients.length];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> isOneway = RpcUtils.isOneway(getUrl(), invocation);  <span class="comment">// isOneway为true，表示请求不需要拿结果</span></span><br><span class="line">            <span class="comment">// 拿当前方法的所配置的超时时间，默认为1000，即1秒</span></span><br><span class="line">            <span class="keyword">int</span> timeout = getUrl().getMethodPositiveParameter(methodName, TIMEOUT_KEY, DEFAULT_TIMEOUT);</span><br><span class="line">            <span class="keyword">if</span> (isOneway) &#123; <span class="comment">// 若不需要获取请求结果</span></span><br><span class="line">                <span class="keyword">boolean</span> isSent = getUrl().getMethodParameter(methodName, Constants.SENT_KEY, <span class="keyword">false</span>);</span><br><span class="line">                currentClient.send(inv, isSent); <span class="comment">// 通过NettyClient发送请求</span></span><br><span class="line">                <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(invocation);  <span class="comment">// 生成一个默认的值的结果，value=null</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 需要获取请求结果</span></span><br><span class="line">                AsyncRpcResult asyncRpcResult = <span class="keyword">new</span> AsyncRpcResult(inv);</span><br><span class="line">                CompletableFuture&lt;Object&gt; responseFuture = currentClient.request(inv, timeout);  <span class="comment">// 异步去请求，得到一个CompletableFuture</span></span><br><span class="line">                <span class="comment">// responseFuture会完成后会调用asyncRpcResult中的方法，这里并不会阻塞，若要达到阻塞的效果在外层使用asyncRpcResult去控制</span></span><br><span class="line">                asyncRpcResult.subscribeTo(responseFuture);</span><br><span class="line">                FutureContext.getContext().setCompatibleFuture(responseFuture);</span><br><span class="line">                <span class="keyword">return</span> asyncRpcResult;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.TIMEOUT_EXCEPTION, <span class="string">"Invoke remote method timeout. method: "</span> + invocation.getMethodName() + <span class="string">", provider: "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(RpcException.NETWORK_EXCEPTION, <span class="string">"Failed to invoke remote method: "</span> + invocation.getMethodName() + <span class="string">", provider: "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceCountExchangeClient</span> <span class="keyword">implements</span> <span class="title">ExchangeClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">request</span><span class="params">(Object request, <span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> client.request(request, timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchangeClient</span> <span class="keyword">implements</span> <span class="title">ExchangeClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">request</span><span class="params">(Object request, <span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel.request(request, timeout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchangeChannel</span> <span class="keyword">implements</span> <span class="title">ExchangeChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">request</span><span class="params">(Object request, <span class="keyword">int</span> timeout)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>.getLocalAddress(), <span class="keyword">null</span>, <span class="string">"Failed to send request "</span> + request + <span class="string">", cause: The channel "</span> + <span class="keyword">this</span> + <span class="string">" is closed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Request req = <span class="keyword">new</span> Request();  <span class="comment">// create request.</span></span><br><span class="line">        req.setVersion(Version.getProtocolVersion());</span><br><span class="line">        req.setTwoWay(<span class="keyword">true</span>);</span><br><span class="line">        req.setData(request);</span><br><span class="line">        DefaultFuture future = DefaultFuture.newFuture(channel, req, timeout);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            channel.send(req);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            future.cancel();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFuture</span> <span class="keyword">extends</span> <span class="title">CompletableFuture</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DefaultFuture</span><span class="params">(Channel channel, Request request, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.channel = channel;</span><br><span class="line">        <span class="keyword">this</span>.request = request;</span><br><span class="line">        <span class="keyword">this</span>.id = request.getId();</span><br><span class="line">        <span class="keyword">this</span>.timeout = timeout &gt; <span class="number">0</span> ? timeout : channel.getUrl().getPositiveParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);</span><br><span class="line">        FUTURES.put(id, <span class="keyword">this</span>); <span class="comment">// put into waiting map.</span></span><br><span class="line">        CHANNELS.put(id, channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DefaultFuture <span class="title">newFuture</span><span class="params">(Channel channel, Request request, <span class="keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> DefaultFuture future = <span class="keyword">new</span> DefaultFuture(channel, request, timeout);</span><br><span class="line">        timeoutCheck(future); <span class="comment">// timeout check</span></span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Response response, <span class="keyword">boolean</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// response的id，</span></span><br><span class="line">            DefaultFuture future = FUTURES.remove(response.getId());</span><br><span class="line">            <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Timeout t = future.timeoutCheckTask;</span><br><span class="line">                <span class="keyword">if</span> (!timeout) &#123;<span class="comment">// decrease Time</span></span><br><span class="line">                    t.cancel();</span><br><span class="line">                &#125;</span><br><span class="line">                future.doReceived(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CHANNELS.remove(response.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReceived</span><span class="params">(Response res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (res == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"response cannot be null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (res.getStatus() == Response.OK) &#123;</span><br><span class="line">            <span class="keyword">this</span>.complete(res.getResult());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (res.getStatus() == Response.CLIENT_TIMEOUT || res.getStatus() == Response.SERVER_TIMEOUT) &#123;</span><br><span class="line">            <span class="keyword">this</span>.completeExceptionally(<span class="keyword">new</span> TimeoutException(res.getStatus() == Response.SERVER_TIMEOUT, channel, res.getErrorMessage()));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.completeExceptionally(<span class="keyword">new</span> RemotingException(channel, res.getErrorMessage()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">timeoutCheck</span><span class="params">(DefaultFuture future)</span> </span>&#123;</span><br><span class="line">        TimeoutCheckTask task = <span class="keyword">new</span> TimeoutCheckTask(future.getId());</span><br><span class="line">        future.timeoutCheckTask = TIME_OUT_TIMER.newTimeout(task, future.getTimeout(), TimeUnit.MILLISECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeoutCheckTask</span> <span class="keyword">implements</span> <span class="title">TimerTask</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(Timeout timeout)</span> </span>&#123;</span><br><span class="line">            DefaultFuture future = DefaultFuture.getFuture(requestID);</span><br><span class="line">            <span class="keyword">if</span> (future == <span class="keyword">null</span> || future.isDone()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Response timeoutResponse = <span class="keyword">new</span> Response(future.getId()); <span class="comment">// create exception response.</span></span><br><span class="line">            timeoutResponse.setStatus(future.isSent() ? Response.SERVER_TIMEOUT : Response.CLIENT_TIMEOUT); <span class="comment">// set timeout status.</span></span><br><span class="line">            timeoutResponse.setErrorMessage(future.getTimeoutMessage(<span class="keyword">true</span>));</span><br><span class="line">            DefaultFuture.received(future.getChannel(), timeoutResponse, <span class="keyword">true</span>); <span class="comment">// handle response.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPeer</span> <span class="keyword">implements</span> <span class="title">Endpoint</span>, <span class="title">ChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        send(message, url.getParameter(Constants.SENT_KEY, <span class="keyword">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClient</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span> <span class="keyword">implements</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, <span class="keyword">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (needReconnect &amp;&amp; !isConnected()) &#123;</span><br><span class="line">            connect();</span><br><span class="line">        &#125;</span><br><span class="line">        Channel channel = getChannel();</span><br><span class="line">        <span class="keyword">if</span> (channel == <span class="keyword">null</span> || !channel.isConnected()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">"message can not send, because channel is closed . url:"</span> + getUrl());</span><br><span class="line">        &#125;</span><br><span class="line">        channel.send(message, sent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyChannel</span> <span class="keyword">extends</span> <span class="title">AbstractChannel</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(Object message, <span class="keyword">boolean</span> sent)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.send(message, sent);  <span class="comment">// whether the channel is closed</span></span><br><span class="line">        <span class="keyword">boolean</span> success = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> timeout = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture future = channel.writeAndFlush(message);</span><br><span class="line">            <span class="comment">// sent为true等待消息发出，消息发送失败将抛出异常。sent为false不等待消息发出，将消息放入IO队列即刻返回</span></span><br><span class="line">            <span class="keyword">if</span> (sent) &#123; <span class="comment">// wait timeout ms</span></span><br><span class="line">                timeout = getUrl().getPositiveParameter(TIMEOUT_KEY, DEFAULT_TIMEOUT);</span><br><span class="line">                success = future.await(timeout); <span class="comment">// await会阻塞得到结果，这就是消费者端的timeout</span></span><br><span class="line">            &#125;</span><br><span class="line">            Throwable cause = future.cause();</span><br><span class="line">            <span class="keyword">if</span> (cause != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> cause;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">"Failed to send message "</span> + message + <span class="string">" to "</span> + getRemoteAddress() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">"Failed to send message "</span> + message + <span class="string">" to "</span> + getRemoteAddress() + <span class="string">"in timeout("</span> + timeout + <span class="string">"ms) limit"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理响应结果"><a href="#处理响应结果" class="headerlink" title="处理响应结果"></a>处理响应结果</h4><p>客户端收到服务端响应数据结果处理的入口为<strong><code>NettyClientHandler</code></strong>，后续处理逻辑和服务端收到客户端请求处理一样同样经过<strong><code>MultiMessageHandler</code></strong>、<strong><code>HeartbeatHandler</code></strong>最终通过<strong><code>ChannelEventRunnable</code></strong>异步处理任务，然后同样是调用<strong><code>DecodeHandler</code></strong>的<strong><code>received</code></strong>方法，只不过这里的message是Response，和服务端一样同样调用<strong><code>HeaderExchangeHandler</code></strong>，但走的是处理<strong><code>Response</code></strong>的逻辑<strong><code>handleResponse</code></strong>，从而在<strong><code>AsyncToSyncInvoker</code></strong>就能获取到结果了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClientHandler</span> <span class="keyword">extends</span> <span class="title">ChannelDuplexHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.received(channel, msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchangeHandler</span> <span class="keyword">implements</span> <span class="title">ChannelHandlerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">handleResponse</span><span class="params">(Channel channel, Response response)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (response != <span class="keyword">null</span> &amp;&amp; !response.isHeartbeat()) &#123;</span><br><span class="line">            DefaultFuture.received(channel, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultFuture</span> <span class="keyword">extends</span> <span class="title">CompletableFuture</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Response response)</span> </span>&#123;</span><br><span class="line">        received(channel, response, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Response response, <span class="keyword">boolean</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// response的id，</span></span><br><span class="line">            DefaultFuture future = FUTURES.remove(response.getId());</span><br><span class="line">            <span class="keyword">if</span> (future != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Timeout t = future.timeoutCheckTask;</span><br><span class="line">                <span class="keyword">if</span> (!timeout) &#123;<span class="comment">// decrease Time</span></span><br><span class="line">                    t.cancel();</span><br><span class="line">                &#125;</span><br><span class="line">                future.doReceived(response);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            CHANNELS.remove(response.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端是接收数据的入口为<strong><code>NettyServerHandler</code></strong>，然后调用<strong><code>MultiMessageHandler</code></strong>判断接收到数据是否为<strong><code>MultiMessage</code></strong>，若是则获取<strong><code>MultiMessage</code></strong>中<strong>单个<code>Message</code></strong>传递给<strong><code>HeartbeatHandler</code></strong>进行处理。<strong><code>HeartbeatHandler</code></strong>判断否<strong>心跳消息</strong>，若不是则把<strong><code>Message</code></strong>传递给<strong><code>AllChannelHandler</code></strong>。<strong><code>AllChannelHandler</code></strong>将接收到的<strong><code>Message</code></strong>封装为一个<strong><code>ChannelEventRunnable</code></strong>对象通过<strong>线程池异步处理</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerHandler</span> <span class="keyword">extends</span> <span class="title">ChannelDuplexHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        NettyChannel channel = NettyChannel.getOrAddChannel(ctx.channel(), url, handler); <span class="comment">// 接收到数据</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            handler.received(channel, msg);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            NettyChannel.removeChannelIfDisconnected(ctx.channel());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractPeer</span> <span class="keyword">implements</span> <span class="title">Endpoint</span>, <span class="title">ChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel ch, Object msg)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (closed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        handler.received(ch, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultiMessageHandler</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> MultiMessage) &#123;</span><br><span class="line">            MultiMessage list = (MultiMessage) message;</span><br><span class="line">            <span class="keyword">for</span> (Object obj : list) &#123;</span><br><span class="line">                handler.received(channel, obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler.received(channel, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeartbeatHandler</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        setReadTimestamp(channel);</span><br><span class="line">        <span class="keyword">if</span> (isHeartbeatRequest(message)) &#123; <span class="comment">// 若是一个心跳请求</span></span><br><span class="line">            Request req = (Request) message;</span><br><span class="line">            <span class="keyword">if</span> (req.isTwoWay()) &#123;</span><br><span class="line">                Response res = <span class="keyword">new</span> Response(req.getId(), req.getVersion());</span><br><span class="line">                res.setEvent(Response.HEARTBEAT_EVENT);</span><br><span class="line">                channel.send(res);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isHeartbeatResponse(message)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 若是一个心跳响应直接返回</span></span><br><span class="line">        &#125;</span><br><span class="line">        handler.received(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AllChannelHandler</span> <span class="keyword">extends</span> <span class="title">WrappedChannelHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        ExecutorService executor = getExecutorService();</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 交给线程池去处理message</span></span><br><span class="line">            executor.execute(<span class="keyword">new</span> ChannelEventRunnable(channel, handler, ChannelState.RECEIVED, message));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ExecutionException(message, channel, getClass() + <span class="string">" error when process received event ."</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>run</code></strong>方法中会调用<strong><code>DecodeHandler</code></strong>按<strong><code>Dubbo</code>协议</strong>的数据格式，解析当前请求<strong><code>Message</code></strong>的<strong><code>path</code></strong>，<strong><code>version</code></strong>，<strong>方法</strong>，<strong>方法参数</strong>等，然后把解析好的请求交给<strong><code>HeaderExchangeHandler</code></strong>处理Request数据，首先构造一个Response对象，然后调用<strong><code>ExchangeHandlerAdapter</code></strong>得到一个<strong><code>CompletionStage</code></strong>，然后给future通过<strong><code>whenComplete</code></strong>绑定一个<strong>回调函数</strong>，当future执行完后可从回调函数中得到<strong><code>ExchangeHandlerAdapter</code></strong>执行结果，并把执行结果设置给Response对象，通过channel发送出去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelEventRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state == ChannelState.RECEIVED) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                handler.received(channel, message);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">                <span class="keyword">case</span> CONNECTED:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        handler.connected(channel);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> DISCONNECTED:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        handler.disconnected(channel);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> SENT:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        handler.sent(channel, message);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> CAUGHT:</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        handler.caught(channel, exception);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DecodeHandler</span> <span class="keyword">extends</span> <span class="title">AbstractChannelHandlerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            decode(message);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;</span><br><span class="line">            decode(((Request) message).getData());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;</span><br><span class="line">            decode(((Response) message).getResult());</span><br><span class="line">        &#125;</span><br><span class="line">        handler.received(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(Object message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Decodeable) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ((Decodeable) message).decode();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;&#125; <span class="comment">// ~ end of catch</span></span><br><span class="line">        &#125; <span class="comment">// ~ end of if</span></span><br><span class="line">    &#125; <span class="comment">// ~ end of method decode</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchangeHandler</span> <span class="keyword">implements</span> <span class="title">ChannelHandlerDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        channel.setAttribute(KEY_READ_TIMESTAMP, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">final</span> ExchangeChannel exchangeChannel = HeaderExchangeChannel.getOrAddChannel(channel);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Request) &#123;<span class="comment">// handle request.</span></span><br><span class="line">                Request request = (Request) message;</span><br><span class="line">                <span class="keyword">if</span> (request.isEvent()) &#123;</span><br><span class="line">                    handlerEvent(channel, request);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (request.isTwoWay()) &#123;<span class="comment">// 如果是双向通行，则需要返回调用结果</span></span><br><span class="line">                        handleRequest(exchangeChannel, request);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果是单向通信，仅向后调用指定服务即可，无需返回调用结果</span></span><br><span class="line">                        handler.received(exchangeChannel, request.getData());</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Response) &#123;<span class="comment">// 客户端接收到服务响应结果</span></span><br><span class="line">                handleResponse(channel, (Response) message);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (message <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isClientSide(channel)) &#123;</span><br><span class="line">                    Exception e = <span class="keyword">new</span> Exception(<span class="string">"Dubbo client can not supported string message: "</span> + message + <span class="string">" in channel: "</span> + channel + <span class="string">", url: "</span> + channel.getUrl());</span><br><span class="line">                    logger.error(e.getMessage(), e);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String echo = handler.telnet(channel, (String) message);</span><br><span class="line">                    <span class="keyword">if</span> (echo != <span class="keyword">null</span> &amp;&amp; echo.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        channel.send(echo);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handler.received(exchangeChannel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            HeaderExchangeChannel.removeChannelIfDisconnected(channel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">handleRequest</span><span class="params">(<span class="keyword">final</span> ExchangeChannel channel, Request req)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        Response res = <span class="keyword">new</span> Response(req.getId(), req.getVersion()); <span class="comment">// 请求id，请求版本</span></span><br><span class="line">        <span class="keyword">if</span> (req.isBroken()) &#123;<span class="comment">// 请求处理失败</span></span><br><span class="line">            Object data = req.getData();</span><br><span class="line">            String msg;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span>) &#123;</span><br><span class="line">                msg = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (data <span class="keyword">instanceof</span> Throwable) &#123;</span><br><span class="line">                msg = StringUtils.toString((Throwable) data);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                msg = data.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            res.setErrorMessage(<span class="string">"Fail to decode request due to: "</span> + msg);</span><br><span class="line">            res.setStatus(Response.BAD_REQUEST); <span class="comment">// 设置 BAD_REQUEST 状态</span></span><br><span class="line">            channel.send(res);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// find handler by message class. 获取data字段值，也就是RpcInvocation对象，表示请求内容</span></span><br><span class="line">        Object msg = req.getData();</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 继续向下调用，分异步调用和同步调用，若是同步则会阻塞，若是异步则不会阻塞</span></span><br><span class="line">            CompletionStage&lt;Object&gt; future = handler.reply(channel, msg);   <span class="comment">// 异步执行服务</span></span><br><span class="line">            <span class="comment">// 若是同步调用则直接拿到结果，并发送到channel中去，若是异步调用则会监听，直到拿到服务执行结果，然后发送到channel中去</span></span><br><span class="line">            future.whenComplete((appResult, t) -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        res.setStatus(Response.OK);</span><br><span class="line">                        res.setResult(appResult);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;<span class="comment">// 服务执行过程中出现了异常，则把Throwable转成字符串，发送给channel中，也就是发送给客户端</span></span><br><span class="line">                        res.setStatus(Response.SERVICE_ERROR);</span><br><span class="line">                        res.setErrorMessage(StringUtils.toString(t));</span><br><span class="line">                    &#125;</span><br><span class="line">                    channel.send(res);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RemotingException e) &#123;&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            res.setStatus(Response.SERVICE_ERROR);</span><br><span class="line">            res.setErrorMessage(StringUtils.toString(e));</span><br><span class="line">            channel.send(res);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从本机<strong>已导出</strong>的<strong><code>Exporter</code></strong>中根据当前Request所对应的<strong>服务<code>key</code></strong>获取Exporter对象，从Exporter中得到Invoker然后执行invoke方法，此Invoker为<strong><code>ProtocolFilterWrapper$CallbackRegistrationInvoker</code></strong>。完成执行过滤器链，且在执行完后<strong>回调</strong>每个过滤器的<strong><code>onResponse</code></strong>或<strong><code>onError</code></strong>方法：</p><ul><li><strong><code>EchoFilter</code></strong>：断当前请求是否为<strong>回声测试</strong>，若是则<strong>不继续执行过滤器链</strong></li><li><strong><code>ClassLoaderFilter</code></strong>：<strong>设置当前线程<code>classloader</code></strong>为当前要执行服务接口所对应的<strong><code>classloader</code></strong></li><li><strong><code>GenericFilter</code></strong>：把<strong>泛化调用</strong>发送过来的信息包装为<strong><code>RpcInvocation</code></strong>对象</li><li><strong><code>ContextFilter</code></strong>：<strong>设置<code>RpcContext.getContext</code>参数</strong></li><li><strong><code>TraceFilter</code></strong>：先执行下一个invoker的invoke方法，<strong>调用成功后录调用信息</strong></li><li><strong><code>TimeoutFilter</code></strong>：调用时没有特别处理只记录一下当前时间，当<strong>整个filter链执行完</strong>后回调TimeoutFilter的<strong><code>onResponse</code>方法判断本次调用是否超过<code>timeout</code></strong></li><li><strong><code>MonitorFilter</code></strong>：<strong>记录当前服务的执行次数</strong></li><li><strong><code>ExceptionFilter</code></strong>：调用时没有特别处理，<strong>回调<code>onResponse</code>方法时对不同异常进行处理</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ExchangeHandler requestHandler = <span class="keyword">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">reply</span><span class="params">(ExchangeChannel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(message <span class="keyword">instanceof</span> Invocation)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">"Unsupported request: "</span> + (message == <span class="keyword">null</span> ? <span class="keyword">null</span> : (message.getClass().getName() + <span class="string">": "</span> + message)) + <span class="string">", channel: consumer: "</span> + channel.getRemoteAddress() + <span class="string">" --&gt; provider: "</span> + channel.getLocalAddress());</span><br><span class="line">            &#125;</span><br><span class="line">            Invocation inv = (Invocation) message; <span class="comment">// 转成Invocation对象，要开始用反射执行方法了</span></span><br><span class="line">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);  <span class="comment">// 服务实现者</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class="line">                String methodsStr = invoker.getUrl().getParameters().get(<span class="string">"methods"</span>);</span><br><span class="line">                <span class="keyword">boolean</span> hasMethod = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (methodsStr == <span class="keyword">null</span> || !methodsStr.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String[] methods = methodsStr.split(<span class="string">","</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class="line">                            hasMethod = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!hasMethod) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());<span class="comment">// 这里设置了，service中才能拿到remoteAddress</span></span><br><span class="line">            Result result = invoker.invoke(inv);<span class="comment">// 执行服务，得到结果</span></span><br><span class="line">            <span class="keyword">return</span> result.completionFuture().thenApply(Function.identity()); <span class="comment">// 返回一个CompletableFuture</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">                reply((ExchangeChannel) channel, message);  <span class="comment">// 这是服务端接收到Invocation时的处理逻辑</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.received(channel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_CONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_DISCONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class="line">            Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class="line">            <span class="keyword">if</span> (invocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    received(channel, invocation);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Invocation <span class="title">createInvocation</span><span class="params">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class="line">            String method = url.getParameter(methodKey);</span><br><span class="line">            <span class="keyword">if</span> (method == <span class="keyword">null</span> || method.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcInvocation invocation = <span class="keyword">new</span> RpcInvocation(method, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">            invocation.setAttachment(PATH_KEY, url.getPath());</span><br><span class="line">            invocation.setAttachment(GROUP_KEY, url.getParameter(GROUP_KEY));</span><br><span class="line">            invocation.setAttachment(INTERFACE_KEY, url.getParameter(INTERFACE_KEY));</span><br><span class="line">            invocation.setAttachment(VERSION_KEY, url.getParameter(VERSION_KEY));</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(STUB_EVENT_KEY, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                invocation.setAttachment(STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> invocation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    Invoker&lt;?&gt; getInvoker(Channel channel, Invocation inv) <span class="keyword">throws</span> RemotingException &#123;</span><br><span class="line">        <span class="keyword">boolean</span> isCallBackServiceInvoke = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isStubServiceInvoke = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> port = channel.getLocalAddress().getPort();</span><br><span class="line">        String path = inv.getAttachments().get(PATH_KEY);</span><br><span class="line">        isStubServiceInvoke = Boolean.TRUE.toString().equals(inv.getAttachments().get(STUB_EVENT_KEY));</span><br><span class="line">        <span class="keyword">if</span> (isStubServiceInvoke) &#123;</span><br><span class="line">            port = channel.getRemoteAddress().getPort();</span><br><span class="line">        &#125;</span><br><span class="line">        isCallBackServiceInvoke = isClientSide(channel) &amp;&amp; !isStubServiceInvoke; <span class="comment">//callback</span></span><br><span class="line">        <span class="keyword">if</span> (isCallBackServiceInvoke) &#123;</span><br><span class="line">            path += <span class="string">"."</span> + inv.getAttachments().get(CALLBACK_SERVICE_KEY);</span><br><span class="line">            inv.getAttachments().put(IS_CALLBACK_SERVICE_INVOKE, Boolean.TRUE.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从请求中拿到serviceKey，从exporterMap中拿到已经导出了的服务</span></span><br><span class="line">        String serviceKey = serviceKey(port, path, inv.getAttachments().get(VERSION_KEY), inv.getAttachments().get(GROUP_KEY));</span><br><span class="line">        DubboExporter&lt;?&gt; exporter = (DubboExporter&lt;?&gt;) exporterMap.get(serviceKey);</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">"Not found exported service: "</span> + serviceKey + <span class="string">" in "</span> + exporterMap.keySet() + <span class="string">", may be version or group mismatch , channel: consumer: "</span> + channel.getRemoteAddress() + <span class="string">" --&gt; provider: "</span> + channel.getLocalAddress() + <span class="string">", message:"</span> + inv);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exporter.getInvoker(); <span class="comment">// 拿到服务对应的Invoker</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackRegistrationInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">            Result asyncResult = filterInvoker.invoke(invocation); <span class="comment">// 执行过滤器链</span></span><br><span class="line">            <span class="comment">// 过滤器都执行完了之后，回调每个ListenableFilter过滤器的onResponse或onError方法</span></span><br><span class="line">            asyncResult = asyncResult.whenCompleteWithContext((r, t) -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    Filter filter = filters.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123; <span class="comment">// onResponse callback</span></span><br><span class="line">                        Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                listener.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                listener.onError(t, filterInvoker, invocation);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filter.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> asyncResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行完过滤器链</strong>后，通过<strong><code>InvokerWrapper</code></strong>到<strong><code>DelegateProviderMetaDataInvoker</code></strong>调用<strong><code>AbstractProxyInvoker</code></strong>，在服务导出时根据服务接口服务实现类对象生成，其<strong><code>invoke</code></strong>方法调用<strong><code>JavassistProxyFactory</code></strong>的<strong><code>doInvoke</code></strong>方法真正执行服务实现类对象方法得到结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateProviderMetaDataInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProxyInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 执行服务，得到一个接口，可能是一个CompletableFuture(表示异步调用)，可能是一个正常的服务执行结果（同步调用）</span></span><br><span class="line">            Object value = doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments());</span><br><span class="line">            CompletableFuture&lt;Object&gt; future = wrapWithFuture(value, invocation); <span class="comment">// 将同步调用的服务执行结果封装为CompletableFuture类型</span></span><br><span class="line">            AsyncRpcResult asyncRpcResult = <span class="keyword">new</span> AsyncRpcResult(invocation); <span class="comment">// 异步RPC结果</span></span><br><span class="line">            future.whenComplete((obj, t) -&gt; &#123; <span class="comment">//设置一个回调，若是异步调用，则服务执行完成后将执行这里的回调</span></span><br><span class="line">                <span class="comment">// 当服务执行完后，将结果或异常设置到AsyncRpcResult中，若是异步服务，则服务之后的异常会在此处封装到AppResponse中然后返回，若是同步服务出异常了，则会在下面将异常封装到AsyncRpcResult中</span></span><br><span class="line">                AppResponse result = <span class="keyword">new</span> AppResponse();</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> CompletionException) &#123;</span><br><span class="line">                        result.setException(t.getCause());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.setException(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.setValue(obj);</span><br><span class="line">                &#125;</span><br><span class="line">                asyncRpcResult.complete(result);  <span class="comment">// 将服务执行完之后的结果设置到异步RPC结果对象中</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> asyncRpcResult;<span class="comment">// 返回异步RPC结果</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;<span class="comment">// 假设抛的NullPointException，那么会把这个异常包装为一个Result对象</span></span><br><span class="line">            <span class="comment">// 同步服务执行时如何出异常了，会在此处将异常信息封装为一个AsyncRpcResult然后返回</span></span><br><span class="line">            <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, e.getTargetException(), invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;<span class="comment">// 执行服务后的所有异常都会包装为RpcException进行抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to invoke remote proxy method "</span> + invocation.getMethodName() + <span class="string">" to "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若现在被代理对象proxy本身就是一个已经被代理过的对象，则取代理类的Wrapper，否则取type接口的Wrapper</span></span><br><span class="line">        <span class="comment">// Wrapper是针对某个类或某个接口的包装类，通过wrapper对象可以更方便的去执行某个类或某个接口的方法</span></span><br><span class="line">        <span class="keyword">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">'$'</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;<span class="comment">// proxy是服务实现类 type是服务接口 url是一个注册中心url</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// 执行proxy的method方法，执行的proxy实例的方法，若没有wrapper，则要通过原生的反射技术去获取Method对象，然后执行</span></span><br><span class="line">                <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>当服务消费者在调用一个服务时，服务提供者在执行服务逻辑时可能会出现异常，服务消费者需要在消费端抛出该异常。</p><p>服务提供者在执行服务时若出现了异常，框架会把异常捕获，捕获异常的逻辑在<strong><code>AbstractProxyInvoker</code></strong>中，捕获到异常后，<strong>把异常信息包装为正常的<code>AppResponse</code></strong>对象，其value属性为null，exception属性有值。</p><p>然后服务提供者会把该<strong><code>AppResponse</code></strong>对象发送给服务消费端，服务消费端是在<strong><code>InvokerInvocationHandler</code></strong>中调用<strong><code>AppResponse</code></strong>的<strong><code>recreate</code></strong>方法重新得到一个结果，在<strong><code>recreate</code></strong>方法中会去判断<strong><code>AppResponse</code></strong>对象是否正常，即是否存在exception信息，若存在则直接throw该exception，从而做到<strong>服务执行时出现的异常，在服务消费端抛出</strong>。</p><p>若服务提供者抛出的异常类<strong>消费者端不存在</strong>，消费者也就抛不出该异常，则需要服务提供者端<strong><code>ExceptionFilter</code></strong>过滤器，其主要是在服务提供者执行完服务后会去识别异常：</p><ul><li>若为<strong>需要开发人员捕获的异常</strong>，则忽略直接把该异常返回给消费者</li><li>若当前<strong>所执行的方法签名上有声明</strong>，则忽略直接把该异常返回给消费者</li><li>若<strong>抛出异常不需要开发人员捕获</strong>，或方法上没有申明，则服务端记录一个error日志</li><li>若<strong>异常类和接口类在同一<code>Jar</code>包里</strong>，则忽略直接把该异常返回给消费者</li><li>若<strong>异常类是<code>JDK</code>自带异常</strong>，则忽略直接把该异常返回给消费者</li><li>若<strong>异常类是<code>Dubbo</code>自带异常</strong>，则忽略直接把该异常返回给消费者</li><li>若不是以上情况，<strong>则把异常信息包装成<code>RuntimeException</code>，并覆盖<code>AppResponse</code>对象中的exception属性</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionFilter</span> <span class="keyword">extends</span> <span class="title">ListenableFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invoker&lt;?&gt; invoker, Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionListener</span> <span class="keyword">implements</span> <span class="title">Listener</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(ExceptionListener<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Result appResponse, Invoker&lt;?&gt; invoker, Invocation invocation)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (appResponse.hasException() &amp;&amp; GenericService<span class="class">.<span class="keyword">class</span> !</span>= invoker.getInterface()) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Throwable exception = appResponse.getException();</span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> RuntimeException) &amp;&amp; (exception <span class="keyword">instanceof</span> Exception)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 如果是checked异常，直接抛出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;  <span class="comment">// 在方法签名上有声明，直接抛出</span></span><br><span class="line">                        Method method = invoker.getInterface().getMethod(invocation.getMethodName(), invocation.getParameterTypes());</span><br><span class="line">                        Class&lt;?&gt;[] exceptionClassses = method.getExceptionTypes();</span><br><span class="line">                        <span class="keyword">for</span> (Class&lt;?&gt; exceptionClass : exceptionClassses) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (exception.getClass().equals(exceptionClass)) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 未在方法签名上定义的异常，在服务器端打印ERROR日志</span></span><br><span class="line">                    logger.error(<span class="string">"Got unchecked and undeclared exception which called by "</span> + RpcContext.getContext().getRemoteHost() + <span class="string">". service: "</span> + invoker.getInterface().getName() + <span class="string">", method: "</span> + invocation.getMethodName() + <span class="string">", exception: "</span> + exception.getClass().getName() + <span class="string">": "</span> + exception.getMessage(), exception);</span><br><span class="line">                    String serviceFile = ReflectUtils.getCodeBase(invoker.getInterface());</span><br><span class="line">                    String exceptionFile = ReflectUtils.getCodeBase(exception.getClass());</span><br><span class="line">                    <span class="keyword">if</span> (serviceFile == <span class="keyword">null</span> || exceptionFile == <span class="keyword">null</span> || serviceFile.equals(exceptionFile)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 异常类和接口类在同一jar包里，直接抛出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    String className = exception.getClass().getName();</span><br><span class="line">                    <span class="keyword">if</span> (className.startsWith(<span class="string">"java."</span>) || className.startsWith(<span class="string">"javax."</span>)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;  <span class="comment">// 是JDK自带的异常，直接抛出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> RpcException) &#123;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 是Dubbo本身的异常，直接抛出</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    appResponse.setException(<span class="keyword">new</span> RuntimeException(StringUtils.toString(exception)));  <span class="comment">// 否则，包装成RuntimeException抛给客户端</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h3&gt;&lt;p&gt;客户端调用Dubbo方法时首先通过&lt;strong&gt;&lt;code&gt;InvokerInvocationHandler&lt;/code&gt;&lt;/st
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/categories/Cloud/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务引入</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo%E6%9C%8D%E5%8A%A1%E5%BC%95%E5%85%A5/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo服务引入/</id>
    <published>2021-12-15T16:00:00.000Z</published>
    <updated>2022-01-13T12:01:21.919Z</updated>
    
    <content type="html"><![CDATA[<p>Spring启动过程中会将<strong><code>@Reference</code>注解</strong>标注的属性赋值，赋值对象为<strong><code>ReferenceBean</code></strong>中<strong><code>get()</code>方法</strong>所返回的代理对象。<strong><code>ReferenceBean</code></strong>实现了<strong><code>FactoryBean</code></strong>接口，在其<strong><code>getObject</code></strong>方法中调用的<strong><code>get</code></strong>方法。<strong><code>ReferenceBean</code></strong>跟<strong><code>ServiceBean</code></strong>类似也实现了<strong><code>ApplicationContextAware</code></strong>接口，在<strong><code>setApplicationContext</code></strong>方法中同样将<strong><code>applicationContext</code></strong>添加到<strong><code>SpringExtensionFactory</code></strong>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ReferenceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">FactoryBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ApplicationContext applicationContext;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> get(); <span class="comment">// 调用超类ReferenceConfig的get方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;<span class="comment">// 该方法给ReferenceBean对象的属性赋值</span></span><br><span class="line">        <span class="comment">// 此处省略了一些列属性填充代码</span></span><br><span class="line">        <span class="keyword">if</span> (shouldInit()) &#123;</span><br><span class="line">            getObject();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用超类<strong><code>ReferenceConfig</code></strong>的<strong><code>get</code></strong>方法时跟<strong>服务导出类似</strong>同样先调用<strong><code>checkAndUpdateSubConfigs</code>检查和更新参数</strong>，将<strong><code>ReferenceBean</code></strong>中的属性值更新为<strong>优先级最高</strong>的参数值，然后调用<strong><code>init</code></strong>方法成代理对象<strong><code>ref</code></strong>。在<strong><code>init</code></strong>方法中首先将<strong>消费者</strong>所<strong>引入服务设置的参数</strong>解析到一个map中，后续会根据该map中的参数<strong>从注册中心查找服务</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractReferenceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkAndUpdateSubConfigs();</span><br><span class="line">        <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The invoker of ReferenceConfig("</span> + url + <span class="string">") has already destroyed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;<span class="comment">// 入口</span></span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ref;  <span class="comment">// Invoke代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndUpdateSubConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(interfaceName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"&lt;dubbo:reference interface=\"\" /&gt; interface not allow null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        completeCompoundConfigs(); <span class="comment">// 填充ReferenceConfig对象中的属性</span></span><br><span class="line">        startConfigCenter();  <span class="comment">// 开启配置中心</span></span><br><span class="line">        checkDefault();  <span class="comment">// get consumer's global configuration</span></span><br><span class="line">        <span class="keyword">this</span>.refresh(); <span class="comment">// 刷新ReferenceConfig对象的属性值</span></span><br><span class="line">        <span class="keyword">if</span> (getGeneric() == <span class="keyword">null</span> &amp;&amp; getConsumer() != <span class="keyword">null</span>) &#123; <span class="comment">// 设置泛化</span></span><br><span class="line">            setGeneric(getConsumer().getGeneric());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">            interfaceClass = GenericService<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread().getContextClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        &#125;</span><br><span class="line">        resolveFile();</span><br><span class="line">        checkApplication();</span><br><span class="line">        checkMetadataReport();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        checkStubAndLocal(interfaceClass);</span><br><span class="line">        checkMock(interfaceClass);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(SIDE_KEY, CONSUMER_SIDE);</span><br><span class="line">        appendRuntimeParameters(map);</span><br><span class="line">        <span class="keyword">if</span> (!ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">            String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">            <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(REVISION_KEY, revision);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过接口对应的Wrapper，拿到接口中所有的方法名字</span></span><br><span class="line">            String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">            <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(METHODS_KEY, ANY_VALUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(METHODS_KEY, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), COMMA_SEPARATOR));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(INTERFACE_KEY, interfaceName);</span><br><span class="line">        appendParameters(map, metrics); <span class="comment">// 监控中心参数</span></span><br><span class="line">        appendParameters(map, application); <span class="comment">// 应用相关参数</span></span><br><span class="line">        appendParameters(map, <span class="keyword">module</span>); <span class="comment">// 模块相关参数</span></span><br><span class="line">        appendParameters(map, consumer); <span class="comment">// 提供者相关参数</span></span><br><span class="line">        appendParameters(map, <span class="keyword">this</span>); <span class="comment">// 服务本身相关参数</span></span><br><span class="line">        Map&lt;String, Object&gt; attributes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methods)) &#123; <span class="comment">// 方法参数：@Reference(methods = &#123;@Method(name = "say", timeout = 3000)&#125;)</span></span><br><span class="line">            attributes = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="keyword">for</span> (MethodConfig methodConfig : methods) &#123;</span><br><span class="line">                appendParameters(map, methodConfig, methodConfig.getName());</span><br><span class="line">                String retryKey = methodConfig.getName() + <span class="string">".retry"</span>;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(retryKey)) &#123; <span class="comment">// 若某个方法配置存在xx.retry=false，则改成xx.retry=0</span></span><br><span class="line">                    String retryValue = map.remove(retryKey);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"false"</span>.equals(retryValue)) &#123;</span><br><span class="line">                        map.put(methodConfig.getName() + <span class="string">".retries"</span>, <span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(methodConfig.getName(), convertMethodConfig2AsyncInfo(methodConfig));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String hostToRegistry = ConfigUtils.getSystemProperty(DUBBO_IP_TO_REGISTRY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(hostToRegistry)) &#123;</span><br><span class="line">            hostToRegistry = NetUtils.getLocalHost();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isInvalidLocalHost(hostToRegistry)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Specified invalid registry ip from property:"</span> + DUBBO_IP_TO_REGISTRY + <span class="string">", value:"</span> + hostToRegistry);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(REGISTER_IP_KEY, hostToRegistry);</span><br><span class="line">        ref = createProxy(map); <span class="comment">// 根据map中的参数创建代理对象</span></span><br><span class="line">        String serviceKey = URL.buildKey(interfaceName, group, version);</span><br><span class="line">        ApplicationModel.initConsumerModel(serviceKey, buildConsumerModel(serviceKey, attributes));</span><br><span class="line">        initialized = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若为<strong>本地调用</strong>则生成一个<strong>本地<code>URL</code></strong>，然后调用<strong><code>Protocol</code></strong>的<strong><code>refer</code></strong>方法得到一个<strong><code>Invoker</code></strong>对象，若为<strong>远程调用</strong>首先判断<strong><code>@Reference</code></strong>注解中<strong><code>url</code></strong>属性指定的<strong>注册中心地址</strong>是否存在，若存在则解析出注册中心的地址列表暂存到<strong><code>urls</code></strong>属性中，解析<strong><code>url</code></strong>判断若为<strong>注册中心地址</strong>，则在url中添加一个<strong><code>refer</code>参数</strong>，将map中存储的消费端参数设置到refer中，若为<strong>服务地址</strong>，可能url中配置了参数，则需要<strong>将服务端的参数合并补全到消费端参数</strong>。若<strong><code>@Reference</code></strong>注解中<strong><code>url</code></strong>属性未设置，则<strong>加载注册中心地址</strong>列表，然后遍历加载到的地址，将消费端参数添加到注册中心地址URL中的<strong><code>REFER_KEY</code></strong>中。</p><p>解析得到urls后，若只有一个<strong>注册中心地址</strong>则直接<strong><code>refer</code></strong>得到一个<strong><code>invoker</code></strong>，若有<strong>多个注册中心地址</strong>，则遍历每个注册中心，分别调用<strong><code>refer</code></strong>方法得到Invoker且添加到<strong><code>invokers</code></strong>中，然后把<strong><code>invokers</code></strong>调用<strong><code>CLUSTER.join</code></strong>封装所有<strong><code>invokers</code></strong>得到一个<strong><code>invoker</code></strong>，<strong><code>CLUSTER</code></strong>为一个<strong><code>SPI</code></strong>扩展接口<strong><code>Cluster</code></strong>，<strong><code>CLUSTER</code></strong>默认实现为<strong><code>FailoverCluster</code></strong>。最终将得到的invoker对象调用<strong><code>PROXY_FACTORY.getProxy</code></strong>得到一个代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractReferenceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">createProxy</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldJvmRefer(map)) &#123; <span class="comment">// 若是本地调用即以injvm://开头的协议</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(LOCAL_PROTOCOL, LOCALHOST_VALUE, <span class="number">0</span>, interfaceClass.getName()).addParameters(map);</span><br><span class="line">            invoker = REF_PROTOCOL.refer(interfaceClass, url);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 之所以有urls，因为可在@Reference的url属性中配置多个url，可以是点对点的服务地址，也可以是注册中心的地址</span></span><br><span class="line">            urls.clear(); <span class="comment">// reference retry init will add url to urls, lead to OOM</span></span><br><span class="line">            <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; url.length() &gt; <span class="number">0</span>) &#123;  <span class="comment">// @Reference中指定了url属性</span></span><br><span class="line">                String[] us = SEMICOLON_SPLIT_PATTERN.split(url); <span class="comment">// 用;号切分</span></span><br><span class="line">                <span class="keyword">if</span> (us != <span class="keyword">null</span> &amp;&amp; us.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String u : us) &#123;</span><br><span class="line">                        URL url = URL.valueOf(u);</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isEmpty(url.getPath())) &#123;</span><br><span class="line">                            url = url.setPath(interfaceName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123; <span class="comment">// 若是注册中心地址，则在url中添加一个refer参数</span></span><br><span class="line">                            urls.add(url.addParameterAndEncoded(REFER_KEY, StringUtils.toQueryString(map))); <span class="comment">// map表示消费者端配置的参数</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 若是服务地址，有可能url中配置了参数，map中表示的服务消费者消费服务时的参数，所以需要合并</span></span><br><span class="line">                            urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// @Reference中的protocol属性表示使用哪个协议调用服务，若不是本地调用协议injvm://，则把注册中心地址找出来，对于injvm://协议已经在之前的逻辑中就已经生成invoke了</span></span><br><span class="line">                <span class="keyword">if</span> (!LOCAL_PROTOCOL.equalsIgnoreCase(getProtocol())) &#123;</span><br><span class="line">                    checkRegistry();</span><br><span class="line">                    List&lt;URL&gt; us = loadRegistries(<span class="keyword">false</span>); <span class="comment">// 加载注册中心地址</span></span><br><span class="line">                    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(us)) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (URL u : us) &#123;</span><br><span class="line">                            URL monitorUrl = loadMonitor(u);</span><br><span class="line">                            <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                map.put(MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                            &#125;</span><br><span class="line">                            urls.add(u.addParameterAndEncoded(REFER_KEY, StringUtils.toQueryString(map))); <span class="comment">// 对于注册中心地址都添加REFER_KEY</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (urls.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No such any registry to reference "</span> + interfaceName + <span class="string">" on the consumer "</span> + NetUtils.getLocalHost() + <span class="string">" use dubbo version "</span> + Version.getVersion() + <span class="string">", please config &lt;dubbo:registry address=\"...\" /&gt; to your spring config."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (urls.size() == <span class="number">1</span>) &#123;  <span class="comment">// 若只有一个url则直接refer得到一个invoker</span></span><br><span class="line">                invoker = REF_PROTOCOL.refer(interfaceClass, urls.get(<span class="number">0</span>)); <span class="comment">// RegistryProtocol.refer() 或 DubboProtocol.refer()</span></span><br><span class="line">                <span class="comment">// MockClusterInvoker--&gt;FailoverClusterInvoker--&gt;RegistryDirectory</span></span><br><span class="line">                <span class="comment">// ---&gt;RegistryDirectory$InvokerDelegate--&gt;ListenerInvokerWrapper--&gt;ProtocolFilterWrapper$CallbackRegistrationInvoker--&gt;ConsumerContextFilter--&gt;FutureFilter--&gt;MonitorFilter--&gt;AsyncToSyncInvoker--&gt;DubboInvoker</span></span><br><span class="line">                <span class="comment">// ---&gt;RegistryDirectory$InvokerDelegate--&gt;ListenerInvokerWrapper--&gt;ProtocolFilterWrapper$CallbackRegistrationInvoker--&gt;ConsumerContextFilter--&gt;FutureFilter--&gt;MonitorFilter--&gt;AsyncToSyncInvoker--&gt;DubboInvoker</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 若这多个urls中不存在注册中心url，则把所有invoker整合为FailoverCluster</span></span><br><span class="line">                <span class="comment">// 若有多个url根据每个url，refer得到对应的invoker，若这多个urls中存在注册中心url，则把所有invoker整合为RegistryAwareClusterInvoker，该Invoker在调用时，会查看所有Invoker中是否有默认的，若有则使用默认Invoker，若没有则使用第一个Invoker</span></span><br><span class="line">                List&lt;Invoker&lt;?&gt;&gt; invokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">                URL registryURL = <span class="keyword">null</span>; <span class="comment">// 用来记录urls中最后一个注册中心url</span></span><br><span class="line">                <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                    invokers.add(REF_PROTOCOL.refer(interfaceClass, url));</span><br><span class="line">                    <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        registryURL = url; <span class="comment">// use last registry url</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (registryURL != <span class="keyword">null</span>) &#123; <span class="comment">// registry url is available use RegistryAwareCluster only when register's CLUSTER is available</span></span><br><span class="line">                    URL u = registryURL.addParameter(CLUSTER_KEY, RegistryAwareCluster.NAME); <span class="comment">// 若存在注册中心地址</span></span><br><span class="line">                    <span class="comment">// The invoker wrap relation would be: RegistryAwareClusterInvoker(StaticDirectory) -&gt; FailoverClusterInvoker(RegistryDirectory, will execute route) -&gt; Invoker</span></span><br><span class="line">                    invoker = CLUSTER.join(<span class="keyword">new</span> StaticDirectory(u, invokers));<span class="comment">// StaticDirectory表示静态服务目录，里面的invokers是不会变的, 生成一个RegistryAwareCluster</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// not a registry url, must be direct invoke.</span></span><br><span class="line">                    invoker = CLUSTER.join(<span class="keyword">new</span> StaticDirectory(invokers)); <span class="comment">// 若不存在注册中心地址, 生成一个FailoverClusterInvoker</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldCheck() &amp;&amp; !invoker.isAvailable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to check the status of the service "</span> + interfaceName + <span class="string">". No provider available for the service "</span> + (group == <span class="keyword">null</span> ? <span class="string">""</span> : group + <span class="string">"/"</span>) + interfaceName + (version == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">":"</span> + version) + <span class="string">" from the url "</span> + invoker.getUrl() + <span class="string">" to the consumer "</span> + NetUtils.getLocalHost() + <span class="string">" use dubbo version "</span> + Version.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">        MetadataReportService metadataReportService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((metadataReportService = getMetadataReportService()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            URL consumerURL = <span class="keyword">new</span> URL(CONSUMER_PROTOCOL, map.remove(REGISTER_IP_KEY), <span class="number">0</span>, map.get(INTERFACE_KEY), map);</span><br><span class="line">            metadataReportService.publishConsumer(consumerURL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) PROXY_FACTORY.getProxy(invoker);<span class="comment">// create service proxy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和服务导出一样这里的<strong><code>Protocol</code></strong>会有<strong><code>ProtocolListenerWrapper</code></strong>和<strong><code>ProtocolFilterWrapper</code></strong>两个<strong><code>Wrapper</code></strong>，但这两个Wrapper没有做什么事，最终掉到<strong><code>RegistryProtocol</code></strong>，首先根据URL获取Registry，然后在<strong><code>doRefer</code></strong>中根据URL和接口生成<strong><code>RegistryDirectory</code>动态服务目录</strong>，然后<strong>将消费者注册到注册中心</strong>。然后通过<strong><code>RegistryDirectory</code></strong>的<strong><code>buildRouterChain</code>构造路由链</strong>，然后订阅服务<strong>当前应用</strong>对应的<strong>服务提供者目录</strong>、<strong>动态配置目录</strong>、<strong>路由器目录</strong>。然后将生成的<strong><code>RegistryDirectory</code></strong>作为参数调用<strong><code>Cluster</code></strong>的<strong><code>MockClusterWrapper</code></strong>子类的<strong><code>join</code></strong>方法将具体的Invoker包装成<strong><code>MockClusterInvoker</code></strong>。若消费者引<strong>入了多个<code>group</code></strong>中的服务则生成<strong><code>MergeableClusterInvoker</code></strong>否则生成<strong><code>FailoverClusterInvoker</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolListenerWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;  <span class="comment">// dubbo://</span></span><br><span class="line">            <span class="keyword">return</span> protocol.refer(type, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListenerInvokerWrapper&lt;T&gt;(protocol.refer(type, url), Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(InvokerListener<span class="class">.<span class="keyword">class</span>).<span class="title">getActivateExtension</span>(<span class="title">url</span>, <span class="title">INVOKER_LISTENER_KEY</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;  <span class="comment">// dubbo://</span></span><br><span class="line">            <span class="keyword">return</span> protocol.refer(type, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buildInvokerChain(protocol.refer(type, url), REFERENCE_FILTER_KEY, CommonConstants.CONSUMER);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// 从registry://的url中获取对应的注册中心，如zookeeper，默认为dubbo，dubbo提供了自带的注册中心实现，url由registry://改变为---&gt;zookeeper://</span></span><br><span class="line">        url = URLBuilder.from(url).setProtocol(url.getParameter(REGISTRY_KEY, DEFAULT_REGISTRY)).removeParameter(REGISTRY_KEY).build();</span><br><span class="line">        Registry registry = registryFactory.getRegistry(url); <span class="comment">// 拿到注册中心实现，ZookeeperRegistry</span></span><br><span class="line">        <span class="keyword">if</span> (RegistryService<span class="class">.<span class="keyword">class</span>.<span class="title">equals</span>(<span class="title">type</span>)) </span>&#123; <span class="comment">// 用来解决SimpleRegistry不可用的问题</span></span><br><span class="line">            <span class="keyword">return</span> proxyFactory.getInvoker((T) registry, type, url);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// qs表示queryString, 表示url中的参数，表示消费者引入服务时所配置的参数</span></span><br><span class="line">        Map&lt;String, String&gt; qs = StringUtils.parseQueryString(url.getParameterAndDecoded(REFER_KEY));</span><br><span class="line">        <span class="comment">// group="a,b" or group="*"</span></span><br><span class="line">        <span class="comment">// https://dubbo.apache.org/zh/docs/v2.7/user/examples/group-merger/</span></span><br><span class="line">        String group = qs.get(GROUP_KEY);</span><br><span class="line">        <span class="keyword">if</span> (group != <span class="keyword">null</span> &amp;&amp; group.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((COMMA_SPLIT_PATTERN.split(group)).length &gt; <span class="number">1</span> || <span class="string">"*"</span>.equals(group)) &#123;</span><br><span class="line">                <span class="keyword">return</span> doRefer(getMergeableCluster(), registry, type, url); <span class="comment">// group有多个值，这里的cluster为MergeableCluster</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> doRefer(cluster, registry, type, url); <span class="comment">// 这里的cluster是cluster的Adaptive对象,扩展点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">doRefer</span><span class="params">(Cluster cluster, Registry registry, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// RegistryDirectory表示动态服务目录，会和注册中心的数据保持同步，type表示一个服务对应一个RegistryDirectory，url表示注册中心地址</span></span><br><span class="line">        RegistryDirectory&lt;T&gt; directory = <span class="keyword">new</span> RegistryDirectory&lt;T&gt;(type, url); <span class="comment">// 在消费端，最核心的就是RegistryDirectory</span></span><br><span class="line">        directory.setRegistry(registry);</span><br><span class="line">        directory.setProtocol(protocol);</span><br><span class="line">        <span class="comment">// all attributes of REFER_KEY 引入服务所配置的参数</span></span><br><span class="line">        Map&lt;String, String&gt; parameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;(directory.getUrl().getParameters());</span><br><span class="line">        <span class="comment">// 消费者url</span></span><br><span class="line">        URL subscribeUrl = <span class="keyword">new</span> URL(CONSUMER_PROTOCOL, parameters.remove(REGISTER_IP_KEY), <span class="number">0</span>, type.getName(), parameters);</span><br><span class="line">        <span class="keyword">if</span> (!ANY_VALUE.equals(url.getServiceInterface()) &amp;&amp; url.getParameter(REGISTER_KEY, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            directory.setRegisteredConsumerUrl(getRegisteredConsumerUrl(subscribeUrl, url));</span><br><span class="line">            registry.register(directory.getRegisteredConsumerUrl()); <span class="comment">// 注册消费者，注册简化后的消费url</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 构造路由链,路由链会在引入服务时按路由条件进行过滤，路由链是动态服务目录中的一个属性，通过路由链可以过滤某些服务提供者</span></span><br><span class="line">        directory.buildRouterChain(subscribeUrl);</span><br><span class="line">        <span class="comment">// 服务目录需要订阅的几个路径</span></span><br><span class="line">        <span class="comment">// 当前应用所对应的动态配置目录：/dubbo/config/dubbo/dubbo-demo-consumer-application.configurators</span></span><br><span class="line">        <span class="comment">// 当前所引入的服务的动态配置目录：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService:1.1.1:g1.configurators</span></span><br><span class="line">        <span class="comment">// 当前所引入的服务的提供者目录：/dubbo/org.apache.dubbo.demo.DemoService/providers</span></span><br><span class="line">        <span class="comment">// 当前所引入的服务的老版本动态配置目录：/dubbo/org.apache.dubbo.demo.DemoService/configurators</span></span><br><span class="line">        <span class="comment">// 当前所引入的服务的老版本路由器目录：/dubbo/org.apache.dubbo.demo.DemoService/routers</span></span><br><span class="line">        directory.subscribe(subscribeUrl.addParameter(CATEGORY_KEY, PROVIDERS_CATEGORY + <span class="string">","</span> + CONFIGURATORS_CATEGORY + <span class="string">","</span> + ROUTERS_CATEGORY));</span><br><span class="line">        Invoker invoker = cluster.join(directory);  <span class="comment">// 利用传进来的cluster，join得到invoker, MockClusterWrapper</span></span><br><span class="line">        ProviderConsumerRegTable.registerConsumer(invoker, url, subscribeUrl, directory);</span><br><span class="line">        <span class="keyword">return</span> invoker;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面调用<strong><code>RegistryFactory</code></strong>的<strong><code>getRegistry</code></strong>方法实际调到<strong><code>AbstractRegistryFactory</code></strong>中，最终通过<strong><code>ZookeeperRegistryFactory</code></strong>创建一个<strong><code>ZookeeperRegistry</code></strong>实例，在<strong><code>doRefer</code></strong>方法中实际注册消费端到注册中心时最终调用<strong><code>ZookeeperRegistry</code></strong>的<strong><code>doRegister</code></strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRegistryFactory</span> <span class="keyword">implements</span> <span class="title">RegistryFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Registry <span class="title">getRegistry</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        url = URLBuilder.from(url).setPath(RegistryService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()).<span class="title">addParameter</span>(<span class="title">INTERFACE_KEY</span>, <span class="title">RegistryService</span>.<span class="title">class</span>.<span class="title">getName</span>()).<span class="title">removeParameters</span>(<span class="title">EXPORT_KEY</span>, <span class="title">REFER_KEY</span>).<span class="title">build</span>()</span>;</span><br><span class="line">        String key = url.toServiceStringWithoutResolving();</span><br><span class="line">        LOCK.lock(); <span class="comment">// Lock the registry access process to ensure a single instance of the registry</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Registry registry = REGISTRIES.get(key);</span><br><span class="line">            <span class="keyword">if</span> (registry != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> registry;</span><br><span class="line">            &#125;</span><br><span class="line">            registry = createRegistry(url); <span class="comment">//create registry by spi/ioc</span></span><br><span class="line">            <span class="keyword">if</span> (registry == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Can not create registry "</span> + url);</span><br><span class="line">            &#125;</span><br><span class="line">            REGISTRIES.put(key, registry);</span><br><span class="line">            <span class="keyword">return</span> registry;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            LOCK.unlock(); <span class="comment">// Release the lock</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperRegistryFactory</span> <span class="keyword">extends</span> <span class="title">AbstractRegistryFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Registry <span class="title">createRegistry</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperRegistry(url, zookeeperTransporter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FailbackRegistry</span> <span class="keyword">extends</span> <span class="title">AbstractRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.register(url);</span><br><span class="line">        removeFailedRegistered(url);</span><br><span class="line">        removeFailedUnregistered(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// Sending a registration request to the server side</span></span><br><span class="line">            doRegister(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable t = e;</span><br><span class="line">            <span class="comment">// If the startup detection is opened, the Exception is thrown directly.</span></span><br><span class="line">            <span class="keyword">boolean</span> check = getUrl().getParameter(Constants.CHECK_KEY, <span class="keyword">true</span>)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class="keyword">true</span>)</span><br><span class="line">                &amp;&amp; !CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">            <span class="keyword">boolean</span> skipFailback = t <span class="keyword">instanceof</span> SkipFailbackWrapperException;</span><br><span class="line">            <span class="keyword">if</span> (check || skipFailback) &#123;</span><br><span class="line">                <span class="keyword">if</span> (skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to register "</span> + url + <span class="string">" to registry "</span> + getUrl().getAddress() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Record a failed registration request to a failed list, retry regularly</span></span><br><span class="line">            addFailedRegistered(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperRegistry</span> <span class="keyword">extends</span> <span class="title">FailbackRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, <span class="keyword">true</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to register "</span> + url + <span class="string">" to zookeeper "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="路由链构造"><a href="#路由链构造" class="headerlink" title="路由链构造"></a>路由链构造</h4><p>在获得路由链时就要根据URL参数去匹配得到符合当前的服务的<strong><code>Router</code></strong>，最终可以拿到<strong><code>MockRouterFactory</code></strong>、<strong><code>TagRouterFactory</code></strong>、<strong><code>AppRouterFactory</code></strong>、<strong><code>ServiceRouterFactory</code></strong>四个路由工厂。遍历每个<strong><code>RouterFactory</code></strong>调用其<strong><code>getRouter</code></strong>方法得到<strong><code>Router</code></strong>并存到<strong><code>routers</code></strong>中进行<strong>排序</strong>处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buildRouterChain</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setRouterChain(RouterChain.buildChain(url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterChain</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">RouterChain&lt;T&gt; <span class="title">buildChain</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RouterChain&lt;&gt;(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">RouterChain</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到RouterFactory接口有哪些扩展实现类，比如默认情况下就有四个：</span></span><br><span class="line">        <span class="comment">// 0 = &#123;MockRouterFactory@2880&#125;</span></span><br><span class="line">        <span class="comment">// 1 = &#123;TagRouterFactory@2881&#125;      // 标签路由</span></span><br><span class="line">        <span class="comment">// 2 = &#123;AppRouterFactory@2882&#125;      // 应用条件路由</span></span><br><span class="line">        <span class="comment">// 3 = &#123;ServiceRouterFactory@2883&#125;  // 服务条件路由</span></span><br><span class="line">        List&lt;RouterFactory&gt; extensionFactories = ExtensionLoader.getExtensionLoader(RouterFactory.class).getActivateExtension(url, (String[]) null);</span><br><span class="line">        <span class="comment">// 然后利用RouterFactory根据url生成各个类型的Router，这里生产的routers已经是真实可用的了，但是有个比较特殊的：</span></span><br><span class="line">        <span class="comment">// 对于应用条件路由和服务条件路由对应的Router对象，对象内部已经有真实可用的数据了，数据已经从配置中心得到了</span></span><br><span class="line">        <span class="comment">// 但是对于标签路由则没有，它暂时还相当于一个没有内容的对象，还没有从配置中心获取标签路由的数据</span></span><br><span class="line">        List&lt;Router&gt; routers = extensionFactories.stream().map(factory -&gt; factory.getRouter(url)).collect(Collectors.toList());</span><br><span class="line">        initWithRouters(routers); <span class="comment">// 把routers按priority进行排序</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initWithRouters</span><span class="params">(List&lt;Router&gt; builtinRouters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.builtinRouters = builtinRouters;</span><br><span class="line">        <span class="keyword">this</span>.routers = <span class="keyword">new</span> ArrayList&lt;&gt;(builtinRouters);</span><br><span class="line">        <span class="keyword">this</span>.sort();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>AppRouter</code></strong>和<strong><code>ServiceRouter</code></strong>是非常类似，他们的父类都是<strong><code>ListenableRouter</code></strong>，在创建<strong><code>AppRouter</code></strong>和<strong><code>ServiceRouter</code></strong>时会绑定一个监听器，然后主动去获取一下对应节点所配置的路由规则，然后解析得到<strong><code>ConditionRouterRule</code></strong>，再调用<strong><code>generateConditions</code></strong>方法解析出一个或多个<strong><code>ConditionRouter</code></strong>，并存入到<strong><code>conditionRouters</code></strong>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRouterFactory</span> <span class="keyword">implements</span> <span class="title">RouterFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"app"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Router router;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (router != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> router;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (router == <span class="keyword">null</span>) &#123;</span><br><span class="line">                router = createRouter(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> router;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Router <span class="title">createRouter</span><span class="params">(URL url)</span> </span>&#123;<span class="comment">// 内部会进行初始化</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppRouter(DynamicConfiguration.getDynamicConfiguration(), url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DynamicConfiguration</span> <span class="keyword">extends</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> DynamicConfiguration <span class="title">getDynamicConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Optional&lt;Configuration&gt; optional = Environment.getInstance().getDynamicConfiguration();</span><br><span class="line">        <span class="keyword">return</span> (DynamicConfiguration) optional.orElseGet(() -&gt; getExtensionLoader(DynamicConfigurationFactory<span class="class">.<span class="keyword">class</span>).<span class="title">getDefaultExtension</span>().<span class="title">getDynamicConfiguration</span>(<span class="title">null</span>))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperDynamicConfigurationFactory</span> <span class="keyword">extends</span> <span class="title">AbstractDynamicConfigurationFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> DynamicConfiguration <span class="title">createDynamicConfiguration</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ZookeeperDynamicConfiguration(url, zookeeperTransporter);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperDynamicConfiguration</span> <span class="keyword">implements</span> <span class="title">DynamicConfiguration</span> </span>&#123;</span><br><span class="line">    ZookeeperDynamicConfiguration(URL url, ZookeeperTransporter zookeeperTransporter) &#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        rootPath = PATH_SEPARATOR + url.getParameter(CONFIG_NAMESPACE_KEY, DEFAULT_GROUP) + <span class="string">"/config"</span>;</span><br><span class="line">        initializedLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>.cacheListener = <span class="keyword">new</span> CacheListener(rootPath, initializedLatch);</span><br><span class="line">        <span class="keyword">this</span>.executor = Executors.newFixedThreadPool(<span class="number">1</span>, <span class="keyword">new</span> NamedThreadFactory(<span class="keyword">this</span>.getClass().getSimpleName(), <span class="keyword">true</span>));</span><br><span class="line">        zkClient = zookeeperTransporter.connect(url);</span><br><span class="line">        zkClient.addDataListener(rootPath, cacheListener, executor);</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// Wait for connection</span></span><br><span class="line">            <span class="keyword">long</span> timeout = url.getParameter(<span class="string">"init.timeout"</span>, <span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">boolean</span> isCountDown = <span class="keyword">this</span>.initializedLatch.await(timeout, TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (!isCountDown) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to receive INITIALIZED event from zookeeper, pls. check if url "</span> + url + <span class="string">" is correct"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheListener</span> <span class="keyword">implements</span> <span class="title">DataListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dataChanged</span><span class="params">(String path, Object value, EventType eventType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (eventType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (eventType == EventType.INITIALIZED) &#123;</span><br><span class="line">            initializedLatch.countDown();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path == <span class="keyword">null</span> || (value == <span class="keyword">null</span> &amp;&amp; eventType != EventType.NodeDeleted)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path.split(<span class="string">"/"</span>).length &gt;= MIN_PATH_DEPTH) &#123;</span><br><span class="line">            String key = pathToKey(path);</span><br><span class="line">            ConfigChangeType changeType;</span><br><span class="line">            <span class="keyword">switch</span> (eventType) &#123;</span><br><span class="line">                <span class="keyword">case</span> NodeCreated:</span><br><span class="line">                    changeType = ConfigChangeType.ADDED;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDeleted:</span><br><span class="line">                    changeType = ConfigChangeType.DELETED;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> NodeDataChanged:</span><br><span class="line">                    changeType = ConfigChangeType.MODIFIED;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ConfigChangeEvent configChangeEvent = <span class="keyword">new</span> ConfigChangeEvent(key, (String) value, changeType);</span><br><span class="line">            Set&lt;ConfigurationListener&gt; listeners = keyListeners.get(path);</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(listeners)) &#123;</span><br><span class="line">                listeners.forEach(listener -&gt; listener.process(configChangeEvent));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppRouter</span> <span class="keyword">extends</span> <span class="title">ListenableRouter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"APP_ROUTER"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APP_ROUTER_DEFAULT_PRIORITY = <span class="number">150</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppRouter</span><span class="params">(DynamicConfiguration configuration, URL url)</span> </span>&#123;<span class="comment">// 拿到应用名</span></span><br><span class="line">        <span class="keyword">super</span>(configuration, url, url.getParameter(CommonConstants.APPLICATION_KEY));</span><br><span class="line">        <span class="keyword">this</span>.priority = APP_ROUTER_DEFAULT_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceRouterFactory</span> <span class="keyword">extends</span> <span class="title">CacheableRouterFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"service"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Router <span class="title">createRouter</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceRouter(DynamicConfiguration.getDynamicConfiguration(), url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceRouter</span> <span class="keyword">extends</span> <span class="title">ListenableRouter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceRouter</span><span class="params">(DynamicConfiguration configuration, URL url)</span> </span>&#123; <span class="comment">// 得到服务名</span></span><br><span class="line">        <span class="keyword">super</span>(configuration, url, DynamicConfiguration.getRuleKey(url));</span><br><span class="line">        <span class="keyword">this</span>.priority = SERVICE_ROUTER_DEFAULT_PRIORITY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenableRouter</span> <span class="keyword">extends</span> <span class="title">AbstractRouter</span> <span class="keyword">implements</span> <span class="title">ConfigurationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListenableRouter</span><span class="params">(DynamicConfiguration configuration, URL url, String ruleKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(configuration, url);</span><br><span class="line">        <span class="keyword">this</span>.force = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// ruleKey为服务名或应用名,初始化，会绑定一个监听器，负责监听配置中心条件路由的修改，并且会主动从配置中心获取一下当前条件路由的数据并做解析</span></span><br><span class="line">        <span class="keyword">this</span>.init(ruleKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(String ruleKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(ruleKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String routerKey = ruleKey + RULE_SUFFIX; <span class="comment">// 服务名+".condition-router"，或 应用名+".condition-router"</span></span><br><span class="line">        configuration.addListener(routerKey, <span class="keyword">this</span>); <span class="comment">// 绑定一个监听器去监听routerKey对应的路径，当前类ListenableRouter就自带了一个监听器</span></span><br><span class="line">        <span class="comment">// 绑定完监听器后，主动的从配置中心获取一下当前服务或消费者应用的对应的路由配置</span></span><br><span class="line">        String rule = configuration.getRule(routerKey, DynamicConfiguration.DEFAULT_GROUP);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(rule)) &#123;<span class="comment">// 手动调用监听器处理事件的方法process()</span></span><br><span class="line">            <span class="keyword">this</span>.process(<span class="keyword">new</span> ConfigChangeEvent(routerKey, rule));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(ConfigChangeEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event.getChangeType().equals(ConfigChangeType.DELETED)) &#123;</span><br><span class="line">            <span class="comment">// 若是一个删除时间，则清空当前Router中的conditionRouters属性，表示当前Router对象中没有路由规则</span></span><br><span class="line">            routerRule = <span class="keyword">null</span>;</span><br><span class="line">            conditionRouters = Collections.emptyList();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                routerRule = ConditionRuleParser.parse(event.getValue()); <span class="comment">// 解析路由规则</span></span><br><span class="line">                generateConditions(routerRule);  <span class="comment">// 根据路由规则，生成ConditionRouter-条件路由对象，并赋值给当前Router对象的conditionRouters属性</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>TagRouter</code></strong>比较特殊，首先标签路由是用在当<strong>消费者在调用某个服务时</strong>，通过<strong>在请求中设置标签</strong>，然后<strong>根据所设置的标签获得可用的服务提供者地址</strong>，目前<strong><code>TagRouter</code></strong>只支持<strong>应用级别</strong>的配置。</p><p>对服务消费者而言在引用某个服务时，需知道提供该服务的应用名，然后去监听该应用名对应的<strong><code>.tag-router</code>节点</strong>内容，需要先获取到当前所引入服务的服务提供者URL，<strong>从服务提供者URL中得到服务提供者应用名</strong>，拿到应用名后才能去应用名对应的<strong><code>.tag-router</code></strong>节点去<strong>绑定监听器</strong>。</p><p><strong><code>AppRouter</code></strong>监听的是<strong>本消费者应用的路由规则</strong>，<strong><code>ServiceRouter</code></strong>监听的是<strong>所引入服务的路由规则</strong>，<strong><code>TagRouter</code></strong>是在引入服务时获取服务提供者URL之后，才监听<strong><code>.tag-router</code></strong>节点中的内容，并手动获取一次节点中的内容，设置<strong><code>TagRouter</code></strong>对象中<strong><code>tagRouterRule</code></strong>属性表示标签路由规则。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagRouterFactory</span> <span class="keyword">extends</span> <span class="title">CacheableRouterFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"tag"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Router <span class="title">createRouter</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TagRouter(DynamicConfiguration.getDynamicConfiguration(), url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TagRouter</span> <span class="keyword">extends</span> <span class="title">AbstractRouter</span> <span class="keyword">implements</span> <span class="title">ConfigurationListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; route(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokers;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> TagRouterRule tagRouterRuleCopy = tagRouterRule; <span class="comment">// since the rule can be changed by config center, we should copy one to use.</span></span><br><span class="line">        <span class="keyword">if</span> (tagRouterRuleCopy == <span class="keyword">null</span> || !tagRouterRuleCopy.isValid() || !tagRouterRuleCopy.isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> filterUsingStaticTag(invokers, url, invocation);</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; result = invokers;</span><br><span class="line">        <span class="comment">// 获取调用对象invocation中所设置的tag</span></span><br><span class="line">        String tag = StringUtils.isEmpty(invocation.getAttachment(Constants.TAG_KEY)) ? url.getParameter(Constants.TAG_KEY) : invocation.getAttachment(Constants.TAG_KEY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(tag)) &#123; <span class="comment">// 若请求具有特定标签的提供者</span></span><br><span class="line">            List&lt;String&gt; addresses = tagRouterRuleCopy.getTagnameToAddresses().get(tag); <span class="comment">// 获取对应tag所设置的服务提供者address</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(addresses)) &#123; <span class="comment">// 首先按动态标签组过过滤</span></span><br><span class="line">                <span class="comment">// 根据tag所对应的address对所有服务提供者invokers进行过滤</span></span><br><span class="line">                result = filterInvoker(invokers, invoker -&gt; addressMatches(invoker.getUrl(), addresses));</span><br><span class="line">                <span class="comment">// 若过滤之后还有结果，那就用过滤之后的结果，若没有结果，但是此标签路由是要强制使用的，那么则会把空结果返回(没有此tag所对应的服务提供者可用)</span></span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(result) || tagRouterRuleCopy.isForce()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 动态标签组没有关于请求的应用程序的任何项目或它在过滤后为空，动态标签组但force=false，检查静态标签</span></span><br><span class="line">                result = filterInvoker(invokers, invoker -&gt; tag.equals(invoker.getUrl().getParameter(Constants.TAG_KEY)));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 若没有可匹配当前标记请求的标记提供者，force.tag默认为false，这意味着它将调用任何没有标记的提供程序，除非它被明确禁止</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(result) || isForceUseTag(invocation)) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// FAILOVER：返回没有任何标签的所有提供者。</span></span><br><span class="line">                List&lt;Invoker&lt;T&gt;&gt; tmp = filterInvoker(invokers, invoker -&gt; addressNotMatches(invoker.getUrl(), tagRouterRuleCopy.getAddresses()));</span><br><span class="line">                <span class="keyword">return</span> filterInvoker(tmp, invoker -&gt; StringUtils.isEmpty(invoker.getUrl().getParameter(Constants.TAG_KEY)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// List&lt;String&gt; addresses = tagRouterRule.filter(providerApp);</span></span><br><span class="line">            List&lt;String&gt; addresses = tagRouterRuleCopy.getAddresses(); <span class="comment">// 返回动态标签组中的所有地址</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(addresses)) &#123;</span><br><span class="line">                result = filterInvoker(invokers, invoker -&gt; addressNotMatches(invoker.getUrl(), addresses));</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isEmpty(result)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result; <span class="comment">// 所有地址都在动态标签组中，返回空列表</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 如果有一些地址不在任何动态标签组中，则继续使用</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> filterInvoker(result, invoker -&gt; &#123;</span><br><span class="line">                String localTag = invoker.getUrl().getParameter(Constants.TAG_KEY);</span><br><span class="line">                <span class="keyword">return</span> StringUtils.isEmpty(localTag) || !tagRouterRuleCopy.getTagNames().contains(localTag);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; filterUsingStaticTag(List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, Invocation invocation) &#123;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; result = invokers;</span><br><span class="line">        String tag = StringUtils.isEmpty(invocation.getAttachment(Constants.TAG_KEY)) ? url.getParameter(Constants.TAG_KEY) : invocation.getAttachment(Constants.TAG_KEY);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(tag)) &#123; <span class="comment">// Tag request</span></span><br><span class="line">            result = filterInvoker(invokers, invoker -&gt; tag.equals(invoker.getUrl().getParameter(TAG_KEY)));</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(result) &amp;&amp; !isForceUseTag(invocation)) &#123;</span><br><span class="line">                result = filterInvoker(invokers, invoker -&gt; StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = filterInvoker(invokers, invoker -&gt; StringUtils.isEmpty(invoker.getUrl().getParameter(TAG_KEY)));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockRouterFactory</span> <span class="keyword">implements</span> <span class="title">RouterFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String NAME = <span class="string">"mock"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Router <span class="title">getRouter</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MockInvokersSelector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockInvokersSelector</span> <span class="keyword">extends</span> <span class="title">AbstractRouter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; route(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers, URL url, <span class="keyword">final</span> Invocation invocation) <span class="keyword">throws</span> RpcException &#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokers;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (invocation.getAttachments() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> getNormalInvokers(invokers);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String value = invocation.getAttachments().get(INVOCATION_NEED_MOCK);</span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> getNormalInvokers(invokers);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Boolean.TRUE.toString().equalsIgnoreCase(value)) &#123;</span><br><span class="line">                <span class="keyword">return</span> getMockedInvokers(invokers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> invokers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; getMockedInvokers(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasMockProviders(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Invoker&lt;T&gt;&gt; sInvokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (invoker.getUrl().getProtocol().equals(MOCK_PROTOCOL)) &#123;</span><br><span class="line">                sInvokers.add(invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sInvokers;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; List&lt;Invoker&lt;T&gt;&gt; getNormalInvokers(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasMockProviders(invokers)) &#123;</span><br><span class="line">            <span class="keyword">return</span> invokers;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; sInvokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;T&gt;&gt;(invokers.size());</span><br><span class="line">            <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!invoker.getUrl().getProtocol().equals(MOCK_PROTOCOL)) &#123;</span><br><span class="line">                    sInvokers.add(invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sInvokers;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">hasMockProviders</span><span class="params">(<span class="keyword">final</span> List&lt;Invoker&lt;T&gt;&gt; invokers)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> hasMockProvider = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (Invoker&lt;T&gt; invoker : invokers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (invoker.getUrl().getProtocol().equals(MOCK_PROTOCOL)) &#123;</span><br><span class="line">                hasMockProvider = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasMockProvider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务目录"><a href="#服务目录" class="headerlink" title="服务目录"></a>服务目录</h4><p><img src="../../../../../images/Cloud/Dubbo/Dubbo监听架构图.png" alt></p><p><strong>消费端每个服务对应一个服务目录<code>RegistryDirectory</code></strong>，一个服务目录中包含<strong><code>serviceType</code>服务接口</strong>、<strong><code>serviceKey</code>引入的服务key</strong>即<strong><code>serviceclass+version+group</code></strong>、<strong><code>queryMap</code>引入服务参数配置</strong>、<strong><code>configurators</code>动态配置</strong>、<strong><code>routerChain</code>路由链</strong>、invokers服务目录<strong>当前缓存的服务提供者<code>Invoker</code></strong>、<strong><code>ConsumerConfigurationListener</code>监听本应用的动态配置</strong>、<strong><code>ReferenceConfigurationListener</code>监听所引入的服务的动态配置</strong>。</p><p>当<strong><code>ConsumerConfigurationListener</code></strong>接收到消费者应用动态配置数据变化后，调用当前消费者应用中所有<strong><code>RegistryDirectory</code></strong>的<strong><code>refreshInvoker</code></strong>方法，刷新消费者应用中引入的每个服务对应的Invoker。当<strong><code>ReferenceConfigurationListener</code></strong>接收到某个服务动态配置数据变化后，调用该服务对应的<strong><code>RegistryDirectory</code></strong>的<strong><code>refreshInvoker</code></strong>方法，刷新该服务对应的Invoker。</p><p>在<strong><code>refreshInvoker</code></strong>方法中会从注册中心获取到的<strong><code>providers</code></strong>节点下的<strong>服务<code>URL</code></strong>，然后调用<strong><code>toInvokers</code></strong>方法得到<strong><code>Invoker</code></strong>，先按Protocol进行过滤且调用<strong><code>DubboProtocol.refer</code></strong>方法得到Invoker，<strong>将得到的invokers设置到<code>RouterChain</code>上</strong>，且调用<strong><code>RouterChain</code></strong>上所有的<strong><code>routers</code>的<code>notify</code>方法</strong>，实际只有<strong><code>TagRouter</code></strong>的notify方法有用，再把属于同一个group中的invoker合并起来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConsumerConfigurationListener CONSUMER_CONFIGURATION_LISTENER = <span class="keyword">new</span> ConsumerConfigurationListener();</span><br><span class="line">    <span class="keyword">private</span> ReferenceConfigurationListener serviceConfigurationListener;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        setConsumerUrl(url);</span><br><span class="line">        CONSUMER_CONFIGURATION_LISTENER.addNotifyListener(<span class="keyword">this</span>); <span class="comment">// 监听consumer应用</span></span><br><span class="line">        serviceConfigurationListener = <span class="keyword">new</span> ReferenceConfigurationListener(<span class="keyword">this</span>, url); <span class="comment">// 监听所引入的服务的动态配置</span></span><br><span class="line">        registry.subscribe(url, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshInvoker</span><span class="params">(List&lt;URL&gt; invokerUrls)</span> </span>&#123;   <span class="comment">//http://  dubbo://</span></span><br><span class="line">        Assert.notNull(invokerUrls, <span class="string">"invokerUrls should not be null"</span>);</span><br><span class="line">        <span class="keyword">if</span> (invokerUrls.size() == <span class="number">1</span> &amp;&amp; invokerUrls.get(<span class="number">0</span>) != <span class="keyword">null</span> &amp;&amp; EMPTY_PROTOCOL.equals(invokerUrls.get(<span class="number">0</span>).getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">this</span>.forbidden = <span class="keyword">true</span>; <span class="comment">// Forbid to access</span></span><br><span class="line">            <span class="keyword">this</span>.invokers = Collections.emptyList();</span><br><span class="line">            routerChain.setInvokers(<span class="keyword">this</span>.invokers);</span><br><span class="line">            destroyAllInvokers(); <span class="comment">// Close all invokers</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.forbidden = <span class="keyword">false</span>; <span class="comment">// Allow to access</span></span><br><span class="line">            Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap = <span class="keyword">this</span>.urlInvokerMap; <span class="comment">// local reference</span></span><br><span class="line">            <span class="keyword">if</span> (invokerUrls == Collections.&lt;URL&gt;emptyList()) &#123;</span><br><span class="line">                invokerUrls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (invokerUrls.isEmpty() &amp;&amp; <span class="keyword">this</span>.cachedInvokerUrls != <span class="keyword">null</span>) &#123;</span><br><span class="line">                invokerUrls.addAll(<span class="keyword">this</span>.cachedInvokerUrls);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.cachedInvokerUrls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">                <span class="keyword">this</span>.cachedInvokerUrls.addAll(invokerUrls);<span class="comment">//Cached invoker urls, convenient for comparison</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (invokerUrls.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这里会先按Protocol进行过滤，并且调用DubboProtocol.refer方法得到DubboInvoker</span></span><br><span class="line">            Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = toInvokers(invokerUrls);<span class="comment">// Translate url list to Invoker map</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmptyMap(newUrlInvokerMap)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Invoker&lt;T&gt;&gt; newInvokers = Collections.unmodifiableList(<span class="keyword">new</span> ArrayList&lt;&gt;(newUrlInvokerMap.values()));</span><br><span class="line">            routerChain.setInvokers(newInvokers); <span class="comment">// 得到了所引入的服务Invoker之后，把它们设置到路由链中去，在调用时使用，并且会调用TagRouter的notify方法</span></span><br><span class="line">            <span class="keyword">this</span>.invokers = multiGroup ? toMergeInvokerList(newInvokers) : newInvokers;</span><br><span class="line">            <span class="keyword">this</span>.urlInvokerMap = newUrlInvokerMap;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                destroyUnusedInvokers(oldUrlInvokerMap, newUrlInvokerMap); <span class="comment">// Close the unused Invoker</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Invoker&lt;T&gt;&gt; toInvokers(List&lt;URL&gt; urls) &#123;</span><br><span class="line">        Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (urls == <span class="keyword">null</span> || urls.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; keys = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String queryProtocols = <span class="keyword">this</span>.queryMap.get(PROTOCOL_KEY);</span><br><span class="line">        <span class="keyword">for</span> (URL providerUrl : urls) &#123; <span class="comment">// 遍历当前服务所有的服务提供者URL</span></span><br><span class="line">            <span class="keyword">if</span> (queryProtocols != <span class="keyword">null</span> &amp;&amp; queryProtocols.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">boolean</span> accept = <span class="keyword">false</span>;</span><br><span class="line">                String[] acceptProtocols = queryProtocols.split(<span class="string">","</span>);</span><br><span class="line">                <span class="keyword">for</span> (String acceptProtocol : acceptProtocols) &#123; <span class="comment">// 当前消费者如果手动配置了Protocol，那么则进行匹配</span></span><br><span class="line">                    <span class="keyword">if</span> (providerUrl.getProtocol().equals(acceptProtocol)) &#123;</span><br><span class="line">                        accept = <span class="keyword">true</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!accept) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (EMPTY_PROTOCOL.equals(providerUrl.getProtocol())) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 当前Protocol是否在应用中存在对应的扩展点</span></span><br><span class="line">            <span class="keyword">if</span> (!ExtensionLoader.getExtensionLoader(Protocol<span class="class">.<span class="keyword">class</span>).<span class="title">hasExtension</span>(<span class="title">providerUrl</span>.<span class="title">getProtocol</span>())) </span>&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            URL url = mergeUrl(providerUrl);</span><br><span class="line">            String key = url.toFullString(); <span class="comment">// The parameter urls are sorted</span></span><br><span class="line">            <span class="keyword">if</span> (keys.contains(key)) &#123; <span class="comment">// Repeated url</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            keys.add(key);</span><br><span class="line">            Map&lt;String, Invoker&lt;T&gt;&gt; localUrlInvokerMap = <span class="keyword">this</span>.urlInvokerMap; <span class="comment">// local reference</span></span><br><span class="line">            Invoker&lt;T&gt; invoker = localUrlInvokerMap == <span class="keyword">null</span> ? <span class="keyword">null</span> : localUrlInvokerMap.get(key);</span><br><span class="line">            <span class="keyword">if</span> (invoker == <span class="keyword">null</span>) &#123; <span class="comment">// Not in the cache, refer again</span></span><br><span class="line">                <span class="keyword">try</span> &#123; <span class="comment">// 如果当前服务提供者URL没有生产过Invoker</span></span><br><span class="line">                    <span class="keyword">boolean</span> enabled = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (url.hasParameter(DISABLED_KEY)) &#123;</span><br><span class="line">                        enabled = !url.getParameter(DISABLED_KEY, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        enabled = url.getParameter(ENABLED_KEY, <span class="keyword">true</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (enabled) &#123;<span class="comment">// 调用Protocol的refer方法得到一个Invoker   DubboProtocol.refer()</span></span><br><span class="line">                        invoker = <span class="keyword">new</span> InvokerDelegate&lt;&gt;(protocol.refer(serviceType, url), url, providerUrl);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (invoker != <span class="keyword">null</span>) &#123; <span class="comment">// Put new invoker in cache</span></span><br><span class="line">                    newUrlInvokerMap.put(key, invoker);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newUrlInvokerMap.put(key, invoker);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        keys.clear();</span><br><span class="line">        <span class="keyword">return</span> newUrlInvokerMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyUnusedInvokers</span><span class="params">(Map&lt;String, Invoker&lt;T&gt;&gt; oldUrlInvokerMap, Map&lt;String, Invoker&lt;T&gt;&gt; newUrlInvokerMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (newUrlInvokerMap == <span class="keyword">null</span> || newUrlInvokerMap.size() == <span class="number">0</span>) &#123;</span><br><span class="line">            destroyAllInvokers();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; deleted = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (oldUrlInvokerMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Collection&lt;Invoker&lt;T&gt;&gt; newInvokers = newUrlInvokerMap.values();</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, Invoker&lt;T&gt;&gt; entry : oldUrlInvokerMap.entrySet()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!newInvokers.contains(entry.getValue())) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (deleted == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        deleted = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    &#125;</span><br><span class="line">                    deleted.add(entry.getKey());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deleted != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String url : deleted) &#123;</span><br><span class="line">                <span class="keyword">if</span> (url != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    Invoker&lt;T&gt; invoker = oldUrlInvokerMap.remove(url);</span><br><span class="line">                    <span class="keyword">if</span> (invoker != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            invoker.destroy();</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerConfigurationListener</span> <span class="keyword">extends</span> <span class="title">AbstractConfiguratorListener</span> </span>&#123;</span><br><span class="line">    List&lt;RegistryDirectory&gt; listeners = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    ConsumerConfigurationListener() &#123;</span><br><span class="line">        <span class="keyword">this</span>.initWith(ApplicationModel.getApplication() + CONFIGURATORS_SUFFIX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addNotifyListener</span><span class="params">(RegistryDirectory listener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.listeners.add(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">notifyOverrides</span><span class="params">()</span> </span>&#123;<span class="comment">// 调用RegistryDirectory的refreshInvoker方法</span></span><br><span class="line">        listeners.forEach(listener -&gt; listener.refreshInvoker(Collections.emptyList()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceConfigurationListener</span> <span class="keyword">extends</span> <span class="title">AbstractConfiguratorListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RegistryDirectory directory;</span><br><span class="line">    <span class="keyword">private</span> URL url;</span><br><span class="line">    ReferenceConfigurationListener(RegistryDirectory directory, URL url) &#123;</span><br><span class="line">        <span class="keyword">this</span>.directory = directory;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.initWith(DynamicConfiguration.getRuleKey(url) + CONFIGURATORS_SUFFIX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">notifyOverrides</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        directory.refreshInvoker(Collections.emptyList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractConfiguratorListener</span> <span class="keyword">implements</span> <span class="title">ConfigurationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">initWith</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        DynamicConfiguration dynamicConfiguration = DynamicConfiguration.getDynamicConfiguration();</span><br><span class="line">        dynamicConfiguration.addListener(key, <span class="keyword">this</span>); <span class="comment">// 添加Listener,进行了订阅</span></span><br><span class="line">        <span class="comment">// 从配置中心ConfigCenter获取属于当前应用的动态配置数据，从zk中拿到原始数据(主动从配置中心获取数据)</span></span><br><span class="line">        String rawConfig = dynamicConfiguration.getRule(key, DynamicConfiguration.DEFAULT_GROUP);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(rawConfig)) &#123; <span class="comment">// 如果存在应用配置信息则根据配置信息生成Configurator</span></span><br><span class="line">            genConfiguratorsFromRawRule(rawConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">genConfiguratorsFromRawRule</span><span class="params">(String rawConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> parseSuccess = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123; <span class="comment">// 先把应用或服务配置转成url，再根据url生成对应的Configurator</span></span><br><span class="line">            configurators = Configurator.toConfigurators(ConfigParser.parseConfigurators(rawConfig)).orElse(configurators);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            parseSuccess = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parseSuccess;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当<strong><code>RegistryDirectory</code></strong>接收到<strong><code>providers</code>节点数据变化</strong>后，会调用<strong><code>refreshOverrideAndInvoker</code></strong>方法，该方法用来针对每个服务提供者来生成<strong><code>Invoker</code></strong>。<strong><code>refreshOverrideAndInvoker</code></strong>方法中首先调用<strong><code>overrideDirectoryUrl</code></strong>方法利用<strong><code>Configurators</code></strong>重写目录地址，在注册中心URL基础上把当前引入服务的参数作为URL的Parameters，所以该地址既包括了注册中心信息，也包括了当前引入服务的信息，重写往目录地址后，调用<strong><code>refreshInvoker</code></strong>方法去刷新Invoker。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractDirectory</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;URL&gt;&gt; categoryUrls = urls.stream().filter(Objects::nonNull).filter(<span class="keyword">this</span>::isValidCategory).filter(<span class="keyword">this</span>::isNotCompatibleFor26x)</span><br><span class="line">            .collect(Collectors.groupingBy(url -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (UrlUtils.isConfigurator(url)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> CONFIGURATORS_CATEGORY;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (UrlUtils.isRoute(url)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> ROUTERS_CATEGORY;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (UrlUtils.isProvider(url)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> PROVIDERS_CATEGORY;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;));</span><br><span class="line">        <span class="comment">// 获取动态配置URL，生成configurators</span></span><br><span class="line">        List&lt;URL&gt; configuratorURLs = categoryUrls.getOrDefault(CONFIGURATORS_CATEGORY, Collections.emptyList());</span><br><span class="line">        <span class="keyword">this</span>.configurators = Configurator.toConfigurators(configuratorURLs).orElse(<span class="keyword">this</span>.configurators);</span><br><span class="line">        <span class="comment">// 获取老版本路由URL，生成Router，并添加到路由链中</span></span><br><span class="line">        List&lt;URL&gt; routerURLs = categoryUrls.getOrDefault(ROUTERS_CATEGORY, Collections.emptyList());</span><br><span class="line">        toRouters(routerURLs).ifPresent(<span class="keyword">this</span>::addRouters);</span><br><span class="line">        <span class="comment">// 获取服务提供者URL</span></span><br><span class="line">        List&lt;URL&gt; providerURLs = categoryUrls.getOrDefault(PROVIDERS_CATEGORY, Collections.emptyList());</span><br><span class="line">        refreshOverrideAndInvoker(providerURLs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">refreshOverrideAndInvoker</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123; <span class="comment">// mock zookeeper://xxx?mock=return null</span></span><br><span class="line">        overrideDirectoryUrl();</span><br><span class="line">        refreshInvoker(urls);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">overrideDirectoryUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// merge override parameters</span></span><br><span class="line">        <span class="keyword">this</span>.overrideDirectoryUrl = directoryUrl;</span><br><span class="line">        List&lt;Configurator&gt; localConfigurators = <span class="keyword">this</span>.configurators; <span class="comment">// local reference</span></span><br><span class="line">        doOverrideUrl(localConfigurators);</span><br><span class="line">        List&lt;Configurator&gt; localAppDynamicConfigurators = CONSUMER_CONFIGURATION_LISTENER.getConfigurators(); <span class="comment">// local reference</span></span><br><span class="line">        doOverrideUrl(localAppDynamicConfigurators);</span><br><span class="line">        <span class="keyword">if</span> (serviceConfigurationListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;Configurator&gt; localDynamicConfigurators = serviceConfigurationListener.getConfigurators(); <span class="comment">// local reference</span></span><br><span class="line">            doOverrideUrl(localDynamicConfigurators);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doOverrideUrl</span><span class="params">(List&lt;Configurator&gt; configurators)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(configurators)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Configurator configurator : configurators) &#123;</span><br><span class="line">                <span class="keyword">this</span>.overrideDirectoryUrl = configurator.configure(overrideDirectoryUrl);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务引入"><a href="#服务引入" class="headerlink" title="服务引入"></a>服务引入</h4><p>调用<strong><code>Protocol</code></strong>的<strong><code>refer</code></strong>方法首先超类<strong><code>AbstractProtocol</code></strong>的<strong><code>refer</code></strong>方法，然后调用<strong><code>DubboProtocol</code></strong>的<strong><code>protocolBindingRefer</code></strong>方法，该方法中主要是通过<strong><code>getClients</code></strong>获取<strong><code>client</code></strong>列表，<strong>为了提高效率</strong>一个<strong><code>DubboInvoker</code></strong>会有<strong>多个<code>client</code></strong>，<strong>每个client和server之间都会有一个<code>socket</code>，多个client连的是同一个server</strong>，在<strong><code>DubboInvoker</code>发送请求时</strong>会<strong>轮询clients去发送数据</strong>。</p><p>在获取Client时首先判断配置的连接数<strong><code>connections</code></strong>，若未配置则使用共享socket连配置<strong><code>shareConnectionsStr</code></strong>默认为1，<strong>非共享连接</strong>若消费者应用引用了两个服务A和B，这两个服务都部署在了应用C上，若<strong><code>connections</code></strong>为<strong><code>2</code></strong>则消费者应用会与应用C建立<strong><code>4</code></strong>个Socket连接，若为<strong>共享连接</strong>且<strong><code>shareConnectionsStr</code></strong>为<strong><code>2</code></strong>，那么消费者应用会与应用C建立<strong><code>2</code></strong>个Socket连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">refer</span><span class="params">(Class&lt;T&gt; type, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// 异步转同步Invoker, type是接口，url是服务地址，DubboInvoker是异步的，而AsyncToSyncInvoker会封装为同步的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AsyncToSyncInvoker&lt;&gt;(protocolBindingRefer(type, url));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">protocolBindingRefer</span><span class="params">(Class&lt;T&gt; serviceType, URL url)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        optimizeSerialization(url);</span><br><span class="line">        <span class="comment">// clients很重要，为了提高效率一个DubboInvoker会有多个clients，因为每个client和server之间都会有一个socket, 多个client连的是同一个server</span></span><br><span class="line">        <span class="comment">// 在DubboInvoker发送请求时会轮询clients去发送数据</span></span><br><span class="line">        DubboInvoker&lt;T&gt; invoker = <span class="keyword">new</span> DubboInvoker&lt;T&gt;(serviceType, url, getClients(url), invokers);</span><br><span class="line">        invokers.add(invoker);</span><br><span class="line">        <span class="keyword">return</span> invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ExchangeClient[] getClients(URL url) &#123;</span><br><span class="line">        <span class="keyword">boolean</span> useShareConnect = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">// connections表示对当前服务提供者建立connections个socket连接</span></span><br><span class="line">        <span class="comment">// 消费者应用引用了两个服务A和B，这两个服务都部署在了应用C上，如果connections为2，那么消费者应用会与应用C建立4个Socket连接</span></span><br><span class="line">        <span class="keyword">int</span> connections = url.getParameter(CONNECTIONS_KEY, <span class="number">0</span>);</span><br><span class="line">        List&lt;ReferenceCountExchangeClient&gt; shareClients = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 如果没有配置connections，那么则取shareConnectionsStr（默认为1），表示共享socket连接个数</span></span><br><span class="line">        <span class="comment">// 消费者应用引用了两个服务A和B，这两个服务都部署在了应用C上，如果shareConnectionsStr为2，那么消费者应用会与应用C建立2个Socket连接</span></span><br><span class="line">        <span class="keyword">if</span> (connections == <span class="number">0</span>) &#123;</span><br><span class="line">            useShareConnect = <span class="keyword">true</span>;</span><br><span class="line">            String shareConnectionsStr = url.getParameter(SHARE_CONNECTIONS_KEY, (String) <span class="keyword">null</span>);</span><br><span class="line">            connections = Integer.parseInt(StringUtils.isBlank(shareConnectionsStr) ? ConfigUtils.getProperty(SHARE_CONNECTIONS_KEY, DEFAULT_SHARE_CONNECTIONS) : shareConnectionsStr);</span><br><span class="line">            shareClients = getSharedClient(url, connections);</span><br><span class="line">        &#125;</span><br><span class="line">        ExchangeClient[] clients = <span class="keyword">new</span> ExchangeClient[connections];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clients.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (useShareConnect) &#123; <span class="comment">// 如果使用共享的，则利用shareClients</span></span><br><span class="line">                clients[i] = shareClients.get(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 不然就初始化，在初始化client时会去连接服务端</span></span><br><span class="line">                clients[i] = initClient(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clients;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;ReferenceCountExchangeClient&gt; <span class="title">getSharedClient</span><span class="params">(URL url, <span class="keyword">int</span> connectNum)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 这个方法返回的是可以共享的client，要么已经生成过了，要么需要重新生成</span></span><br><span class="line">        String key = url.getAddress(); <span class="comment">// 对于已经生成过的client,都会存在referenceClientMap中，key为所调用的服务IP+PORT</span></span><br><span class="line">        List&lt;ReferenceCountExchangeClient&gt; clients = referenceClientMap.get(key);</span><br><span class="line">        <span class="comment">// 根据当前引入的服务对应的ip+port，看看是否已经存在clients了，</span></span><br><span class="line">        <span class="keyword">if</span> (checkClientCanUse(clients)) &#123;<span class="comment">// 如果每个client都可用，那就对每个client的计数+1，表示这些client被引用了多少次</span></span><br><span class="line">            batchClientRefIncr(clients);</span><br><span class="line">            <span class="keyword">return</span> clients;</span><br><span class="line">        &#125;</span><br><span class="line">        locks.putIfAbsent(key, <span class="keyword">new</span> Object());</span><br><span class="line">        <span class="keyword">synchronized</span> (locks.get(key)) &#123;</span><br><span class="line">            clients = referenceClientMap.get(key);</span><br><span class="line">            <span class="keyword">if</span> (checkClientCanUse(clients)) &#123; <span class="comment">// dubbo check</span></span><br><span class="line">                batchClientRefIncr(clients);</span><br><span class="line">                <span class="keyword">return</span> clients;</span><br><span class="line">            &#125;</span><br><span class="line">            connectNum = Math.max(connectNum, <span class="number">1</span>); <span class="comment">// 至少一个</span></span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isEmpty(clients)) &#123;<span class="comment">// 如果clients为空，则按指定的connectNum生成client</span></span><br><span class="line">                clients = buildReferenceCountExchangeClientList(url, connectNum);</span><br><span class="line">                referenceClientMap.put(key, clients);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果clients不为空，则遍历这些client，对于不可用的client，则重新生成一个client</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clients.size(); i++) &#123;</span><br><span class="line">                    ReferenceCountExchangeClient referenceCountExchangeClient = clients.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (referenceCountExchangeClient == <span class="keyword">null</span> || referenceCountExchangeClient.isClosed()) &#123;</span><br><span class="line">                        clients.set(i, buildReferenceCountExchangeClient(url));</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    referenceCountExchangeClient.incrementAndGetCount();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            locks.remove(key);</span><br><span class="line">            <span class="keyword">return</span> clients;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ReferenceCountExchangeClient <span class="title">buildReferenceCountExchangeClient</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        ExchangeClient exchangeClient = initClient(url); <span class="comment">// 生成一个ExchangeClient</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferenceCountExchangeClient(exchangeClient); <span class="comment">// 包装成ReferenceCountExchangeClient</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ExchangeClient <span class="title">initClient</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拿设置的client，默认为netty</span></span><br><span class="line">        String str = url.getParameter(CLIENT_KEY, url.getParameter(SERVER_KEY, DEFAULT_REMOTING_CLIENT));</span><br><span class="line">        <span class="comment">// 编码方式</span></span><br><span class="line">        url = url.addParameter(CODEC_KEY, DubboCodec.NAME);</span><br><span class="line">        <span class="comment">// 心跳， 默认60 * 1000,60秒一个心跳</span></span><br><span class="line">        url = url.addParameterIfAbsent(HEARTBEAT_KEY, String.valueOf(DEFAULT_HEARTBEAT));</span><br><span class="line">        <span class="comment">// 如果没有指定的client扩展，则抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter<span class="class">.<span class="keyword">class</span>).<span class="title">hasExtension</span>(<span class="title">str</span>)) </span>&#123;</span><br><span class="line">            throw new RpcException("Unsupported client type: " + str + ", supported client type is " + StringUtils.join(ExtensionLoader.getExtensionLoader(Transporter.class).getSupportedExtensions(), " "));</span><br><span class="line">        &#125;</span><br><span class="line">        ExchangeClient client;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(LAZY_CONNECT_KEY, <span class="keyword">false</span>)) &#123; <span class="comment">// connection should be lazy</span></span><br><span class="line">                client = <span class="keyword">new</span> LazyConnectExchangeClient(url, requestHandler);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                client = Exchangers.connect(url, requestHandler);  <span class="comment">// 建立连接</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Fail to create remoting client for service("</span> + url + <span class="string">"): "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ExchangeHandler requestHandler = <span class="keyword">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">reply</span><span class="params">(ExchangeChannel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(message <span class="keyword">instanceof</span> Invocation)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">"Unsupported request: "</span> + (message == <span class="keyword">null</span> ? <span class="keyword">null</span> : (message.getClass().getName() + <span class="string">": "</span> + message)) + <span class="string">", channel: consumer: "</span> + channel.getRemoteAddress() + <span class="string">" --&gt; provider: "</span> + channel.getLocalAddress());</span><br><span class="line">            &#125;</span><br><span class="line">            Invocation inv = (Invocation) message; <span class="comment">// 转成Invocation对象，要开始用反射执行方法了</span></span><br><span class="line">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);  <span class="comment">// 服务实现者</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class="line">                String methodsStr = invoker.getUrl().getParameters().get(<span class="string">"methods"</span>);</span><br><span class="line">                <span class="keyword">boolean</span> hasMethod = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (methodsStr == <span class="keyword">null</span> || !methodsStr.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String[] methods = methodsStr.split(<span class="string">","</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class="line">                            hasMethod = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!hasMethod) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());<span class="comment">// 这里设置了，service中才能拿到remoteAddress</span></span><br><span class="line">            Result result = invoker.invoke(inv);<span class="comment">// 执行服务，得到结果</span></span><br><span class="line">            <span class="keyword">return</span> result.completionFuture().thenApply(Function.identity()); <span class="comment">// 返回一个CompletableFuture</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">                reply((ExchangeChannel) channel, message);  <span class="comment">// 这是服务端接收到Invocation时的处理逻辑</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.received(channel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_CONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_DISCONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class="line">            Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class="line">            <span class="keyword">if</span> (invocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    received(channel, invocation);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Invocation <span class="title">createInvocation</span><span class="params">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class="line">            String method = url.getParameter(methodKey);</span><br><span class="line">            <span class="keyword">if</span> (method == <span class="keyword">null</span> || method.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcInvocation invocation = <span class="keyword">new</span> RpcInvocation(method, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">            invocation.setAttachment(PATH_KEY, url.getPath());</span><br><span class="line">            invocation.setAttachment(GROUP_KEY, url.getParameter(GROUP_KEY));</span><br><span class="line">            invocation.setAttachment(INTERFACE_KEY, url.getParameter(INTERFACE_KEY));</span><br><span class="line">            invocation.setAttachment(VERSION_KEY, url.getParameter(VERSION_KEY));</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(STUB_EVENT_KEY, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                invocation.setAttachment(STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> invocation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端的启动和服务端的启动类似，在<strong><code>connect</code></strong>方法中调用<strong><code>HeaderExchanger</code></strong>的connect方法去<strong>建立<code>socket</code>连接</strong>并得到一个<strong><code>HeaderExchangeClient</code></strong>，构造<strong><code>HeaderExchangeClient</code></strong>时先执行<strong><code>Transporters.*connect*()</code></strong>方法得到一个Client，从而调用调用<strong><code>NettyTransporter</code></strong>的connect方法构造一个<strong><code>NettyClient</code></strong>，构造<strong><code>NettyClient</code></strong>的过程中会初始化Netty客户端，然后连接Server端建立一个Socket连接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchangers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"handler == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">"exchange"</span>);</span><br><span class="line">        <span class="keyword">return</span> getExchanger(url).connect(url, handler); <span class="comment">// 得到一个HeaderExchanger去connect</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchanger</span> <span class="keyword">implements</span> <span class="title">Exchanger</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeClient <span class="title">connect</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="comment">// 利用NettyTransporter去connect，为什么在connect和bind时都是DecodeHandler，解码解的是把InputStream解析成AppResponse对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeClient(Transporters.connect(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transporters</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ChannelHandler handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerAdapter();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">            handler = handlers[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTransporter().connect(url, handler); <span class="comment">// NettyTransporter</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyTransporter</span> <span class="keyword">implements</span> <span class="title">Transporter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Client <span class="title">connect</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NettyClient(url, listener); <span class="comment">// 生成一个NettyClient, 这个内部会去进行连接</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyClient</span> <span class="keyword">extends</span> <span class="title">AbstractClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyClient</span><span class="params">(<span class="keyword">final</span> URL url, <span class="keyword">final</span> ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(url, wrapChannelHandler(url, handler));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        NettyHelper.setNettyLoggerFactory();</span><br><span class="line">        bootstrap = <span class="keyword">new</span> ClientBootstrap(CHANNEL_FACTORY);</span><br><span class="line">        <span class="comment">// config @see org.jboss.netty.channel.socket.SocketChannelConfig</span></span><br><span class="line">        bootstrap.setOption(<span class="string">"keepAlive"</span>, <span class="keyword">true</span>);</span><br><span class="line">        bootstrap.setOption(<span class="string">"tcpNoDelay"</span>, <span class="keyword">true</span>);</span><br><span class="line">        bootstrap.setOption(<span class="string">"connectTimeoutMillis"</span>, getConnectTimeout());</span><br><span class="line">        <span class="keyword">final</span> NettyHandler nettyHandler = <span class="keyword">new</span> NettyHandler(getUrl(), <span class="keyword">this</span>);</span><br><span class="line">        bootstrap.setPipelineFactory(<span class="keyword">new</span> ChannelPipelineFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ChannelPipeline <span class="title">getPipeline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NettyCodecAdapter adapter = <span class="keyword">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyClient.<span class="keyword">this</span>);</span><br><span class="line">                ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">                pipeline.addLast(<span class="string">"decoder"</span>, adapter.getDecoder());</span><br><span class="line">                pipeline.addLast(<span class="string">"encoder"</span>, adapter.getEncoder());</span><br><span class="line">                pipeline.addLast(<span class="string">"handler"</span>, nettyHandler);</span><br><span class="line">                <span class="keyword">return</span> pipeline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doConnect</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        ChannelFuture future = bootstrap.connect(getConnectAddress());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">boolean</span> ret = future.awaitUninterruptibly(getConnectTimeout(), TimeUnit.MILLISECONDS);</span><br><span class="line">            <span class="keyword">if</span> (ret &amp;&amp; future.isSuccess()) &#123;</span><br><span class="line">                Channel newChannel = future.getChannel();</span><br><span class="line">                newChannel.setInterestOps(Channel.OP_READ_WRITE);</span><br><span class="line">                <span class="keyword">try</span> &#123;<span class="comment">// Close old channel</span></span><br><span class="line">                    Channel oldChannel = NettyClient.<span class="keyword">this</span>.channel; <span class="comment">// copy reference</span></span><br><span class="line">                    <span class="keyword">if</span> (oldChannel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            oldChannel.close();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            NettyChannel.removeChannelIfDisconnected(oldChannel);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (NettyClient.<span class="keyword">this</span>.isClosed()) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            newChannel.close();</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            NettyClient.<span class="keyword">this</span>.channel = <span class="keyword">null</span>;</span><br><span class="line">                            NettyChannel.removeChannelIfDisconnected(newChannel);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        NettyClient.<span class="keyword">this</span>.channel = newChannel;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (future.getCause() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">"client(url: "</span> + getUrl() + <span class="string">") failed to connect to server "</span> + getRemoteAddress() + <span class="string">", error message is:"</span> + future.getCause().getMessage(), future.getCause());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(<span class="keyword">this</span>, <span class="string">"client(url: "</span> + getUrl() + <span class="string">") failed to connect to server "</span> + getRemoteAddress() + <span class="string">" client-side timeout "</span> + getConnectTimeout() + <span class="string">"ms (elapsed: "</span> + (System.currentTimeMillis() - start) + <span class="string">"ms) from netty client "</span> + NetUtils.getLocalHost() + <span class="string">" using dubbo version "</span> + Version.getVersion());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!isConnected()) &#123;</span><br><span class="line">                future.cancel();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractClient</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span> <span class="keyword">implements</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractClient</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(url, handler);</span><br><span class="line">        needReconnect = url.getParameter(Constants.SEND_RECONNECT_KEY, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doOpen();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            close();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(url.toInetSocketAddress(), <span class="keyword">null</span>, <span class="string">"Failed to start "</span> + getClass().getSimpleName() + <span class="string">" "</span> + NetUtils.getLocalAddress() + <span class="string">" connect to the server "</span> + getRemoteAddress() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// connect.</span></span><br><span class="line">            connect();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException t) &#123;</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(Constants.CHECK_KEY, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                close();</span><br><span class="line">                <span class="keyword">throw</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            close();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(url.toInetSocketAddress(), <span class="keyword">null</span>, <span class="string">"Failed to start "</span> + getClass().getSimpleName() + <span class="string">" "</span> + NetUtils.getLocalAddress() + <span class="string">" connect to the server "</span> + getRemoteAddress() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到消费端的线程池</span></span><br><span class="line">        executor = (ExecutorService) ExtensionLoader.getExtensionLoader(DataStore<span class="class">.<span class="keyword">class</span>).<span class="title">getDefaultExtension</span>().<span class="title">get</span>(<span class="title">CONSUMER_SIDE</span>, <span class="title">Integer</span>.<span class="title">toString</span>(<span class="title">url</span>.<span class="title">getPort</span>()))</span>;</span><br><span class="line">        ExtensionLoader.getExtensionLoader(DataStore<span class="class">.<span class="keyword">class</span>).<span class="title">getDefaultExtension</span>().<span class="title">remove</span>(<span class="title">CONSUMER_SIDE</span>, <span class="title">Integer</span>.<span class="title">toString</span>(<span class="title">url</span>.<span class="title">getPort</span>()))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> ChannelHandler <span class="title">wrapChannelHandler</span><span class="params">(URL url, ChannelHandler handler)</span> </span>&#123;</span><br><span class="line">        url = ExecutorUtil.setThreadName(url, CLIENT_THREAD_POOL_NAME);</span><br><span class="line">        url = url.addParameterIfAbsent(THREADPOOL_KEY, DEFAULT_CLIENT_THREADPOOL);</span><br><span class="line">        <span class="keyword">return</span> ChannelHandlers.wrap(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChannelHandlers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ChannelHandler <span class="title">wrap</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ChannelHandlers.getInstance().wrapInternal(handler, url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ChannelHandler <span class="title">wrapInternal</span><span class="params">(ChannelHandler handler, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先通过ExtensionLoader.getExtensionLoader(Dispatcher.class).getAdaptiveExtension().dispatch(handler, url)</span></span><br><span class="line">        <span class="comment">// 得到一个AllChannelHandler(handler, url)把AllChannelHandler包装成HeartbeatHandler，HeartbeatHandler包装成MultiMessageHandler</span></span><br><span class="line">        <span class="comment">// 当Netty接收到一个数据时，会经历MultiMessageHandler---&gt;HeartbeatHandler----&gt;AllChannelHandler，而AllChannelHandler会调用handler</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MultiMessageHandler(<span class="keyword">new</span> HeartbeatHandler(ExtensionLoader.getExtensionLoader(Dispatcher<span class="class">.<span class="keyword">class</span>).<span class="title">getAdaptiveExtension</span>().<span class="title">dispatch</span>(<span class="title">handler</span>, <span class="title">url</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建代理"><a href="#创建代理" class="headerlink" title="创建代理"></a>创建代理</h4><p>最终创建好Invoker对象后会通过<strong><code>ProxyFactory</code></strong>给Invoker创建代理对象，<strong><code>ProxyFactory</code></strong>是通过<strong><code>SPI</code>机制</strong>加载的默认为<strong><code>JavassistProxyFactory</code></strong>。最终创建代理对象<strong><code>InvokerInvocationHandler</code></strong>即为最终<strong><code>ReferenceBean</code></strong>的<strong><code>getObject</code></strong>方法返回对象，在发起服务调用时首先执行<strong><code>InvokerInvocationHandler</code></strong>的<strong><code>invoke</code></strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getProxy</span><span class="params">(Invoker&lt;T&gt; invoker, Class&lt;?&gt;[] interfaces)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (T) Proxy.getProxy(interfaces).newInstance(<span class="keyword">new</span> InvokerInvocationHandler(invoker));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Wrapper cannot handle this scenario correctly: the classname contains '$'</span></span><br><span class="line">        <span class="comment">// 若现在被代理对象proxy本身就是一个已经被代理过的对象，则取代理类的Wrapper，否则取type接口的Wrapper</span></span><br><span class="line">        <span class="comment">// Wrapper是针对某个类或某个接口的包装类，通过wrapper对象可以更方便的去执行某个类或某个接口的方法</span></span><br><span class="line">        <span class="keyword">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">'$'</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;<span class="comment">// proxy是服务实现类 type是服务接口 url是一个注册中心url</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// 执行proxy的method方法，执行的proxy实例的方法，若没有wrapper，则要通过原生的反射技术去获取Method对象，然后执行</span></span><br><span class="line">                <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerInvocationHandler</span><span class="params">(Invoker&lt;?&gt; handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.invoker = handler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">        <span class="keyword">if</span> (method.getDeclaringClass() == Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(invoker, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"toString"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"hashCode"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"equals"</span>.equals(methodName) &amp;&amp; parameterTypes.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker.equals(args[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// recreate方法会调用AppResponse的recreate方法，若AppResponse对象中存在exception信息，则此方法中会throw该异常</span></span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(<span class="keyword">new</span> RpcInvocation(method, args)).recreate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Invoker调用链"><a href="#Invoker调用链" class="headerlink" title="Invoker调用链"></a>Invoker调用链</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Reference</span>(url = <span class="string">"dubbo://ip:20881/package.DemoService;registry://ip:2181/package.RegistryService?registry=zookeeper"</span>)</span><br><span class="line"><span class="keyword">private</span> DemoService demoService;</span><br></pre></td></tr></table></figure><p>最复杂情况下Invoker链<strong>在<code>@Reference</code>注解中设置URL</strong>，且指定<strong>服务提供者URL</strong>为<code>dubbo://ip:20881/package.DemoService</code>，<strong>注册中心URL</strong>为<code>registry://ip:2181/package.RegistryService?registry=zookeeper</code>，最终refer处理的invoker链路为：</p><ol><li><strong><code>MockClusterInvoker</code></strong></li><li><strong><code>invoker=RegistryAwareClusterInvoker</code></strong></li><li><strong><code>directory=StaticDirectory</code></strong></li><li><strong><code>0=ProtocolFilterWrapper$CallbackRegistrationInvoke</code>子流程</strong></li><li><strong><code>1=MockClusterInvoker</code></strong></li><li><strong><code>FailoverClusterInvoker</code></strong></li><li><strong><code>RegistryDirectory</code></strong></li><li><strong><code>invokers=UnmodifiableRandomAccessList</code></strong>size=1</li><li><strong><code>0=RegistryDirectory$InvokerDelegat</code></strong></li><li><strong><code>ProtocolFilterWrapper$CallbackRegistrationInvoke</code>子流程</strong></li><li><strong><code>filterInvoker=ProtocolFilterWrapper$1</code></strong></li><li><strong><code>filter=ConsumerContextFilter</code></strong></li><li><strong><code>next=ProtocolFilterWrapper$1</code></strong></li><li><strong><code>filter=FutureFilter</code></strong></li><li><strong><code>next=ProtocolFilterWrapper$1</code></strong></li><li><strong><code>filter=MonitorFilter</code></strong></li><li><strong><code>next=ListenerInvokerWrapper</code></strong></li><li><strong><code>invoker=AsyncToSyncInvoker</code></strong></li><li><strong><code>invoker=DubboInvoker</code></strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring启动过程中会将&lt;strong&gt;&lt;code&gt;@Reference&lt;/code&gt;注解&lt;/strong&gt;标注的属性赋值，赋值对象为&lt;strong&gt;&lt;code&gt;ReferenceBean&lt;/code&gt;&lt;/strong&gt;中&lt;strong&gt;&lt;code&gt;get()&lt;/code
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/categories/Cloud/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo服务导出</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo%E6%9C%8D%E5%8A%A1%E5%AF%BC%E5%87%BA/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo服务导出/</id>
    <published>2021-12-14T16:00:00.000Z</published>
    <updated>2022-01-13T12:01:21.893Z</updated>
    
    <content type="html"><![CDATA[<p>服务导出首先<strong>确定服务参数</strong>，确定服务支持的协议，构造服务最终的URL，<strong>将服务<code>URL</code>注册到注册中心</strong>且<strong>向注册中心注册监听器</strong>，监听Dubbo的中的<strong>动态配置信息变更</strong>，主要<strong>根据服务支持的不同协议启动不同的Server用来接收和处理请求</strong>如netty、tomcat、jetty等。</p><p>服务的参数除了可以在<strong><code>@Service</code>注解</strong>中配置<strong><code>AbstractConfig</code></strong>，还会<strong>继承Dubbo服务所属应用Application上的配置</strong>，还可在<strong>配置中心</strong>配置且分为应用配置<strong><code>AppExternalConfiguration</code></strong>和全局配置<strong><code>ExternalConfiguration</code></strong>，<strong><code>JVM</code>环境变量</strong>中去配置某个服务的参数<strong><code>SystemConfiguration</code></strong>，还可以通过<strong><code>dubbo.properties</code></strong>文件配置<strong><code>PropertiesConfiguration</code></strong>。优先级从高到低为<strong><code>SystemConfiguration</code></strong>、<strong><code>AppExternalConfiguration</code></strong>、<strong><code>ExternalConfiguration</code></strong>、<strong><code>AbstractConfig</code></strong>、<strong><code>PropertiesConfiguration</code></strong>。</p><p><strong>服务导出入口</strong>为<strong><code>ServiceBean</code></strong>的<strong><code>export</code></strong>方法，<strong><code>ServiceBean</code></strong>继承了<strong><code>ApplicationContextAware</code></strong>，在<strong><code>setApplicationContext</code></strong>方法中会把<strong><code>applicationContext</code></strong>添加到<strong><code>SpringExtensionFactory</code></strong>中便于Dubbo的<strong><code>SPI</code>机制</strong>引入的类中完成Spring容器中Bean的注入，且<strong><code>ServiceBean</code></strong>继承了<strong><code>ApplicationListener</code></strong>接口，将<strong><code>ServiceBean</code></strong>作为监听器注册到Spring监听器列表中。当Spring启动完之后通过接收<strong><code>ContextRefreshedEvent</code></strong>事件从而调用<strong><code>onApplicationEvent</code></strong>来触发<strong><code>export</code></strong>方法的执行。且若注册监听器失败在<strong><code>afterPropertiesSet</code></strong>完成一系列属性填充后，将直接调用<strong><code>export</code></strong>方法来完成导出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceBean</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">DisposableBean</span>, <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt;, <span class="title">BeanNameAware</span>, <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.applicationContext = applicationContext;</span><br><span class="line">        <span class="comment">// 若某一个Service是通过Spring暴露的，则当需要获取该服务时就要从Spring容器中进行获取，所以需要把applicationContext添加到SpringExtensionFactory中去</span></span><br><span class="line">        SpringExtensionFactory.addApplicationContext(applicationContext);</span><br><span class="line">        <span class="comment">// 一定要有这一步，不然ServiceBean将接收不到ContextRefreshedEvent事件</span></span><br><span class="line">        supportedApplicationListener = addApplicationListener(applicationContext, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isExported() &amp;&amp; !isUnexported()) &#123; <span class="comment">// 当前服务没有被导出并且没有卸载，才导出服务</span></span><br><span class="line">            export();  <span class="comment">// 服务导出（服务注册）</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.export();</span><br><span class="line">        <span class="comment">// Publish ServiceBeanExportedEvent，Spring启动完发布ContextRefreshedEvent事件---&gt;服务导出---&gt;发布ServiceBeanExportedEvent，可通过Spring中的ApplicationListener来监听服务导出是否完成</span></span><br><span class="line">        publishExportEvent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">publishExportEvent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceBeanExportedEvent exportEvent = <span class="keyword">new</span> ServiceBeanExportedEvent(<span class="keyword">this</span>);</span><br><span class="line">        applicationEventPublisher.publishEvent(exportEvent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 此处省略了一些列属性填充代码</span></span><br><span class="line">        <span class="keyword">if</span> (!supportedApplicationListener) &#123; <span class="comment">// 在setApplicationContext方法中添加监听器成功，则该参数会被置为true</span></span><br><span class="line">            export();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用超类<strong><code>ServiceConfig</code></strong>中的<strong><code>export</code></strong>方法，首先调用<strong><code>checkAndUpdateSubConfigs</code></strong>完成<strong>参数补全刷新</strong>等操作，刷新完后会检查<strong><code>stub</code></strong>、<strong><code>local</code></strong>、<strong><code>mock</code></strong>等参数是否配置正确。</p><p>若ServiceConfig中某些属性为空，则从<strong><code>ProviderConfig</code></strong>、<strong><code>ModuleConfig</code></strong>、<strong><code>ApplicationConfig</code></strong>中获取，<strong>补全<code>ServiceConfig</code>属性</strong>，从配置中心获取配置，包括应用配置和全局配置，把获取到的配置放入到Environment中的<strong><code>externalConfigurationMap</code></strong>和<strong><code>appExternalConfigurationMap</code></strong>中，并刷新所有除开<strong><code>ServiceConfig</code></strong>的<strong><code>XxConfig</code></strong>的属性，即将配置中心的配置<strong>覆盖XxConfig中的属性</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">export</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkAndUpdateSubConfigs();</span><br><span class="line">        <span class="keyword">if</span> (!shouldExport()) &#123; <span class="comment">// 检查服务是否需要导出</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldDelay()) &#123; <span class="comment">// 检查是否需要延迟发布</span></span><br><span class="line">            DELAY_EXPORT_EXECUTOR.schedule(<span class="keyword">this</span>::doExport, getDelay(), TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            doExport(); <span class="comment">// 导出服务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndUpdateSubConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ServiceConfig中的某些属性如果是空的，那么就从ProviderConfig、ModuleConfig、ApplicationConfig中获取，补全ServiceConfig中的属性</span></span><br><span class="line">        completeCompoundConfigs();</span><br><span class="line">        <span class="comment">// 从配置中心获取配置，包括应用配置和全局配置，把获取到的配置放入到Environment中的externalConfigurationMap和appExternalConfigurationMap中</span></span><br><span class="line">        <span class="comment">// 并刷新所有除开ServiceConfig的XxConfig的属性，即将配置中心的配置覆盖XxConfig中的属性</span></span><br><span class="line">        startConfigCenter();</span><br><span class="line">        checkDefault();</span><br><span class="line">        checkProtocol();</span><br><span class="line">        checkApplication();</span><br><span class="line">        <span class="keyword">if</span> (!isOnlyInJvm()) &#123;</span><br><span class="line">            checkRegistry();<span class="comment">// 如果protocol不是只有injvm协议，表示服务调用不是只在本机jvm里面调用，那就需要用到注册中心</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.refresh(); <span class="comment">// 刷新ServiceConfig</span></span><br><span class="line">        checkMetadataReport(); <span class="comment">// 如果配了metadataReportConfig，那么就刷新配置</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(interfaceName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"&lt;dubbo:service interface=\"\" /&gt; interface not allow null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ref <span class="keyword">instanceof</span> GenericService) &#123; <span class="comment">// 当前服务对应的实现类是一个GenericService，表示没有特定的接口</span></span><br><span class="line">            interfaceClass = GenericService<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(generic)) &#123;</span><br><span class="line">                generic = Boolean.TRUE.toString();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123; <span class="comment">// 加载接口</span></span><br><span class="line">                interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread().getContextClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            checkInterfaceAndMethods(interfaceClass, methods); <span class="comment">// 刷新MethodConfig，并判断MethodConfig中对应的方法在接口中是否存在</span></span><br><span class="line">            checkRef(); <span class="comment">// 实现类是不是该接口类型</span></span><br><span class="line">            generic = Boolean.FALSE.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (local != <span class="keyword">null</span>) &#123; <span class="comment">// local和stub一样，不建议使用了</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(local)) &#123; <span class="comment">// 如果本地存根为true，则存根类为interfaceName + "Local"</span></span><br><span class="line">                local = interfaceName + <span class="string">"Local"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt; localClass; <span class="comment">// 加载本地存根类</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                localClass = ClassUtils.forNameWithThreadContextClassLoader(local);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isAssignableFrom(localClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The local implementation class "</span> + localClass.getName() + <span class="string">" not implement interface "</span> + interfaceName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stub != <span class="keyword">null</span>) &#123; <span class="comment">// 本地存根</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(stub)) &#123;</span><br><span class="line">                stub = interfaceName + <span class="string">"Stub"</span>; <span class="comment">// 若本地存根为true，则存根类为interfaceName + "Stub"</span></span><br><span class="line">            &#125;</span><br><span class="line">            Class&lt;?&gt; stubClass;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                stubClass = ClassUtils.forNameWithThreadContextClassLoader(stub);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!interfaceClass.isAssignableFrom(stubClass)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The stub implementation class "</span> + stubClass.getName() + <span class="string">" not implement interface "</span> + interfaceName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        checkStubAndLocal(interfaceClass);  <span class="comment">// 检查local和stub</span></span><br><span class="line">        checkMock(interfaceClass); <span class="comment">// 检查mock</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">completeCompoundConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;  <span class="comment">// 如果配置了provider，那么则从provider中获取信息赋值其他属性，在这些属性为空的情况下</span></span><br><span class="line">            <span class="keyword">if</span> (application == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setApplication(provider.getApplication());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">module</span> == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setModule(provider.getModule());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setRegistries(provider.getRegistries());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setMonitor(provider.getMonitor());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (protocols == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setProtocols(provider.getProtocols());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (configCenter == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setConfigCenter(provider.getConfigCenter());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">module</span> != <span class="keyword">null</span>) &#123; <span class="comment">// 如果配置了module，那么则从module中获取信息赋值其他属性，在这些属性为空的情况下</span></span><br><span class="line">            <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setRegistries(<span class="keyword">module</span>.getRegistries());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setMonitor(<span class="keyword">module</span>.getMonitor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (application != <span class="keyword">null</span>) &#123; <span class="comment">// 如果配置了application，那么则从application中获取信息赋值其他属性，在这些属性为空的情况下</span></span><br><span class="line">            <span class="keyword">if</span> (registries == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setRegistries(application.getRegistries());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (monitor == <span class="keyword">null</span>) &#123;</span><br><span class="line">                setMonitor(application.getMonitor());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterfaceConfig</span> <span class="keyword">extends</span> <span class="title">AbstractMethodConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">startConfigCenter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (configCenter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ConfigManager.getInstance().getConfigCenter().ifPresent(cc -&gt; <span class="keyword">this</span>.configCenter = cc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.configCenter != <span class="keyword">null</span>) &#123; <span class="comment">// 如果配置了ConfigCenter</span></span><br><span class="line">            <span class="keyword">this</span>.configCenter.refresh(); <span class="comment">// 从其他位置获取配置中心的相关属性信息，比如配置中心地址</span></span><br><span class="line">            prepareEnvironment(); <span class="comment">// 属性更新后，从远程配置中心获取数据(应用配置，全局配置)</span></span><br><span class="line">        &#125;</span><br><span class="line">        ConfigManager.getInstance().refreshAll();  <span class="comment">// 从配置中心取到配置数据后，刷新所有的XxConfig中的属性，除开ServiceConfig</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractConfig</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refresh</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CompositeConfiguration compositeConfiguration = Environment.getInstance().getConfiguration(getPrefix(), getId());</span><br><span class="line">            <span class="comment">// 表示XxConfig对象本身- AbstractConfig</span></span><br><span class="line">            Configuration config = <span class="keyword">new</span> ConfigConfigurationAdapter(<span class="keyword">this</span>);  <span class="comment">// ServiceConfig</span></span><br><span class="line">            <span class="keyword">if</span> (Environment.getInstance().isConfigCenterFirst()) &#123;</span><br><span class="line">                <span class="comment">// The sequence would be: SystemConfiguration -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; AbstractConfig -&gt; PropertiesConfiguration</span></span><br><span class="line">                compositeConfiguration.addConfiguration(<span class="number">4</span>, config);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// The sequence would be: SystemConfiguration -&gt; AbstractConfig -&gt; AppExternalConfiguration -&gt; ExternalConfiguration -&gt; PropertiesConfiguration</span></span><br><span class="line">                compositeConfiguration.addConfiguration(<span class="number">2</span>, config);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// loop methods, get override value and set the new value back to method</span></span><br><span class="line">            Method[] methods = getClass().getMethods();  <span class="comment">//ServiceBean</span></span><br><span class="line">            <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                <span class="keyword">if</span> (MethodUtils.isSetter(method)) &#123; <span class="comment">// 是不是setXX()方法</span></span><br><span class="line">                    <span class="comment">// 获取xx配置项的value</span></span><br><span class="line">                    String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));</span><br><span class="line">                    <span class="comment">// isTypeMatch() is called to avoid duplicate and incorrect update, for example, we have two 'setGeneric' methods in ReferenceConfig.</span></span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotEmpty(value) &amp;&amp; ClassUtils.isTypeMatch(method.getParameterTypes()[<span class="number">0</span>], value)) &#123;</span><br><span class="line">                        method.invoke(<span class="keyword">this</span>, ClassUtils.convertPrimitive(method.getParameterTypes()[<span class="number">0</span>], value));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isParametersSetter(method)) &#123;  <span class="comment">// 是不是setParameters()方法</span></span><br><span class="line">                    <span class="comment">// 获取parameter配置项的value</span></span><br><span class="line">                    String value = StringUtils.trim(compositeConfiguration.getString(extractPropertyName(getClass(), method)));</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isNotEmpty(value)) &#123;</span><br><span class="line">                        Map&lt;String, String&gt; map = invokeGetParameters(getClass(), <span class="keyword">this</span>);</span><br><span class="line">                        map = map == <span class="keyword">null</span> ? <span class="keyword">new</span> HashMap&lt;&gt;() : map;</span><br><span class="line">                        map.putAll(convert(StringUtils.parseParameters(value), <span class="string">""</span>));</span><br><span class="line">                        invokeSetParameters(getClass(), <span class="keyword">this</span>, map);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">refreshAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        getApplication().ifPresent(ApplicationConfig::refresh);</span><br><span class="line">        getMonitor().ifPresent(MonitorConfig::refresh);</span><br><span class="line">        getModule().ifPresent(ModuleConfig::refresh);</span><br><span class="line">        getProtocols().values().forEach(ProtocolConfig::refresh);</span><br><span class="line">        getRegistries().values().forEach(RegistryConfig::refresh);</span><br><span class="line">        getProviders().values().forEach(ProviderConfig::refresh);</span><br><span class="line">        getConsumers().values().forEach(ConsumerConfig::refresh);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong><code>loadRegistries</code></strong>方法获得所配置的<strong>注册中心<code>URL</code></strong>，<strong>可配多个</strong>配置中心且<strong>当前导出服务</strong>需<strong>注册到每个配置中心</strong>去，注册中心<strong>类型</strong>、<strong>地址</strong>、<strong>端口</strong>和<strong>配置参数</strong>等，都会存在以<strong><code>registry://</code>开头的<code>URL</code></strong>上。</p><p>遍历当前服务所有的<strong><code>ProtocolConfig</code></strong>，且针对每个<strong><code>ProtocolConfig</code></strong>生成一个服务名称<strong><code>pathKey</code></strong>，然后将通过<strong><code>ProviderModel</code></strong>封装服务提供者<strong>访问路径</strong>，<strong>实现类</strong>，<strong>接口</strong>，以及接口中的<strong>各个方法对应的<code>ProviderMethodModel</code></strong>，然后将解析好的<strong><code>ProviderModel</code></strong>与服务名称映射放入<strong><code>PROVIDED_SERVICES</code></strong>。然后调用<strong><code>doExportUrlsFor1Protocol</code></strong>方法把当前服务<strong>按每个协议每个注册中心分别导出</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doExport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (unexported) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The service "</span> + interfaceClass.getName() + <span class="string">" has already unexported!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (exported) &#123; <span class="comment">// 已经导出了，就不再导出了</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        exported = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(path)) &#123;</span><br><span class="line">            path = interfaceName;</span><br><span class="line">        &#125;</span><br><span class="line">        doExportUrls();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExportUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;URL&gt; registryURLs = loadRegistries(<span class="keyword">true</span>); <span class="comment">// registryURL 表示一个注册中心</span></span><br><span class="line">        <span class="keyword">for</span> (ProtocolConfig protocolConfig : protocols) &#123;</span><br><span class="line">            <span class="comment">// pathKey = group/contextpath/path:version</span></span><br><span class="line">            String pathKey = URL.buildKey(getContextPath(protocolConfig).map(p -&gt; p + <span class="string">"/"</span> + path).orElse(path), group, version);</span><br><span class="line">            <span class="comment">// ProviderModel中存在服务提供者访问路径，实现类，接口，以及接口中的各个方法对应的ProviderMethodModel，ProviderMethodModel表示某一个方法，方法名，所属的服务的，</span></span><br><span class="line">            ProviderModel providerModel = <span class="keyword">new</span> ProviderModel(pathKey, ref, interfaceClass);</span><br><span class="line">            <span class="comment">// ApplicationModel表示应用中有哪些服务提供者和引用了哪些服务</span></span><br><span class="line">            ApplicationModel.initProviderModel(pathKey, providerModel);</span><br><span class="line">            doExportUrlsFor1Protocol(protocolConfig, registryURLs); <span class="comment">// 重点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String serviceName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object serviceInstance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; serviceInterfaceClass;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, List&lt;ProviderMethodModel&gt;&gt; methods = <span class="keyword">new</span> HashMap&lt;String, List&lt;ProviderMethodModel&gt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProviderModel</span><span class="params">(String serviceName, Object serviceInstance, Class&lt;?&gt; serviceInterfaceClass)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == serviceInstance) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Service["</span> + serviceName + <span class="string">"]Target is NULL."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.serviceName = serviceName;</span><br><span class="line">        <span class="keyword">this</span>.serviceInstance = serviceInstance;</span><br><span class="line">        <span class="keyword">this</span>.serviceInterfaceClass = serviceInterfaceClass;</span><br><span class="line">        initMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Method[] methodsToExport = <span class="keyword">this</span>.serviceInterfaceClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methodsToExport) &#123; <span class="comment">// 遍历接口所有的方法</span></span><br><span class="line">            method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// methods表示是某个方法对应的ProviderMethodModel，method.getName返回的仅仅只有方法名，不包括方法参数列表，有可能存在重载</span></span><br><span class="line">            List&lt;ProviderMethodModel&gt; methodModels = methods.get(method.getName());</span><br><span class="line">            <span class="keyword">if</span> (methodModels == <span class="keyword">null</span>) &#123;</span><br><span class="line">                methodModels = <span class="keyword">new</span> ArrayList&lt;ProviderMethodModel&gt;(<span class="number">1</span>);</span><br><span class="line">                methods.put(method.getName(), methodModels);</span><br><span class="line">            &#125;</span><br><span class="line">            methodModels.add(<span class="keyword">new</span> ProviderMethodModel(method, serviceName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ConcurrentMap&lt;String, ProviderModel&gt; PROVIDED_SERVICES = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initProviderModel</span><span class="params">(String serviceName, ProviderModel providerModel)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (PROVIDED_SERVICES.putIfAbsent(serviceName, providerModel) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先从<strong><code>ProtocolConfig</code></strong>中获取<strong>协议名称</strong>，<strong>默认为<code>dubbo</code>协议</strong>，然后通过一系列的<strong><code>appendParameters</code></strong>方法将服务参数转存到Map中，若<strong><code>@Service</code>注解</strong>中配置了<strong><code>methods</code>参数</strong>，则遍历<strong>解析<code>methods</code>参数配置</strong>且补充到Map中。然后解析出提供的方法列表以及Token，然后通过所有的参数最终构造一个<strong>服务的URL</strong>，再<strong>根据scope执行本地导出和远程导出</strong>。</p><p>把服务<strong><code>URL</code></strong>作为参数添加到<strong><code>registryURL</code></strong>中，然后把<strong><code>registryURL</code></strong>、<strong>服务接口</strong>、<strong>当前服务实现类<code>ref</code></strong>调用<strong><code>ProxyFactory</code></strong>的<strong><code>getInvoker</code></strong>方法，使用代理生成一个<strong>当前服务接口</strong>即<strong>服务提供者的代理对象<code>Invoker</code></strong>，再把该代理对象<strong><code>Invoker</code></strong>和<strong>当前<code>ServiceConfig</code></strong>对象包装成一个<strong><code>DelegateProviderMetaDataInvoker</code></strong>对象。</p><p>最后通过具体Protocol的export方法对服务进行导出，这里的协议为<strong><code>RegistryProtocol</code></strong>，导出成功后得到一个<strong><code>Exporter</code></strong>，<strong><code>RegistryProtocol</code></strong>中进行<strong>服务注册</strong>，注册完之后使用<strong><code>DubboProtocol</code></strong>进行<strong>导出</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doExportUrlsFor1Protocol</span><span class="params">(ProtocolConfig protocolConfig, List&lt;URL&gt; registryURLs)</span> </span>&#123;</span><br><span class="line">        String name = protocolConfig.getName(); <span class="comment">// protocolConfig表示某个协议，registryURLs表示所有的注册中心</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(name)) &#123;</span><br><span class="line">            name = DUBBO; <span class="comment">// 若配置的某个协议没有配置name，则默认为dubbo</span></span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;(); <span class="comment">// 表示服务url参数</span></span><br><span class="line">        map.put(SIDE_KEY, PROVIDER_SIDE);</span><br><span class="line">        appendRuntimeParameters(map);</span><br><span class="line">        appendParameters(map, metrics); <span class="comment">// 监控中心参数</span></span><br><span class="line">        appendParameters(map, application); <span class="comment">// 应用相关参数</span></span><br><span class="line">        appendParameters(map, <span class="keyword">module</span>); <span class="comment">// 模块相关参数</span></span><br><span class="line">        appendParameters(map, provider); <span class="comment">// 提供者相关参数</span></span><br><span class="line">        appendParameters(map, protocolConfig); <span class="comment">// 协议相关参数</span></span><br><span class="line">        appendParameters(map, <span class="keyword">this</span>); <span class="comment">// 服务本身相关参数</span></span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methods)) &#123; <span class="comment">// 服务中某些方法参数：@Service(methods = &#123;@Method(name = "say", timeout = 3000)&#125;)</span></span><br><span class="line">            <span class="keyword">for</span> (MethodConfig method : methods) &#123;</span><br><span class="line">                appendParameters(map, method, method.getName());  <span class="comment">// 某个方法的配置参数，注意有prefix</span></span><br><span class="line">                String retryKey = method.getName() + <span class="string">".retry"</span>;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(retryKey)) &#123; <span class="comment">// 如果某个方法配置存在xx.retry=false，则改成xx.retry=0</span></span><br><span class="line">                    String retryValue = map.remove(retryKey);</span><br><span class="line">                    <span class="keyword">if</span> (Boolean.FALSE.toString().equals(retryValue)) &#123;</span><br><span class="line">                        map.put(method.getName() + <span class="string">".retries"</span>, <span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                List&lt;ArgumentConfig&gt; arguments = method.getArguments();</span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(arguments)) &#123;<span class="comment">// 遍历当前方法配置中的参数配置</span></span><br><span class="line">                    <span class="keyword">for</span> (ArgumentConfig argument : arguments) &#123;</span><br><span class="line">                        <span class="comment">// 若配置了type，则遍历当前接口的所有方法，找到方法名和当前方法名相等的方法，可能存在多个</span></span><br><span class="line">                        <span class="comment">// 若配置了index，则看index对应位置的参数类型是否等于type,若相等，则向map中存入argument对象中的参数</span></span><br><span class="line">                        <span class="comment">// 若没有配置index，那么则遍历方法所有的参数类型，等于type则向map中存入argument对象中的参数</span></span><br><span class="line">                        <span class="comment">// 若没有配置type，但配置了index,则把对应位置的argument放入map</span></span><br><span class="line">                        <span class="comment">// convert argument type</span></span><br><span class="line">                        <span class="keyword">if</span> (argument.getType() != <span class="keyword">null</span> &amp;&amp; argument.getType().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            Method[] methods = interfaceClass.getMethods();</span><br><span class="line">                            <span class="keyword">if</span> (methods != <span class="keyword">null</span> &amp;&amp; methods.length &gt; <span class="number">0</span>) &#123; <span class="comment">// visit all methods</span></span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">                                    String methodName = methods[i].getName();</span><br><span class="line">                                    <span class="keyword">if</span> (methodName.equals(method.getName())) &#123; <span class="comment">// target the method, and get its signature</span></span><br><span class="line">                                        Class&lt;?&gt;[] argtypes = methods[i].getParameterTypes();</span><br><span class="line">                                        <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span>) &#123; <span class="comment">// one callback in the method</span></span><br><span class="line">                                            <span class="keyword">if</span> (argtypes[argument.getIndex()].getName().equals(argument.getType())) &#123;</span><br><span class="line">                                                appendParameters(map, argument, method.getName() + <span class="string">"."</span> + argument.getIndex());</span><br><span class="line">                                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Argument config error : the index attribute and type attribute not match :index :"</span> + argument.getIndex() + <span class="string">", type:"</span> + argument.getType());</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125; <span class="keyword">else</span> &#123;<span class="comment">// multiple callbacks in the method</span></span><br><span class="line">                                            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; argtypes.length; j++) &#123;</span><br><span class="line">                                                Class&lt;?&gt; argclazz = argtypes[j];</span><br><span class="line">                                                <span class="keyword">if</span> (argclazz.getName().equals(argument.getType())) &#123;</span><br><span class="line">                                                    appendParameters(map, argument, method.getName() + <span class="string">"."</span> + j);</span><br><span class="line">                                                    <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span> &amp;&amp; argument.getIndex() != j) &#123;</span><br><span class="line">                                                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Argument config error : the index attribute and type attribute not match :index :"</span> + argument.getIndex() + <span class="string">", type:"</span> + argument.getType());</span><br><span class="line">                                                    &#125;</span><br><span class="line">                                                &#125;</span><br><span class="line">                                            &#125;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argument.getIndex() != -<span class="number">1</span>) &#123;</span><br><span class="line">                            appendParameters(map, argument, method.getName() + <span class="string">"."</span> + argument.getIndex());</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Argument config must set index or type attribute.eg: &lt;dubbo:argument index='0' .../&gt; or &lt;dubbo:argument type=xxx .../&gt;"</span>);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="comment">// end of methods for</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ProtocolUtils.isGeneric(generic)) &#123;</span><br><span class="line">            map.put(GENERIC_KEY, generic);</span><br><span class="line">            map.put(METHODS_KEY, ANY_VALUE);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">            <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(REVISION_KEY, revision);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 通过接口对应的Wrapper，拿到接口中所有的方法名字</span></span><br><span class="line">            String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">            <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(METHODS_KEY, ANY_VALUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(METHODS_KEY, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), <span class="string">","</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!ConfigUtils.isEmpty(token)) &#123; <span class="comment">// Token是为了防止服务被消费者直接调用（伪造http请求）</span></span><br><span class="line">            <span class="keyword">if</span> (ConfigUtils.isDefault(token)) &#123;</span><br><span class="line">                map.put(TOKEN_KEY, UUID.randomUUID().toString());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(TOKEN_KEY, token);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// export service通过该host和port访问该服务</span></span><br><span class="line">        String host = <span class="keyword">this</span>.findConfigedHosts(protocolConfig, registryURLs, map);</span><br><span class="line">        Integer port = <span class="keyword">this</span>.findConfigedPorts(protocolConfig, name, map);</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(name, host, port, getContextPath(protocolConfig).map(p -&gt; p + <span class="string">"/"</span> + path).orElse(path), map); <span class="comment">// 服务url</span></span><br><span class="line">        <span class="comment">// 可通过ConfiguratorFactory，对服务url再次进行配置</span></span><br><span class="line">        <span class="keyword">if</span> (ExtensionLoader.getExtensionLoader(ConfiguratorFactory<span class="class">.<span class="keyword">class</span>).<span class="title">hasExtension</span>(<span class="title">url</span>.<span class="title">getProtocol</span>())) </span>&#123;</span><br><span class="line">            url = ExtensionLoader.getExtensionLoader(ConfiguratorFactory<span class="class">.<span class="keyword">class</span>).<span class="title">getExtension</span>(<span class="title">url</span>.<span class="title">getProtocol</span>()).<span class="title">getConfigurator</span>(<span class="title">url</span>).<span class="title">configure</span>(<span class="title">url</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String scope = url.getParameter(SCOPE_KEY); <span class="comment">// scope可能为null，remote, local，none</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!SCOPE_NONE.equalsIgnoreCase(scope)) &#123;<span class="comment">// don't export when none is configured</span></span><br><span class="line">            <span class="comment">// 若scope为none则不会进行任何的服务导出，既不会远程，也不会本地</span></span><br><span class="line">            <span class="keyword">if</span> (!SCOPE_REMOTE.equalsIgnoreCase(scope)) &#123;</span><br><span class="line">                exportLocal(url); <span class="comment">// 如果scope不是remote，则会进行本地导出，会把当前url的protocol改为injvm，然后进行导出</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!SCOPE_LOCAL.equalsIgnoreCase(scope)) &#123;<span class="comment">// 如果scope不是local则会进行远程导出</span></span><br><span class="line">                <span class="keyword">if</span> (CollectionUtils.isNotEmpty(registryURLs)) &#123;<span class="comment">// 如果有注册中心，则将服务注册到注册中心</span></span><br><span class="line">                    <span class="keyword">for</span> (URL registryURL : registryURLs) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (LOCAL_PROTOCOL.equalsIgnoreCase(url.getProtocol())) &#123;</span><br><span class="line">                            <span class="keyword">continue</span>;<span class="comment">// 如果是injvm，则不需要进行注册中心注册</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 该服务是否是动态，对应zookeeper上表示是否是临时节点，对应dubbo中的功能就是静态服务</span></span><br><span class="line">                        url = url.addParameterIfAbsent(DYNAMIC_KEY, registryURL.getParameter(DYNAMIC_KEY));</span><br><span class="line">                        URL monitorUrl = loadMonitor(registryURL); <span class="comment">// 拿到监控中心地址</span></span><br><span class="line">                        <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123; <span class="comment">// 当前服务连接哪个监控中心</span></span><br><span class="line">                            url = url.addParameterAndEncoded(MONITOR_KEY, monitorUrl.toFullString());</span><br><span class="line">                        &#125;</span><br><span class="line">                        String proxy = url.getParameter(PROXY_KEY); <span class="comment">// 服务使用的动态代理机制，如果为空则使用javassit</span></span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotEmpty(proxy)) &#123;</span><br><span class="line">                            registryURL = registryURL.addParameter(PROXY_KEY, proxy);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 使用代理生成一个当前服务接口即服务提供者的代理对象Invoker，Invoker中包括了服务实现者、服务接口类、服务的注册地址，可以使用Invoker的invoke方法执行服务，同时此invoker也可用来导出</span></span><br><span class="line">                        Invoker&lt;?&gt; invoker = PROXY_FACTORY.getInvoker(ref, (Class) interfaceClass, registryURL.addParameterAndEncoded(EXPORT_KEY, url.toFullString()));</span><br><span class="line">                        <span class="comment">// invoker.invoke(Invocation) DelegateProviderMetaDataInvoker也表示服务提供者，包括了Invoker和服务的配置</span></span><br><span class="line">                        DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line">                        <span class="comment">// 使用特定的协议来对服务进行导出，这里的协议为RegistryProtocol，导出成功后得到一个Exporter</span></span><br><span class="line">                        <span class="comment">// 1. 先使用RegistryProtocol进行服务注册</span></span><br><span class="line">                        <span class="comment">// 2. 注册完了之后，使用DubboProtocol进行导出</span></span><br><span class="line">                        <span class="comment">// 到此为止完成了ServiceBean.export()--&gt;刷新ServiceBean的参数--&gt;得到注册中心URL和协议URL--&gt;遍历每个协议URL--&gt;组成服务URL--&gt;生成可执行服务Invoker--&gt;导出服务</span></span><br><span class="line">                        Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">                        exporters.add(exporter);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;<span class="comment">// 没有配置注册中心时，也会导出服务</span></span><br><span class="line">                    Invoker&lt;?&gt; invoker = PROXY_FACTORY.getInvoker(ref, (Class) interfaceClass, url);</span><br><span class="line">                    DelegateProviderMetaDataInvoker wrapperInvoker = <span class="keyword">new</span> DelegateProviderMetaDataInvoker(invoker, <span class="keyword">this</span>);</span><br><span class="line">                    Exporter&lt;?&gt; exporter = protocol.export(wrapperInvoker);</span><br><span class="line">                    exporters.add(exporter);</span><br><span class="line">                &#125;</span><br><span class="line">                MetadataReportService metadataReportService = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> ((metadataReportService = getMetadataReportService()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    metadataReportService.publishProvider(url); <span class="comment">// 根据服务url，讲服务的元信息存入元数据中心</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.urls.add(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认使用<strong><code>ProxyFactory</code></strong>的<strong><code>JavassistProxyFactory</code></strong>子类生成<strong><code>Invoker</code></strong>的代理对象，若被代理对象<strong><code>proxy</code></strong>本身就是一个<strong>已经被代理过的对象</strong>，则取代理类的Wrapper，否则取type接口的<strong><code>Wrapper</code></strong>，Wrapper是针对某个类或某个接口的包装类，通过wrapper对象可更方便的去执行某个类或某个接口的方法，最终封装为<strong><code>AbstractProxyInvoker</code></strong>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavassistProxyFactory</span> <span class="keyword">extends</span> <span class="title">AbstractProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 若现在被代理对象proxy本身就是一个已经被代理过的对象，则取代理类的Wrapper，否则取type接口的Wrapper</span></span><br><span class="line">        <span class="comment">// Wrapper是针对某个类或某个接口的包装类，通过wrapper对象可以更方便的去执行某个类或某个接口的方法</span></span><br><span class="line">        <span class="keyword">final</span> Wrapper wrapper = Wrapper.getWrapper(proxy.getClass().getName().indexOf(<span class="string">'$'</span>) &lt; <span class="number">0</span> ? proxy.getClass() : type);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractProxyInvoker&lt;T&gt;(proxy, type, url) &#123;<span class="comment">// proxy是服务实现类 type是服务接口 url是一个注册中心url</span></span><br><span class="line">            <span class="meta">@Override</span> <span class="function"><span class="keyword">protected</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// 执行proxy的method方法，执行的proxy实例的方法，若没有wrapper，则要通过原生的反射技术去获取Method对象，然后执行</span></span><br><span class="line">                <span class="keyword">return</span> wrapper.invokeMethod(proxy, methodName, parameterTypes, arguments);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>protocol是<strong><code>Protocol</code></strong>接口的一个<strong><code>Adaptive</code>对象</strong>，故会根据<strong><code>wrapperInvoker</code></strong>的<strong><code>genUrl</code></strong>方法得到一个<strong><code>url</code></strong>，根据此<strong><code>url</code>协议</strong>找到对应<strong><code>RegistryProtocol</code>扩展点</strong>，而<strong><code>Protocol</code></strong>接口有<strong><code>ProtocolFilterWrapper</code></strong>和<strong><code>ProtocolListenerWrapper</code></strong>两个包装类，实际在调用export方法时会经过这两个包装类的<strong><code>export</code></strong>方法。</p><p><strong><code>RegistryProtocol</code></strong>中首先获取到<strong>服务提供者<code>URL</code></strong>和<strong>注册中心<code>URL</code></strong>，然后给服务提供者<strong>生成并绑定监听器<code>OverrideListener</code></strong>，监听<strong>动态配置中心</strong>此服务的参数数据的变化，一旦监听到变化则<strong>重写服务<code>URL</code></strong>；在服务导出时先<strong>重写</strong>一次服务URL，然后通过<strong><code>doLocalExport</code></strong>调用<strong><code>DubboProtocol</code></strong>进行导出服务，导出成功后将得到一个<strong><code>ExporterChangeableWrapper</code></strong>；然后将其注册到注册中心。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolListenerWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Protocol protocol;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProtocolListenerWrapper</span><span class="params">(Protocol protocol)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (protocol == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"protocol == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.protocol = protocol;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.export(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 导出了一个服务之后，调用ExporterListener</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListenerExporterWrapper&lt;T&gt;(protocol.export(invoker),</span><br><span class="line">                                              <span class="comment">// 得到ExporterListener接口中能用的扩展点，根据url和EXPORTER_LISTENER_KEY进行筛选</span></span><br><span class="line">                                              Collections.unmodifiableList(ExtensionLoader.getExtensionLoader(ExporterListener<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                                                                           .<span class="title">getActivateExtension</span>(<span class="title">invoker</span>.<span class="title">getUrl</span>(), <span class="title">EXPORTER_LISTENER_KEY</span>)))</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerExporterWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListenerExporterWrapper</span><span class="params">(Exporter&lt;T&gt; exporter, List&lt;ExporterListener&gt; listeners)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"exporter == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.exporter = exporter;</span><br><span class="line">        <span class="keyword">this</span>.listeners = listeners;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(listeners)) &#123;</span><br><span class="line">            RuntimeException exception = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (ExporterListener listener : listeners) &#123;</span><br><span class="line">                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        listener.exported(<span class="keyword">this</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException t) &#123;</span><br><span class="line">                        logger.error(t.getMessage(), t);</span><br><span class="line">                        exception = t;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> exception;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(invoker.getUrl().getProtocol())) &#123;</span><br><span class="line">            <span class="keyword">return</span> protocol.export(invoker);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> protocol.export(buildInvokerChain(invoker, SERVICE_FILTER_KEY, CommonConstants.PROVIDER));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">buildInvokerChain</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class="line">        Invoker&lt;T&gt; last = invoker;</span><br><span class="line">        <span class="comment">// 根据url获取filter，根据url中的parameters取key为key的value所对应的filter，但是还会匹配group</span></span><br><span class="line">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class="class">.<span class="keyword">class</span>).<span class="title">getActivateExtension</span>(<span class="title">invoker</span>.<span class="title">getUrl</span>(), <span class="title">key</span>, <span class="title">group</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!filters.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> Filter filter = filters.get(i);</span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;T&gt; next = last;</span><br><span class="line">                last = <span class="keyword">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.getInterface();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> URL <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.getUrl();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAvailable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.isAvailable();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">                        Result asyncResult;</span><br><span class="line">                        <span class="keyword">try</span> &#123;<span class="comment">// 得到一个异步结果</span></span><br><span class="line">                            asyncResult = filter.invoke(next, invocation);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                            <span class="comment">// onError callback</span></span><br><span class="line">                            <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123;</span><br><span class="line">                                Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    listener.onError(e, invoker, invocation);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> asyncResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        invoker.destroy();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> invoker.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CallbackRegistrationInvoker&lt;&gt;(last, filters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="comment">// 导出服务registry://对应RegistryProtocol，zookeeper://对应ZookeeperRegistry，dubbo://对应DubboProtocol</span></span><br><span class="line">        URL registryUrl = getRegistryUrl(originInvoker); <span class="comment">// registry://xxx?xx=xx&amp;registry=zookeeper---&gt;zookeeper://xxx?xx=xx 表示注册中心</span></span><br><span class="line">        URL providerUrl = getProviderUrl(originInvoker); <span class="comment">// 得到服务提供者url，表示服务提供者</span></span><br><span class="line">        <span class="comment">// overrideSubscribeUrl是老版本的动态配置监听url，表示了需要监听的服务以及监听的类型，configurators是老版本上的动态配置</span></span><br><span class="line">        <span class="comment">// 在服务提供者url的基础上，生成一个overrideSubscribeUrl，协议为provider://，增加参数category=configurators&amp;check=false</span></span><br><span class="line">        <span class="keyword">final</span> URL overrideSubscribeUrl = getSubscribedOverrideUrl(providerUrl);</span><br><span class="line">        <span class="comment">// 一个overrideSubscribeUrl对应一个OverrideListener，用来监听变化事件，监听到overrideSubscribeUrl的变化后，OverrideListener就会根据变化进行相应处理，具体处理逻辑看OverrideListener的实现</span></span><br><span class="line">        <span class="keyword">final</span> OverrideListener overrideSubscribeListener = <span class="keyword">new</span> OverrideListener(overrideSubscribeUrl, originInvoker);</span><br><span class="line">        overrideListeners.put(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">        <span class="comment">// 在该方法里会利用providerConfigurationListener和serviceConfigurationListener去重写providerUrl</span></span><br><span class="line">        <span class="comment">// providerConfigurationListener表示应用级别的动态配置监听器，providerConfigurationListener是RegistyProtocol的一个属性</span></span><br><span class="line">        <span class="comment">// serviceConfigurationListener表示服务级别的动态配置监听器，serviceConfigurationListener是在每暴露一个服务时就会生成一个</span></span><br><span class="line">        <span class="comment">// 这两个监听器都是新版本中的监听器，新版本监听的zk路径是：</span></span><br><span class="line">        <span class="comment">// 服务：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService.configurators节点的内容</span></span><br><span class="line">        <span class="comment">// 应用：/dubbo/config/dubbo/dubbo-demo-provider-application.configurators节点的内容</span></span><br><span class="line">        <span class="comment">// 注意，要和配置中心的路径区分开来，配置中心的路径是：</span></span><br><span class="line">        <span class="comment">// 应用：/dubbo/config/dubbo/org.apache.dubbo.demo.DemoService/dubbo.properties节点的内容</span></span><br><span class="line">        <span class="comment">// 全局：/dubbo/config/dubbo/dubbo.properties节点的内容</span></span><br><span class="line">        providerUrl = overrideUrlWithConfig(providerUrl, overrideSubscribeListener);</span><br><span class="line">        <span class="comment">// export invoker，根据动态配置重写了providerUrl之后，就会调用DubboProtocol或HttpProtocol去进行导出服务了</span></span><br><span class="line">        <span class="keyword">final</span> ExporterChangeableWrapper&lt;T&gt; exporter = doLocalExport(originInvoker, providerUrl);</span><br><span class="line">        <span class="keyword">final</span> Registry registry = getRegistry(originInvoker); <span class="comment">// url to registry，得到注册中心-ZookeeperRegistry</span></span><br><span class="line">        <span class="comment">// 得到存入到注册中心去的providerUrl，会对服务提供者url中的参数进行简化</span></span><br><span class="line">        <span class="keyword">final</span> URL registeredProviderUrl = getRegisteredProviderUrl(providerUrl, registryUrl);</span><br><span class="line">        <span class="comment">// 将当前服务提供者Invoker，以及该服务对应的注册中心地址，以及简化后的服务url存入ProviderConsumerRegTable</span></span><br><span class="line">        ProviderInvokerWrapper&lt;T&gt; providerInvokerWrapper = ProviderConsumerRegTable.registerProvider(originInvoker, registryUrl, registeredProviderUrl);</span><br><span class="line">        <span class="comment">//to judge if we need to delay publish 是否需要注册到注册中心</span></span><br><span class="line">        <span class="keyword">boolean</span> register = providerUrl.getParameter(REGISTER_KEY, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (register) &#123;<span class="comment">// 注册服务，把简化后的服务提供者url注册到registryUrl中去</span></span><br><span class="line">            register(registryUrl, registeredProviderUrl);</span><br><span class="line">            providerInvokerWrapper.setReg(<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 针对老版本的动态配置，需要把overrideSubscribeListener绑定到overrideSubscribeUrl上去进行监听，兼容老版本的配置修改，利用overrideSubscribeListener去监听旧版本的动态配置变化</span></span><br><span class="line">        <span class="comment">// 老版本监听的zk路径是：/dubbo/org.apache.dubbo.demo.DemoService/configurators/override://0.0.0.0/org.apache.dubbo.demo.DemoService?category=configurators&amp;compatible_config=true&amp;dynamic=false&amp;enabled=true&amp;timeout=6000</span></span><br><span class="line">        <span class="comment">// 监听的是路径的内容，不是节点的内容</span></span><br><span class="line">        registry.subscribe(overrideSubscribeUrl, overrideSubscribeListener);</span><br><span class="line">        exporter.setRegisterUrl(registeredProviderUrl);</span><br><span class="line">        exporter.setSubscribeUrl(overrideSubscribeUrl);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DestroyableExporter&lt;&gt;(exporter);<span class="comment">//Ensure that a new exporter instance is returned every time export</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong><code>DubboProtocol</code></strong>导出服务主要是<strong>启动<code>NettyServer</code></strong>且<strong>层层封装处理数据的<code>RequestHandler</code></strong>，<strong>通过<code>url</code>绑定端口</strong>和对应的请求处理器<strong><code>RequestHandler</code></strong>类型为<strong><code>ExchangeHandler</code></strong>，以便在接收到请求时能依次被这些<strong><code>RequestHandler</code></strong>所处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">ExporterChangeableWrapper&lt;T&gt; <span class="title">doLocalExport</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; originInvoker, URL providerUrl)</span> </span>&#123;</span><br><span class="line">        String key = getCacheKey(originInvoker);</span><br><span class="line">        <span class="keyword">return</span> (ExporterChangeableWrapper&lt;T&gt;) bounds.computeIfAbsent(key, s -&gt; &#123;</span><br><span class="line">            Invoker&lt;?&gt; invokerDelegate = <span class="keyword">new</span> InvokerDelegate&lt;&gt;(originInvoker, providerUrl);</span><br><span class="line">            <span class="comment">// protocol属性的值是哪来的，是在SPI中注入进来的，是一个代理类，这里实际利用的就是DubboProtocol或HttpProtocol去export，使用ExporterChangeableWrapper是为了方便注销已经被导出的服务</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExporterChangeableWrapper&lt;&gt;((Exporter&lt;T&gt;) protocol.export(invokerDelegate), originInvoker);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProtocol</span> <span class="keyword">extends</span> <span class="title">AbstractProtocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Exporter&lt;T&gt; <span class="title">export</span><span class="params">(Invoker&lt;T&gt; invoker)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        URL url = invoker.getUrl();</span><br><span class="line">        String key = serviceKey(url); <span class="comment">// export service.</span></span><br><span class="line">        DubboExporter&lt;T&gt; exporter = <span class="keyword">new</span> DubboExporter&lt;T&gt;(invoker, key, exporterMap); <span class="comment">// 构造一个Exporter进行服务导出</span></span><br><span class="line">        exporterMap.put(key, exporter);</span><br><span class="line">        Boolean isStubSupportEvent = url.getParameter(STUB_EVENT_KEY, DEFAULT_STUB_EVENT);</span><br><span class="line">        Boolean isCallbackservice = url.getParameter(IS_CALLBACK_SERVICE, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (isStubSupportEvent &amp;&amp; !isCallbackservice) &#123; <span class="comment">//export an stub service for dispatching event</span></span><br><span class="line">            String stubServiceMethods = url.getParameter(STUB_EVENT_METHODS_KEY);</span><br><span class="line">            <span class="keyword">if</span> (stubServiceMethods == <span class="keyword">null</span> || stubServiceMethods.length() == <span class="number">0</span>) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// 服务的stub方法</span></span><br><span class="line">                stubServiceMethodsMap.put(url.getServiceKey(), stubServiceMethods);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        openServer(url);  <span class="comment">// 开启NettyServer请求---&gt;invocation---&gt;服务key---&gt;exporterMap.get(key)---&gt;exporter---&gt;invoker---&gt;invoker.invoke(invocation)--&gt;执行服务</span></span><br><span class="line">        optimizeSerialization(url); <span class="comment">// 特殊的一些序列化机制，比如kryo提供了注册机制来注册类，提高序列化和反序列化的速度</span></span><br><span class="line">        <span class="keyword">return</span> exporter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">openServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        String key = url.getAddress(); <span class="comment">// find server.获得ip地址和port：192.168.40.17:20880</span></span><br><span class="line">        <span class="keyword">boolean</span> isServer = url.getParameter(IS_SERVER_KEY, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">            ExchangeServer server = serverMap.get(key);<span class="comment">// 缓存Server对象</span></span><br><span class="line">            <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;<span class="comment">// DCL，Double Check Lock</span></span><br><span class="line">                <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                    server = serverMap.get(key);</span><br><span class="line">                    <span class="keyword">if</span> (server == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        serverMap.put(key, createServer(url)); <span class="comment">// 创建Server，并进行缓存</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;<span class="comment">// server supports reset, use together with override</span></span><br><span class="line">                server.reset(url); <span class="comment">// 服务重新导出时，就会走这里</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ExchangeServer <span class="title">createServer</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        url = URLBuilder.from(url)<span class="comment">// send readonly event when server closes, it's enabled by default</span></span><br><span class="line">            .addParameterIfAbsent(CHANNEL_READONLYEVENT_SENT_KEY, Boolean.TRUE.toString())</span><br><span class="line">            .addParameterIfAbsent(HEARTBEAT_KEY, String.valueOf(DEFAULT_HEARTBEAT))<span class="comment">// enable heartbeat by default</span></span><br><span class="line">            .addParameter(CODEC_KEY, DubboCodec.NAME)</span><br><span class="line">            .build();</span><br><span class="line">        <span class="comment">// 协议的服务器端实现类型，如：dubbo协议的mina,netty等，http协议的jetty,servlet等，默认为netty</span></span><br><span class="line">        String str = url.getParameter(SERVER_KEY, DEFAULT_REMOTING_SERVER);</span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span> &amp;&amp; !ExtensionLoader.getExtensionLoader(Transporter<span class="class">.<span class="keyword">class</span>).<span class="title">hasExtension</span>(<span class="title">str</span>)) </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Unsupported server type: "</span> + str + <span class="string">", url: "</span> + url);</span><br><span class="line">        &#125;</span><br><span class="line">        ExchangeServer server;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 通过url绑定端口，和对应的请求处理器，requestHandler是请求处理器，类型为ExchangeHandler，表示从url的端口接收到请求后，requestHandler来进行处理</span></span><br><span class="line">            server = Exchangers.bind(url, requestHandler);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RemotingException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Fail to start server(url: "</span> + url + <span class="string">") "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">        str = url.getParameter(CLIENT_KEY);  <span class="comment">// 协议的客户端实现类型，比如：dubbo协议的mina,netty等</span></span><br><span class="line">        <span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Set&lt;String&gt; supportedTypes = ExtensionLoader.getExtensionLoader(Transporter<span class="class">.<span class="keyword">class</span>).<span class="title">getSupportedExtensions</span>()</span>;</span><br><span class="line">            <span class="keyword">if</span> (!supportedTypes.contains(str)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Unsupported client type: "</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> server;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> ExchangeHandler requestHandler = <span class="keyword">new</span> ExchangeHandlerAdapter() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> CompletableFuture&lt;Object&gt; <span class="title">reply</span><span class="params">(ExchangeChannel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!(message <span class="keyword">instanceof</span> Invocation)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(channel, <span class="string">"Unsupported request: "</span> + (message == <span class="keyword">null</span> ? <span class="keyword">null</span> : (message.getClass().getName() + <span class="string">": "</span> + message)) + <span class="string">", channel: consumer: "</span> + channel.getRemoteAddress() + <span class="string">" --&gt; provider: "</span> + channel.getLocalAddress());</span><br><span class="line">            &#125;</span><br><span class="line">            Invocation inv = (Invocation) message; <span class="comment">// 转成Invocation对象，要开始用反射执行方法了</span></span><br><span class="line">            Invoker&lt;?&gt; invoker = getInvoker(channel, inv);  <span class="comment">// 服务实现者</span></span><br><span class="line">            <span class="keyword">if</span> (Boolean.TRUE.toString().equals(inv.getAttachments().get(IS_CALLBACK_SERVICE_INVOKE))) &#123;</span><br><span class="line">                String methodsStr = invoker.getUrl().getParameters().get(<span class="string">"methods"</span>);</span><br><span class="line">                <span class="keyword">boolean</span> hasMethod = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (methodsStr == <span class="keyword">null</span> || !methodsStr.contains(<span class="string">","</span>)) &#123;</span><br><span class="line">                    hasMethod = inv.getMethodName().equals(methodsStr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    String[] methods = methodsStr.split(<span class="string">","</span>);</span><br><span class="line">                    <span class="keyword">for</span> (String method : methods) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (inv.getMethodName().equals(method)) &#123;</span><br><span class="line">                            hasMethod = <span class="keyword">true</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!hasMethod) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcContext.getContext().setRemoteAddress(channel.getRemoteAddress());<span class="comment">// 这里设置了，service中才能拿到remoteAddress</span></span><br><span class="line">            Result result = invoker.invoke(inv);<span class="comment">// 执行服务，得到结果</span></span><br><span class="line">            <span class="keyword">return</span> result.completionFuture().thenApply(Function.identity()); <span class="comment">// 返回一个CompletableFuture</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">received</span><span class="params">(Channel channel, Object message)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (message <span class="keyword">instanceof</span> Invocation) &#123;</span><br><span class="line">                reply((ExchangeChannel) channel, message);  <span class="comment">// 这是服务端接收到Invocation时的处理逻辑</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">super</span>.received(channel, message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_CONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnected</span><span class="params">(Channel channel)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">            invoke(channel, ON_DISCONNECT_KEY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(Channel channel, String methodKey)</span> </span>&#123;</span><br><span class="line">            Invocation invocation = createInvocation(channel, channel.getUrl(), methodKey);</span><br><span class="line">            <span class="keyword">if</span> (invocation != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    received(channel, invocation);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> Invocation <span class="title">createInvocation</span><span class="params">(Channel channel, URL url, String methodKey)</span> </span>&#123;</span><br><span class="line">            String method = url.getParameter(methodKey);</span><br><span class="line">            <span class="keyword">if</span> (method == <span class="keyword">null</span> || method.length() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            RpcInvocation invocation = <span class="keyword">new</span> RpcInvocation(method, <span class="keyword">new</span> Class&lt;?&gt;[<span class="number">0</span>], <span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">            invocation.setAttachment(PATH_KEY, url.getPath());</span><br><span class="line">            invocation.setAttachment(GROUP_KEY, url.getParameter(GROUP_KEY));</span><br><span class="line">            invocation.setAttachment(INTERFACE_KEY, url.getParameter(INTERFACE_KEY));</span><br><span class="line">            invocation.setAttachment(VERSION_KEY, url.getParameter(VERSION_KEY));</span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(STUB_EVENT_KEY, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                invocation.setAttachment(STUB_EVENT_KEY, Boolean.TRUE.toString());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> invocation;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Netty启动"><a href="#Netty启动" class="headerlink" title="Netty启动"></a>Netty启动</h4><p>最终在<strong><code>Exchangers</code></strong>中调用<strong><code>HeaderExchanger</code></strong>的bind方法最终调用<strong><code>NettyTransporter</code></strong>去启动<strong><code>NettyServer</code></strong>，在调用<strong><code>NettyServer</code></strong>构造方法时会调用超类<strong><code>AbstractServer</code></strong>构造方法，从而调用<strong><code>NettyServer</code></strong>的<strong><code>doOpen</code></strong>启动<strong><code>NettyServer</code></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exchangers</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handler == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"handler == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        url = url.addParameterIfAbsent(Constants.CODEC_KEY, <span class="string">"exchange"</span>);<span class="comment">// codec表示协议编码方式</span></span><br><span class="line">        <span class="keyword">return</span> getExchanger(url).bind(url, handler);<span class="comment">// 通过url得到HeaderExchanger，利用HeaderExchanger进行bind，将得到一个HeaderExchangeServer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeaderExchanger</span> <span class="keyword">implements</span> <span class="title">Exchanger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExchangeServer <span class="title">bind</span><span class="params">(URL url, ExchangeHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="comment">// 去启动Netty对handler包装了两层，表示当处理一个请求时，每层Handler负责不同的处理逻辑，在connect和bind时都是DecodeHandler，解码解的是把InputStream解析成RpcInvocation对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HeaderExchangeServer(Transporters.bind(url, <span class="keyword">new</span> DecodeHandler(<span class="keyword">new</span> HeaderExchangeHandler(handler))));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Transporters</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler... handlers)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"url == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (handlers == <span class="keyword">null</span> || handlers.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"handlers == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果bind了多个handler，那么当有一个连接过来时，会循环每个handler去处理连接</span></span><br><span class="line">        ChannelHandler handler;</span><br><span class="line">        <span class="keyword">if</span> (handlers.length == <span class="number">1</span>) &#123;</span><br><span class="line">            handler = handlers[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            handler = <span class="keyword">new</span> ChannelHandlerDispatcher(handlers);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getTransporter().bind(url, handler);<span class="comment">// 调用NettyTransporter去绑定，Transporter表示网络传输层</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyTransporter</span> <span class="keyword">implements</span> <span class="title">Transporter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Server <span class="title">bind</span><span class="params">(URL url, ChannelHandler listener)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NettyServer(url, listener);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> <span class="keyword">extends</span> <span class="title">AbstractServer</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置线程名，wrap方法会返回一个MultiMessageHandler，该Handler会被设置到AbstractPeer的handler属性上</span></span><br><span class="line">        <span class="comment">// 当netty接收到数据时，会调用AbstractPeer的handler属性的received方法，所以MultiMessageHandler就是负责处理请求</span></span><br><span class="line">        <span class="keyword">super</span>(url, ChannelHandlers.wrap(handler, ExecutorUtil.setThreadName(url, SERVER_THREAD_POOL_NAME)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOpen</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        NettyHelper.setNettyLoggerFactory();</span><br><span class="line">        <span class="comment">// boss线程，主要监听端口和分配socketChannel给worker线程</span></span><br><span class="line">        ExecutorService boss = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">"NettyServerBoss"</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// worker线程负责数据读写</span></span><br><span class="line">        ExecutorService worker = Executors.newCachedThreadPool(<span class="keyword">new</span> NamedThreadFactory(<span class="string">"NettyServerWorker"</span>, <span class="keyword">true</span>));</span><br><span class="line">        <span class="comment">// iothreads就是读写数据的线程</span></span><br><span class="line">        ChannelFactory channelFactory = <span class="keyword">new</span> NioServerSocketChannelFactory(boss, worker, getUrl().getPositiveParameter(IO_THREADS_KEY, Constants.DEFAULT_IO_THREADS));</span><br><span class="line">        bootstrap = <span class="keyword">new</span> ServerBootstrap(channelFactory);</span><br><span class="line">        <span class="comment">// 连接处理器，建立连接、连接断开、接收到数据、返回数据的逻辑都在这个Handler里面，this表示的是NettyServer，在它的父类AbstractServer</span></span><br><span class="line">        <span class="keyword">final</span> NettyHandler nettyHandler = <span class="keyword">new</span> NettyHandler(getUrl(), <span class="keyword">this</span>);</span><br><span class="line">        channels = nettyHandler.getChannels();</span><br><span class="line">        <span class="comment">// final Timer timer = new HashedWheelTimer(new NamedThreadFactory("NettyIdleTimer", true));</span></span><br><span class="line">        bootstrap.setOption(<span class="string">"child.tcpNoDelay"</span>, <span class="keyword">true</span>);</span><br><span class="line">        bootstrap.setOption(<span class="string">"backlog"</span>, getUrl().getPositiveParameter(BACKLOG_KEY, Constants.DEFAULT_BACKLOG));</span><br><span class="line">        bootstrap.setPipelineFactory(<span class="keyword">new</span> ChannelPipelineFactory() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> ChannelPipeline <span class="title">getPipeline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                NettyCodecAdapter adapter = <span class="keyword">new</span> NettyCodecAdapter(getCodec(), getUrl(), NettyServer.<span class="keyword">this</span>);</span><br><span class="line">                ChannelPipeline pipeline = Channels.pipeline();</span><br><span class="line">                pipeline.addLast(<span class="string">"decoder"</span>, adapter.getDecoder());</span><br><span class="line">                pipeline.addLast(<span class="string">"encoder"</span>, adapter.getEncoder());</span><br><span class="line">                pipeline.addLast(<span class="string">"handler"</span>, nettyHandler);</span><br><span class="line">                <span class="keyword">return</span> pipeline;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// bind</span></span><br><span class="line">        channel = bootstrap.bind(getBindAddress());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractServer</span> <span class="keyword">extends</span> <span class="title">AbstractEndpoint</span> <span class="keyword">implements</span> <span class="title">Server</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractServer</span><span class="params">(URL url, ChannelHandler handler)</span> <span class="keyword">throws</span> RemotingException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(url, handler);</span><br><span class="line">        localAddress = getUrl().toInetSocketAddress();</span><br><span class="line">        String bindIp = getUrl().getParameter(Constants.BIND_IP_KEY, getUrl().getHost());</span><br><span class="line">        <span class="keyword">int</span> bindPort = getUrl().getParameter(Constants.BIND_PORT_KEY, getUrl().getPort());</span><br><span class="line">        <span class="keyword">if</span> (url.getParameter(ANYHOST_KEY, <span class="keyword">false</span>) || NetUtils.isInvalidLocalHost(bindIp)) &#123;</span><br><span class="line">            bindIp = ANYHOST_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        bindAddress = <span class="keyword">new</span> InetSocketAddress(bindIp, bindPort);</span><br><span class="line">        <span class="keyword">this</span>.accepts = url.getParameter(ACCEPTS_KEY, DEFAULT_ACCEPTS);</span><br><span class="line">        <span class="keyword">this</span>.idleTimeout = url.getParameter(IDLE_TIMEOUT_KEY, DEFAULT_IDLE_TIMEOUT);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            doOpen();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RemotingException(url.toInetSocketAddress(), <span class="keyword">null</span>, <span class="string">"Failed to bind "</span> + getClass().getSimpleName() + <span class="string">" on "</span> + getLocalAddress() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        DataStore dataStore = ExtensionLoader.getExtensionLoader(DataStore<span class="class">.<span class="keyword">class</span>).<span class="title">getDefaultExtension</span>()</span>;</span><br><span class="line">        executor = (ExecutorService) dataStore.get(Constants.EXECUTOR_SERVICE_COMPONENT_KEY, Integer.toString(url.getPort()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><p>首先从<strong><code>originInvoker</code></strong>中获取<strong>注册中心</strong>的实现类<strong><code>ZookeeperRegistry</code></strong>，将重写后的服务URL简化，把不用存到注册中心去的参数去除，将简化后的服务URL调用<strong><code>ZookeeperRegistry.registry()</code></strong>方法注册到注册中心去，首先会先调用<strong><code>ZookeeperRegistry</code></strong>超类<strong><code>FailbackRegistry</code></strong>的<strong><code>register</code></strong>方法，然后调用<strong><code>ZookeeperRegistry</code></strong>的<strong><code>doRegister</code></strong>正则将服务注册到Zookeeper上，最后将<strong><code>ExporterChangeableWrapper</code></strong>封装为<strong><code>DestroyableExporter</code></strong>对象返回完成服务导出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RegistryProtocol</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(URL registryUrl, URL registeredProviderUrl)</span> </span>&#123;</span><br><span class="line">        Registry registry = registryFactory.getRegistry(registryUrl);</span><br><span class="line">        registry.register(registeredProviderUrl); <span class="comment">// 调用ZookeeperRegistry的register方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">FailbackRegistry</span> <span class="keyword">extends</span> <span class="title">AbstractRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.register(url);</span><br><span class="line">        removeFailedRegistered(url);</span><br><span class="line">        removeFailedUnregistered(url);</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// Sending a registration request to the server side</span></span><br><span class="line">            doRegister(url);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            Throwable t = e;</span><br><span class="line">            <span class="comment">// If the startup detection is opened, the Exception is thrown directly.</span></span><br><span class="line">            <span class="keyword">boolean</span> check = getUrl().getParameter(Constants.CHECK_KEY, <span class="keyword">true</span>)</span><br><span class="line">                &amp;&amp; url.getParameter(Constants.CHECK_KEY, <span class="keyword">true</span>)</span><br><span class="line">                &amp;&amp; !CONSUMER_PROTOCOL.equals(url.getProtocol());</span><br><span class="line">            <span class="keyword">boolean</span> skipFailback = t <span class="keyword">instanceof</span> SkipFailbackWrapperException;</span><br><span class="line">            <span class="keyword">if</span> (check || skipFailback) &#123;</span><br><span class="line">                <span class="keyword">if</span> (skipFailback) &#123;</span><br><span class="line">                    t = t.getCause();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to register "</span> + url + <span class="string">" to registry "</span> + getUrl().getAddress() + <span class="string">", cause: "</span> + t.getMessage(), t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Record a failed registration request to a failed list, retry regularly</span></span><br><span class="line">            addFailedRegistered(url);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZookeeperRegistry</span> <span class="keyword">extends</span> <span class="title">FailbackRegistry</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doRegister</span><span class="params">(URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            zkClient.create(toUrlPath(url), url.getParameter(DYNAMIC_KEY, <span class="keyword">true</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to register "</span> + url + <span class="string">" to zookeeper "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Exporter架构"><a href="#Exporter架构" class="headerlink" title="Exporter架构"></a>Exporter架构</h4><p>一个服务导出成功后，会生成对应的Exporter，Exporter嵌套结构<strong>由外到内</strong>依次为：</p><ul><li><strong><code>DestroyableExporter</code></strong>：Exporter的最外层包装类，该类的主要作用是可用来<strong><code>unexporter</code></strong>对应的服务</li><li><strong><code>ExporterChangeableWrapper</code></strong>：该类主要负责<strong>在unexport对应服务之前</strong>，<strong>把服务URL从注册中心中移除，且把该服务对应的动态配置监听器移除</strong></li><li><strong><code>ListenerExporterWrapper</code></strong>：该类主要负责<strong>在unexport对应服务之后</strong>，把<strong>服务导出监听器移除</strong></li><li><strong><code>DubboExporter</code></strong>：该类中<strong>保存了对应服务的<code>Invoker</code>对象</strong>和<strong>当前服务唯一标志</strong>，当NettyServer接收到请求后，会根据请求中的服务信息，找到服务对应的<strong><code>DubboExporter</code></strong>对象，然后从对象中得到<strong><code>Invoker</code></strong>对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DestroyableExporter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Exporter&lt;T&gt; exporter;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DestroyableExporter</span><span class="params">(Exporter&lt;T&gt; exporter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exporter = exporter;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exporter.getInvoker();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        exporter.unexport();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ExporterChangeableWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String key = getCacheKey(<span class="keyword">this</span>.originInvoker);</span><br><span class="line">        bounds.remove(key);</span><br><span class="line">        Registry registry = RegistryProtocol.INSTANCE.getRegistry(originInvoker); <span class="comment">// 从注册中心删除服务URL</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            registry.unregister(registerUrl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;<span class="comment">// 解绑当前服务的Listener</span></span><br><span class="line">            NotifyListener listener = RegistryProtocol.INSTANCE.overrideListeners.remove(subscribeUrl);</span><br><span class="line">            registry.unsubscribe(subscribeUrl, listener);</span><br><span class="line">            DynamicConfiguration.getDynamicConfiguration().removeListener(subscribeUrl.getServiceKey() + CONFIGURATORS_SUFFIX, serviceConfigurationListeners.get(subscribeUrl.getServiceKey()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(t.getMessage(), t);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> timeout = ConfigurationUtils.getServerShutdownTimeout();</span><br><span class="line">                <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Thread.sleep(timeout);</span><br><span class="line">                &#125;</span><br><span class="line">                exporter.unexport();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListenerExporterWrapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Exporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            exporter.unexport();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (CollectionUtils.isNotEmpty(listeners)) &#123;</span><br><span class="line">                RuntimeException exception = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (ExporterListener listener : listeners) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            listener.unexported(<span class="keyword">this</span>);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (RuntimeException t) &#123;</span><br><span class="line">                            logger.error(t.getMessage(), t);</span><br><span class="line">                            exception = t;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (exception != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> exception;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboExporter</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractExporter</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String key;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DubboExporter</span><span class="params">(Invoker&lt;T&gt; invoker, String key, Map&lt;String, Exporter&lt;?&gt;&gt; exporterMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(invoker);</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.exporterMap = exporterMap;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.unexport();</span><br><span class="line">        exporterMap.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Invoker架构"><a href="#Invoker架构" class="headerlink" title="Invoker架构"></a>Invoker架构</h4><p>Invoker嵌套结构<strong>由外到内</strong>依次为：</p><ul><li><strong><code>ProtocolFilterWrapper$CallbackRegistrationInvoker</code></strong>：会去调用下层Invoker，下层Invoker执行完之后会遍历过滤器，查看是否有过滤器实现了<strong><code>ListenableFilter</code></strong>接口，若有则<strong>回调对应<code>onResponse</code></strong>方法如<strong><code>TimeoutFilter</code></strong>，当调用完下层Invoker后会<strong>计算服务执行时间</strong></li><li><strong><code>ProtocolFilterWrapper$1</code></strong>：ProtocolFilterWrapper中的过滤器组成的Invoker，利用该Invoker可<strong>执行服务端的过滤器</strong>，执行完过滤器之后，调用下层Invoker</li><li><strong><code>RegistryProtocol$InvokerDelegate</code></strong>：服务委托类，包含了<strong><code>DelegateProviderMetaDataInvoker</code></strong>对象和服务对应的providerUrl，执行时直接调用下层Invoker</li><li><strong><code>DelegateProviderMetaDataInvoker</code></strong>：服务委托类，包含了<strong><code>AbstractProxyInvoker</code></strong>对象和<strong><code>ServiceConfig</code></strong>对象，执行时直接调用下层Invoker</li><li><strong><code>AbstractProxyInvoker</code></strong>：服务接口代理类，绑定了对应的实现类，执行时会利用<strong>反射调用</strong>服务实现类实例的具体方法并得到结果</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackRegistrationInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;T&gt; filterInvoker;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Filter&gt; filters;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallbackRegistrationInvoker</span><span class="params">(Invoker&lt;T&gt; filterInvoker, List&lt;Filter&gt; filters)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.filterInvoker = filterInvoker;</span><br><span class="line">            <span class="keyword">this</span>.filters = filters;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">            Result asyncResult = filterInvoker.invoke(invocation); <span class="comment">// 执行过滤器链</span></span><br><span class="line">            <span class="comment">// 过滤器都执行完了之后，回调每个ListenableFilter过滤器的onResponse或onError方法</span></span><br><span class="line">            asyncResult = asyncResult.whenCompleteWithContext((r, t) -&gt; &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                    Filter filter = filters.get(i);</span><br><span class="line">                    <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123; <span class="comment">// onResponse callback</span></span><br><span class="line">                        Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                        <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                listener.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                listener.onError(t, filterInvoker, invocation);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        filter.onResponse(r, filterInvoker, invocation);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> asyncResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProtocolFilterWrapper</span> <span class="keyword">implements</span> <span class="title">Protocol</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Invoker&lt;T&gt; <span class="title">buildInvokerChain</span><span class="params">(<span class="keyword">final</span> Invoker&lt;T&gt; invoker, String key, String group)</span> </span>&#123;</span><br><span class="line">        Invoker&lt;T&gt; last = invoker;</span><br><span class="line">        <span class="comment">// 根据url获取filter，根据url中的parameters取key为key的value所对应的filter，但是还会匹配group</span></span><br><span class="line">        List&lt;Filter&gt; filters = ExtensionLoader.getExtensionLoader(Filter<span class="class">.<span class="keyword">class</span>).<span class="title">getActivateExtension</span>(<span class="title">invoker</span>.<span class="title">getUrl</span>(), <span class="title">key</span>, <span class="title">group</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (!filters.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = filters.size() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">final</span> Filter filter = filters.get(i);</span><br><span class="line">                <span class="keyword">final</span> Invoker&lt;T&gt; next = last;</span><br><span class="line">                last = <span class="keyword">new</span> Invoker&lt;T&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">                        Result asyncResult;</span><br><span class="line">                        <span class="keyword">try</span> &#123;<span class="comment">// 得到一个异步结果</span></span><br><span class="line">                            asyncResult = filter.invoke(next, invocation);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (Exception e) &#123; <span class="comment">// onError callback</span></span><br><span class="line">                            <span class="keyword">if</span> (filter <span class="keyword">instanceof</span> ListenableFilter) &#123;</span><br><span class="line">                                Filter.Listener listener = ((ListenableFilter) filter).listener();</span><br><span class="line">                                <span class="keyword">if</span> (listener != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                    listener.onError(e, invoker, invocation);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">throw</span> e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">return</span> asyncResult;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CallbackRegistrationInvoker&lt;&gt;(last, filters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerDelegate</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">InvokerWrapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker&lt;T&gt; invoker;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InvokerDelegate</span><span class="params">(Invoker&lt;T&gt; invoker, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(invoker, url);</span><br><span class="line">        <span class="keyword">this</span>.invoker = invoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Invoker&lt;T&gt; <span class="title">getInvoker</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (invoker <span class="keyword">instanceof</span> InvokerDelegate) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((InvokerDelegate&lt;T&gt;) invoker).getInvoker();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> invoker;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelegateProviderMetaDataInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Invoker&lt;T&gt; invoker;</span><br><span class="line">    <span class="keyword">private</span> ServiceConfig metadata;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelegateProviderMetaDataInvoker</span><span class="params">(Invoker&lt;T&gt; invoker, ServiceConfig metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.invoker = invoker;</span><br><span class="line">        <span class="keyword">this</span>.metadata = metadata;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> invoker.invoke(invocation);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        invoker.destroy();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServiceConfig <span class="title">getMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> metadata;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProxyInvoker</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Invoker</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T proxy;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; type;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL url;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AbstractProxyInvoker</span><span class="params">(T proxy, Class&lt;T&gt; type, URL url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"proxy == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"interface == null"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!type.isInstance(proxy)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(proxy.getClass().getName() + <span class="string">" not implement interface "</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.proxy = proxy;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">invoke</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> RpcException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 执行服务，得到一个接口，可能是一个CompletableFuture(表示异步调用)，可能是一个正常的服务执行结果（同步调用）</span></span><br><span class="line">            Object value = doInvoke(proxy, invocation.getMethodName(), invocation.getParameterTypes(), invocation.getArguments());</span><br><span class="line">            CompletableFuture&lt;Object&gt; future = wrapWithFuture(value, invocation); <span class="comment">// 将同步调用的服务执行结果封装为CompletableFuture类型</span></span><br><span class="line">            AsyncRpcResult asyncRpcResult = <span class="keyword">new</span> AsyncRpcResult(invocation); <span class="comment">// 异步RPC结果</span></span><br><span class="line">            future.whenComplete((obj, t) -&gt; &#123; <span class="comment">//设置一个回调，若是异步调用，则服务执行完成后将执行这里的回调</span></span><br><span class="line">                <span class="comment">// 当服务执行完后，将结果或异常设置到AsyncRpcResult中，若是异步服务，则服务之后的异常会在此处封装到AppResponse中然后返回，若是同步服务出异常了，则会在下面将异常封装到AsyncRpcResult中</span></span><br><span class="line">                AppResponse result = <span class="keyword">new</span> AppResponse();</span><br><span class="line">                <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t <span class="keyword">instanceof</span> CompletionException) &#123;</span><br><span class="line">                        result.setException(t.getCause());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        result.setException(t);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result.setValue(obj);</span><br><span class="line">                &#125;</span><br><span class="line">                asyncRpcResult.complete(result);  <span class="comment">// 将服务执行完之后的结果设置到异步RPC结果对象中</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> asyncRpcResult;<span class="comment">// 返回异步RPC结果</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;<span class="comment">// 假设抛的NullPointException，那么会把这个异常包装为一个Result对象</span></span><br><span class="line">            <span class="comment">// 同步服务执行时如何出异常了，会在此处将异常信息封装为一个AsyncRpcResult然后返回</span></span><br><span class="line">            <span class="keyword">return</span> AsyncRpcResult.newDefaultAsyncResult(<span class="keyword">null</span>, e.getTargetException(), invocation);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;<span class="comment">// 执行服务后的所有异常都会包装为RpcException进行抛出</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RpcException(<span class="string">"Failed to invoke remote proxy method "</span> + invocation.getMethodName() + <span class="string">" to "</span> + getUrl() + <span class="string">", cause: "</span> + e.getMessage(), e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CompletableFuture&lt;Object&gt; <span class="title">wrapWithFuture</span><span class="params">(Object value, Invocation invocation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (RpcContext.getContext().isAsyncStarted()) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((AsyncContextImpl) (RpcContext.getContext().getAsyncContext())).getInternalFuture();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value <span class="keyword">instanceof</span> CompletableFuture) &#123;</span><br><span class="line">            <span class="keyword">return</span> (CompletableFuture&lt;Object&gt;) value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> CompletableFuture.completedFuture(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">doInvoke</span><span class="params">(T proxy, String methodName, Class&lt;?&gt;[] parameterTypes, Object[] arguments)</span> <span class="keyword">throws</span> Throwable</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务监听器"><a href="#服务监听器" class="headerlink" title="服务监听器"></a>服务监听器</h4><p>服务在导出的过程中需要<strong>向动态配置中心的数据进行订阅</strong>，以便当管理人员修改了动态配置中心中对应服务的参数后，服务提供者能及时做出变化。Dubbo2.7之前仅支持对<strong>某个服务动态配置</strong>，Dubbo2.7之后不仅<strong>支持对单个服务动态配置</strong>，也支持<strong>对某个应用动态配置</strong>，是利用<strong><code>Zookeeper</code>的<code>Watcher</code>机制</strong>。</p><p>在服务提供者端给当前服务生成一个对应监听器实例<strong><code>OverrideListener</code></strong>，它负责监听对应服务的<strong>动态配置变化</strong>，且根据动态配置中心的参数<strong>重写服务<code>URL</code></strong>。</p><ul><li><strong><code>ProviderConfigurationListener</code></strong>：监听应用动态配置数据修改，是在<strong><code>RegistryProtocol</code></strong>类中的一个属性，且是随着RegistryProtocol实例化而实例化一个应用中只有一个</li><li><strong><code>ServiceConfigurationListener</code></strong>：监听服务动态配置数据修改和<strong><code>OverrideListener</code></strong>类似，在每个服务进行导出时都会生成一个，实际上其内部有一个OverrideListener属性，<strong>当其监听数据发生变化时把配置中心最新数据交给<code>OverrideListener</code>去重写服务URL</strong>。</li></ul><p>同时在<strong><code>RegistryProtocol</code></strong>类中保存了所有服务所对应的<strong><code>OverrideListener</code></strong>，当<strong><code>ProviderConfigurationListener</code></strong>监听到数据发生变化时，会把它所得到的最新数据依次调用每个<strong><code>OverrideListener</code></strong>去重写服务对应的服务URL。</p><p><strong><code>ProviderConfigurationListener</code></strong>会监听<strong><code>/dubbo/config/dubbo/应用.configurators</code></strong>节点，<strong><code>ServiceConfigurationListener</code></strong>会监听<strong><code>/dubbo/config/dubbo/服务.configurators</code></strong>节点。</p><p>修改服务动态配置，底层会修改Zookeeper中的数据，ServiceConfigurationListener监听到节点内容变化触发ServiceConfigurationListener的父类AbstractConfiguratorListener的process(ConfigChangeEvent event)方法，ConfigChangeEvent表示一个事件，事件中有事件类型<strong><code>ADDED</code></strong>、<strong><code>MODIFIED</code></strong>、<strong><code>DELETED</code></strong>，还有事件内容即节点内容，以及触发该事件的节点名字，事件类型有三个，当接收到一个ConfigChangeEvent事件后，会根据事件类型做对应的处理</p><ul><li><strong><code>ADDED、MODIFIED</code></strong>：根据节点内容去生成<strong><code>override://</code></strong>协议的URL，然后根据URL去生成<strong><code>Configurator</code>配置器</strong>，根据配置器可去重写URL</li><li><strong><code>DELETED</code></strong>：删除<strong><code>ServiceConfigurationListener</code></strong>内所有<strong><code>Configurator</code>配置器</strong></li></ul><p>生成了Configurator后，调用notifyOverrides()方法对服务URL进行重写，每次重写并不仅仅只是用到上面所生成的Configurator，而是包括本服务的Configurator，也包括本应用的Configurator，也包括老版本管理台的Configurator，重写URL的逻辑如下：</p><p>从exporter中获取目前已经导出了的服务URL即currentUrl，根据老版本管理台的Configurator重写服务URL，根据providerConfigurationListener中的Configurator重写服务URL，根据serviceConfigurationListeners中对应的服务的Configurator重写服务URL。</p><p>若重写之后newUrl和currentUrl不相等，则需要进行<strong>服务重新导出</strong>，根据newUrl调用DubboProtocol的export进行导出，再次启动NettyServer，将newUrl进行简化为registeredProviderUrl，调用RegistryProtocol的unregister()方法，把当前服务之前的服务提供URL从注册中心删掉，调用RegistryProtocol的register()方法，把新的registeredProviderUrl注册到注册中心</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideListener</span> <span class="keyword">implements</span> <span class="title">NotifyListener</span> </span>&#123;<span class="comment">// 当subscribeUrl对应的数据发生了改变，OverrideListener将收到通知</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> URL subscribeUrl;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Invoker originInvoker;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Configurator&gt; configurators;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OverrideListener</span><span class="params">(URL subscribeUrl, Invoker originalInvoker)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribeUrl = subscribeUrl;</span><br><span class="line">        <span class="keyword">this</span>.originInvoker = originalInvoker;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(List&lt;URL&gt; urls)</span> </span>&#123;</span><br><span class="line">        List&lt;URL&gt; matchedUrls = getMatchedUrls(urls, subscribeUrl.addParameter(CATEGORY_KEY, CONFIGURATORS_CATEGORY));</span><br><span class="line">        <span class="keyword">if</span> (matchedUrls.isEmpty()) &#123; <span class="comment">// No matching results</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 对发生了变化的url进行过滤，只取url是override协议，或者参数category等于configurators的url</span></span><br><span class="line">        <span class="keyword">this</span>.configurators = Configurator.toConfigurators(classifyUrls(matchedUrls, UrlUtils::isConfigurator)).orElse(configurators);</span><br><span class="line">        doOverrideIfNecessary();  <span class="comment">// 根据Override协议修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOverrideIfNecessary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Invoker&lt;?&gt; invoker;</span><br><span class="line">        <span class="keyword">if</span> (originInvoker <span class="keyword">instanceof</span> InvokerDelegate) &#123;</span><br><span class="line">            invoker = ((InvokerDelegate&lt;?&gt;) originInvoker).getInvoker();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            invoker = originInvoker;</span><br><span class="line">        &#125;</span><br><span class="line">        URL originUrl = RegistryProtocol.<span class="keyword">this</span>.getProviderUrl(invoker); <span class="comment">//The origin invoker 当前服务的原始服务提供者url</span></span><br><span class="line">        String key = getCacheKey(originInvoker);</span><br><span class="line">        ExporterChangeableWrapper&lt;?&gt; exporter = bounds.get(key);</span><br><span class="line">        <span class="keyword">if</span> (exporter == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//The current, may have been merged many times，当前服务被导出的url</span></span><br><span class="line">        URL currentUrl = exporter.getInvoker().getUrl();</span><br><span class="line">        <span class="comment">//根据configurators修改url，configurators是全量的，并不是某个新增的或删除的，所以是基于原始的url进行修改，并不是基于currentUrl</span></span><br><span class="line">        <span class="comment">//Merged with this configuration</span></span><br><span class="line">        URL newUrl = getConfigedInvokerUrl(configurators, originUrl);</span><br><span class="line">        newUrl = getConfigedInvokerUrl(providerConfigurationListener.getConfigurators(), newUrl);</span><br><span class="line">        newUrl = getConfigedInvokerUrl(serviceConfigurationListeners.get(originUrl.getServiceKey()).getConfigurators(), newUrl);</span><br><span class="line">        <span class="keyword">if</span> (!currentUrl.equals(newUrl)) &#123; <span class="comment">// 修改过的url如果和目前的url不相同，则重新按newUrl导出</span></span><br><span class="line">            RegistryProtocol.<span class="keyword">this</span>.reExport(originInvoker, newUrl);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;URL&gt; <span class="title">getMatchedUrls</span><span class="params">(List&lt;URL&gt; configuratorUrls, URL currentSubscribe)</span> </span>&#123;</span><br><span class="line">        List&lt;URL&gt; result = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">for</span> (URL url : configuratorUrls) &#123;</span><br><span class="line">            URL overrideUrl = url;</span><br><span class="line">            <span class="comment">// Compatible with the old version</span></span><br><span class="line">            <span class="keyword">if</span> (url.getParameter(CATEGORY_KEY) == <span class="keyword">null</span> &amp;&amp; OVERRIDE_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                overrideUrl = url.addParameter(CATEGORY_KEY, CONFIGURATORS_CATEGORY);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Check whether url is to be applied to the current service</span></span><br><span class="line">            <span class="keyword">if</span> (UrlUtils.isMatch(currentSubscribe, overrideUrl)) &#123;</span><br><span class="line">                result.add(url);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConfigurationListener</span> <span class="keyword">extends</span> <span class="title">AbstractConfiguratorListener</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> URL providerUrl;</span><br><span class="line">    <span class="keyword">private</span> OverrideListener notifyListener;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServiceConfigurationListener</span><span class="params">(URL providerUrl, OverrideListener notifyListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.providerUrl = providerUrl;</span><br><span class="line">        <span class="keyword">this</span>.notifyListener = notifyListener;</span><br><span class="line">        <span class="keyword">this</span>.initWith(DynamicConfiguration.getRuleKey(providerUrl) + CONFIGURATORS_SUFFIX); <span class="comment">// 订阅 服务接口名+group+version+".configurators"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">URL <span class="title">overrideUrl</span><span class="params">(URL providerUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RegistryProtocol.getConfigedInvokerUrl(configurators, providerUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">notifyOverrides</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        notifyListener.doOverrideIfNecessary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderConfigurationListener</span> <span class="keyword">extends</span> <span class="title">AbstractConfiguratorListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProviderConfigurationListener</span><span class="params">()</span> </span>&#123;<span class="comment">// // 订阅 应用名+".configurators"</span></span><br><span class="line">        <span class="keyword">this</span>.initWith(ApplicationModel.getApplication() + CONFIGURATORS_SUFFIX);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">URL <span class="title">overrideUrl</span><span class="params">(URL providerUrl)</span> </span>&#123;<span class="comment">// 通过configurators去修改/装配providerUrl</span></span><br><span class="line">        <span class="keyword">return</span> RegistryProtocol.getConfigedInvokerUrl(configurators, providerUrl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">notifyOverrides</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        overrideListeners.values().forEach(listener -&gt; ((OverrideListener) listener).doOverrideIfNecessary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;服务导出首先&lt;strong&gt;确定服务参数&lt;/strong&gt;，确定服务支持的协议，构造服务最终的URL，&lt;strong&gt;将服务&lt;code&gt;URL&lt;/code&gt;注册到注册中心&lt;/strong&gt;且&lt;strong&gt;向注册中心注册监听器&lt;/strong&gt;，监听Dubbo的中的&lt;str
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/categories/Cloud/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo与Spring集成原理</title>
    <link href="https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo%E4%B8%8ESpring%E9%9B%86%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>https://yaoyinglong.github.io/Blog/Cloud/Dubbo/Dubbo与Spring集成原理/</id>
    <published>2021-12-13T16:00:00.000Z</published>
    <updated>2022-01-13T12:01:21.840Z</updated>
    
    <content type="html"><![CDATA[<p>Dubbo与Spring的集成主要完成<strong><code>propertie</code>文件解析处理</strong>、<strong><code>@Service</code>注解解析</strong>、<strong><code>@Reference</code>注解解析</strong>。主要是通过<strong><code>@EnableDubbo</code></strong>注解来完成的，且在该注解上指定扫描的包，完成<strong><code>@Service</code></strong>与<strong><code>@Reference</code></strong>注解的扫描并且进行处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableDubbo</span>(scanBasePackages = <span class="string">"org.apache.dubbo.demo.provider"</span>)</span><br><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:/spring/dubbo-provider.properties"</span>)</span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderConfiguration</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>@EnableDubboConfig</code></strong>注解用来将<strong><code>properties</code></strong>文件中的<strong>配置项转化为对应的<code>Bean</code></strong>，<strong><code>@DubboComponentScan</code></strong>注解用来扫描<strong><code>@Service</code></strong>与<strong><code>@Reference</code></strong>注解标注的类和属性且进行相关的处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@EnableDubboConfig</span></span><br><span class="line"><span class="meta">@DubboComponentScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDubbo &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = DubboComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackages"</span>)</span><br><span class="line">    String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = DubboComponentScan<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"basePackageClasses"</span>)</span><br><span class="line">    Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(annotation = EnableDubboConfig<span class="class">.<span class="keyword">class</span>, <span class="title">attribute</span> </span>= <span class="string">"multiple"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">multipleConfig</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h4><p><strong><code>@EnableDubboConfig</code></strong>导入了<strong><code>DubboConfigConfigurationRegistrar</code></strong>配置类，该配置类通过<strong><code>AnnotatedBeanDefinitionRegistryUtils</code></strong>将<strong><code>DubboConfigConfiguration</code></strong>的<strong><code>Single</code></strong>和<strong><code>Multiple</code></strong>类注册到Spring中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DubboConfigConfigurationRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableDubboConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">multiple</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigConfigurationRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(EnableDubboConfig<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multiple = attributes.getBoolean(<span class="string">"multiple"</span>); <span class="comment">//true</span></span><br><span class="line">        registerBeans(registry, DubboConfigConfiguration.Single<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// Single Config Bindings</span></span><br><span class="line">        <span class="keyword">if</span> (multiple) &#123; <span class="comment">// 默认为true</span></span><br><span class="line">            registerBeans(registry, DubboConfigConfiguration.Multiple<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@EnableDubboConfigBindings</span>(&#123;</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.application"</span>, type = ApplicationConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.module"</span>, type = ModuleConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.registry"</span>, type = RegistryConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.protocol"</span>, type = ProtocolConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.monitor"</span>, type = MonitorConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.provider"</span>, type = ProviderConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.consumer"</span>, type = ConsumerConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.config-center"</span>, type = ConfigCenterBean<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.metadata-report"</span>, type = MetadataReportConfig<span class="class">.<span class="keyword">class</span>),</span></span><br><span class="line"><span class="class">        @<span class="title">EnableDubboConfigBinding</span>(<span class="title">prefix</span> </span>= <span class="string">"dubbo.metrics"</span>, type = MetricsConfig<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    &#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">static</span> <span class="title">class</span> <span class="title">Single</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@EnableDubboConfigBindings</span>(&#123;</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.applications"</span>, type = ApplicationConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.modules"</span>, type = ModuleConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.registries"</span>, type = RegistryConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.protocols"</span>, type = ProtocolConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.monitors"</span>, type = MonitorConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.providers"</span>, type = ProviderConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.consumers"</span>, type = ConsumerConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.config-centers"</span>, type = ConfigCenterBean<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.metadata-reports"</span>, type = MetadataReportConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>),</span><br><span class="line">        <span class="meta">@EnableDubboConfigBinding</span>(prefix = <span class="string">"dubbo.metricses"</span>, type = MetricsConfig<span class="class">.<span class="keyword">class</span>, <span class="title">multiple</span> </span>= <span class="keyword">true</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Multiple</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedBeanDefinitionRegistryUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerBeans</span><span class="params">(BeanDefinitionRegistry registry, Class&lt;?&gt;... annotatedClasses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ObjectUtils.isEmpty(annotatedClasses)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Iterator&lt;Class&lt;?&gt;&gt; iterator = <span class="keyword">new</span> ArrayList&lt;&gt;(asList(annotatedClasses)).iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Class&lt;?&gt; annotatedClass = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (isPresentBean(registry, annotatedClass)) &#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        AnnotatedBeanDefinitionReader reader = <span class="keyword">new</span> AnnotatedBeanDefinitionReader(registry);</span><br><span class="line">        <span class="comment">// 利用Spring中的AnnotatedBeanDefinitionReader来解析annotatedClasses会解析该类上的注解，然后进行处理</span></span><br><span class="line">        reader.register(annotatedClasses);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>@EnableDubboConfigBindings</code></strong>注解中导入了<strong><code>DubboConfigBindingsRegistrar</code></strong>配置类，该配置类中会获取并遍历注解中配置的<strong><code>@EnableDubboConfigBinding</code></strong>列表，调用<strong><code>DubboConfigBindingRegistrar</code></strong>的<strong><code>registerBeanDefinitions</code></strong>方法将生成对应的配置类注册到Spring容器中，且给<strong>每一个配置类</strong>注册一个<strong><code>DubboConfigBindingBeanPostProcessor</code></strong>后置处理器，且注册了一个<strong><code>NamePropertyDefaultValueDubboConfigBeanCustomizer</code></strong>的Bean，用来把<strong><code>XxConfig</code>配置类</strong>所对应的<strong><code>beanName</code></strong>设置到<strong><code>name</code></strong>属性中去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DubboConfigBindingsRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableDubboConfigBindings</span> </span>&#123;</span><br><span class="line">    EnableDubboConfigBinding[] value();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Repeatable</span>(EnableDubboConfigBindings<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(<span class="title">DubboConfigBindingRegistrar</span>.<span class="title">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">EnableDubboConfigBinding</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">prefix</span><span class="params">()</span></span>;</span><br><span class="line">    Class&lt;? extends AbstractConfig&gt; type();</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">multiple</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigBindingsRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(EnableDubboConfigBindings<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        AnnotationAttributes[] annotationAttributes = attributes.getAnnotationArray(<span class="string">"value"</span>); <span class="comment">// 拿到多个@EnableDubboConfigBinding注解</span></span><br><span class="line">        DubboConfigBindingRegistrar registrar = <span class="keyword">new</span> DubboConfigBindingRegistrar();</span><br><span class="line">        registrar.setEnvironment(environment);</span><br><span class="line">        <span class="keyword">for</span> (AnnotationAttributes element : annotationAttributes) &#123;</span><br><span class="line">            registrar.registerBeanDefinitions(element, registry); <span class="comment">// 逐个解析@EnableDubboConfigBinding注解</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigBindingRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span>, <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(importingClassMetadata.getAnnotationAttributes(EnableDubboConfigBinding<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        registerBeanDefinitions(attributes, registry);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationAttributes attributes, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        String prefix = environment.resolvePlaceholders(attributes.getString(<span class="string">"prefix"</span>));  <span class="comment">// prefix = "dubbo.application"</span></span><br><span class="line">        Class&lt;? extends AbstractConfig&gt; configClass = attributes.getClass(<span class="string">"type"</span>); <span class="comment">// type = ApplicationConfig.class</span></span><br><span class="line">        <span class="keyword">boolean</span> multiple = attributes.getBoolean(<span class="string">"multiple"</span>);</span><br><span class="line">        registerDubboConfigBeans(prefix, configClass, multiple, registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerDubboConfigBeans</span><span class="params">(String prefix, Class&lt;? extends AbstractConfig&gt; configClass, <span class="keyword">boolean</span> multiple, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 从properties文件中根据前缀拿对应的配置项，比如根据dubbo.application前缀</span></span><br><span class="line">        Map&lt;String, Object&gt; properties = getSubProperties(environment.getPropertySources(), prefix);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(properties)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// 如果没有相关的配置项，则不需要注册BeanDefinition</span></span><br><span class="line">        &#125;</span><br><span class="line">        Set&lt;String&gt; beanNames = multiple ? resolveMultipleBeanNames(properties) : Collections.singleton(resolveSingleBeanName(properties, configClass, registry));</span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">            registerDubboConfigBean(beanName, configClass, registry); <span class="comment">// 为每个beanName,注册一个空的BeanDefinition</span></span><br><span class="line">            <span class="comment">// 为每个bean注册一个DubboConfigBindingBeanPostProcessor的Bean后置处理器</span></span><br><span class="line">            registerDubboConfigBindingBeanPostProcessor(prefix, beanName, multiple, registry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注册一个NamePropertyDefaultValueDubboConfigBeanCustomizer的bean，用来把某个XxConfig所对应的beanName设置到name属性中去</span></span><br><span class="line">        registerDubboConfigBeanCustomizers(registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">resolveMultipleBeanNames</span><span class="params">(Map&lt;String, Object&gt; properties)</span> </span>&#123;</span><br><span class="line">        Set&lt;String&gt; beanNames = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 比如dubbo.protocols.p1.name=dubbo的propertyName为p1.name</span></span><br><span class="line">        <span class="keyword">for</span> (String propertyName : properties.keySet()) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = propertyName.indexOf(<span class="string">"."</span>); <span class="comment">// propertyName为p1.name</span></span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String beanName = propertyName.substring(<span class="number">0</span>, index); <span class="comment">// 截取beanName名字为p1</span></span><br><span class="line">                beanNames.add(beanName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> beanNames;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerDubboConfigBean</span><span class="params">(String beanName, Class&lt;? extends AbstractConfig&gt; configClass, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        BeanDefinitionBuilder builder = rootBeanDefinition(configClass);</span><br><span class="line">        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line">        registry.registerBeanDefinition(beanName, beanDefinition);   <span class="comment">// ApplicatinoConfig对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerDubboConfigBindingBeanPostProcessor</span><span class="params">(String prefix, String beanName, <span class="keyword">boolean</span> multiple, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 为每个XxConfig的Bean对应一个DubboConfigBindingBeanPostProcessor的Bean</span></span><br><span class="line">        Class&lt;?&gt; processorClass = DubboConfigBindingBeanPostProcessor<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        BeanDefinitionBuilder builder = rootBeanDefinition(processorClass);</span><br><span class="line">        <span class="comment">// 真实的前缀，比如dubbo.registries.r2</span></span><br><span class="line">        String actualPrefix = multiple ? normalizePrefix(prefix) + beanName : prefix;</span><br><span class="line">        <span class="comment">// 添加两个构造方法参数值，所以会调用DubboConfigBindingBeanPostProcessor的两个参数的构造方法</span></span><br><span class="line">        builder.addConstructorArgValue(actualPrefix).addConstructorArgValue(beanName);</span><br><span class="line">        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line">        beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        registerWithGeneratedName(beanDefinition, registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerDubboConfigBeanCustomizers</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        registerInfrastructureBean(registry, BEAN_NAME, NamePropertyDefaultValueDubboConfigBeanCustomizer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>DubboConfigBindingBeanPostProcessor</code></strong>是一个<strong><code>BeanPostProcessor</code></strong>，且实现了<strong><code>InitializingBean</code></strong>接口，在其<strong><code>afterPropertiesSet</code></strong>方法中会对<strong><code>DubboConfigBinder</code></strong>属性初始化，且获取到上面注册的<strong><code>NamePropertyDefaultValueDubboConfigBeanCustomizer</code></strong>对象。在<strong><code>postProcessBeforeInitialization</code></strong>方法中从<strong><code>properties</code></strong>文件中获取值，并设置到对应的Config文件对象中，然后调用<strong><code>NamePropertyDefaultValueDubboConfigBeanCustomizer</code></strong>的<strong><code>customize</code></strong>方法将<strong><code>beanName</code></strong>设置到name属性中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConfigBindingBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanPostProcessor</span>, <span class="title">ApplicationContextAware</span>, <span class="title">InitializingBean</span>, <span class="title">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        initDubboConfigBinder();        <span class="comment">// 创建DefaultDubboConfigBinder</span></span><br><span class="line">        initConfigBeanCustomizers();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDubboConfigBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dubboConfigBinder == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;<span class="comment">// 先从Spring容器中获取DubboConfigBinder，默认获取不到</span></span><br><span class="line">                dubboConfigBinder = applicationContext.getBean(DubboConfigBinder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (BeansException ignored) &#123;</span><br><span class="line">                <span class="comment">// Use Default implementation 生成一个默认的</span></span><br><span class="line">                dubboConfigBinder = createDubboConfigBinder(applicationContext.getEnvironment());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dubboConfigBinder.setIgnoreUnknownFields(ignoreUnknownFields);</span><br><span class="line">        dubboConfigBinder.setIgnoreInvalidFields(ignoreInvalidFields);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initConfigBeanCustomizers</span><span class="params">()</span> </span>&#123; <span class="comment">// 得到之前创建了的NamePropertyDefaultValueDubboConfigBeanCustomizer</span></span><br><span class="line">        Collection&lt;DubboConfigBeanCustomizer&gt; configBeanCustomizers = beansOfTypeIncludingAncestors(applicationContext, DubboConfigBeanCustomizer<span class="class">.<span class="keyword">class</span>).<span class="title">values</span>()</span>;</span><br><span class="line">        <span class="keyword">this</span>.configBeanCustomizers = <span class="keyword">new</span> ArrayList&lt;&gt;(configBeanCustomizers);</span><br><span class="line">        AnnotationAwareOrderComparator.sort(<span class="keyword">this</span>.configBeanCustomizers);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        <span class="comment">// 每个XxConfig对应一个BeanPostProcessor，所以每个DubboConfigBindingBeanPostProcessor只处理对应的beanName</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.beanName.equals(beanName) &amp;&amp; bean <span class="keyword">instanceof</span> AbstractConfig) &#123;</span><br><span class="line">            AbstractConfig dubboConfig = (AbstractConfig) bean;</span><br><span class="line">            bind(prefix, dubboConfig); <span class="comment">// 从properties文件中获取值，并设置到dubboConfig对象中</span></span><br><span class="line">            customize(beanName, dubboConfig); <span class="comment">// 设置dubboConfig对象的name属性，设置为beanName</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">(String prefix, AbstractConfig dubboConfig)</span> </span>&#123;</span><br><span class="line">        dubboConfigBinder.bind(prefix, dubboConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(String beanName, AbstractConfig dubboConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (DubboConfigBeanCustomizer customizer : configBeanCustomizers) &#123;</span><br><span class="line">            customizer.customize(beanName, dubboConfig);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NamePropertyDefaultValueDubboConfigBeanCustomizer</span> <span class="keyword">implements</span> <span class="title">DubboConfigBeanCustomizer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(String beanName, AbstractConfig dubboConfigBean)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 查看XxConfig中是否存在name属性</span></span><br><span class="line">        PropertyDescriptor propertyDescriptor = getPropertyDescriptor(dubboConfigBean.getClass(), PROPERTY_NAME);</span><br><span class="line">        <span class="keyword">if</span> (propertyDescriptor != <span class="keyword">null</span>) &#123; <span class="comment">// "name" property is present</span></span><br><span class="line">            Method getNameMethod = propertyDescriptor.getReadMethod(); <span class="comment">// 看是否存在getName方法</span></span><br><span class="line">            <span class="keyword">if</span> (getNameMethod == <span class="keyword">null</span>) &#123; <span class="comment">// if "getName" method is absent</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Object propertyValue = ReflectionUtils.invokeMethod(getNameMethod, dubboConfigBean); <span class="comment">// 执行getName得到值</span></span><br><span class="line">            <span class="keyword">if</span> (propertyValue != <span class="keyword">null</span>) &#123; <span class="comment">// If The return value of "getName" method is not null</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Method setNameMethod = propertyDescriptor.getWriteMethod(); <span class="comment">// 获取setName方法</span></span><br><span class="line">            <span class="keyword">if</span> (setNameMethod != <span class="keyword">null</span>) &#123; <span class="comment">// "setName" and "getName" methods are present</span></span><br><span class="line">                <span class="keyword">if</span> (Arrays.equals(of(String<span class="class">.<span class="keyword">class</span>), <span class="title">setNameMethod</span>.<span class="title">getParameterTypes</span>())) </span>&#123; <span class="comment">// the param type is String</span></span><br><span class="line">                    ReflectionUtils.invokeMethod(setNameMethod, dubboConfigBean, beanName); <span class="comment">// 这是name属性为beanName</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bean扫描"><a href="#Bean扫描" class="headerlink" title="Bean扫描"></a>Bean扫描</h4><p>在<strong><code>@DubboComponentScan</code></strong>注解中导入了<strong><code>DubboComponentScanRegistrar</code></strong>配置类，该类<strong><code>registerBeanDefinitions</code></strong>方法获取<strong><code>@DubboComponentScan</code></strong>注解中配置包路径，创建扫描<strong><code>@Service</code>注解</strong>的后置处理器<strong><code>ServiceAnnotationBeanPostProcessor</code></strong>以及扫描<strong><code>@Reference</code>注解</strong>的后置处理器<strong><code>ReferenceAnnotationBeanPostProcessor</code></strong>且设置获取到的<strong>扫描包路径</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import</span>(DubboComponentScanRegistrar<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">DubboComponentScan</span> </span>&#123;</span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] basePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    Class&lt;?&gt;[] basePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboComponentScanRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到DubboComponentScan注解所定义的包路径，扫描该package下的类</span></span><br><span class="line">        Set&lt;String&gt; packagesToScan = getPackagesToScan(importingClassMetadata);</span><br><span class="line">        <span class="comment">// 注册ServiceAnnotationBeanPostProcessor后置处理器，扫描@Service注解的类生成BeanDefinition，会生成两个一个普通的bean一个ServiceBean</span></span><br><span class="line">        <span class="comment">// 在ServiceBean中会监听ContextRefreshedEvent事件，一旦Spring启动完后，就会进行服务导出</span></span><br><span class="line">        registerServiceAnnotationBeanPostProcessor(packagesToScan, registry);</span><br><span class="line">        <span class="comment">// 注册ReferenceAnnotationBeanPostProcessor，在对属性进行注入时会调用postProcessPropertyValues方法，按照@Reference注解的信息去生成一个RefrenceBean对象</span></span><br><span class="line">        registerReferenceAnnotationBeanPostProcessor(registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Set&lt;String&gt; <span class="title">getPackagesToScan</span><span class="params">(AnnotationMetadata metadata)</span> </span>&#123;</span><br><span class="line">        AnnotationAttributes attributes = AnnotationAttributes.fromMap(metadata.getAnnotationAttributes(DubboComponentScan<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>()))</span>;</span><br><span class="line">        String[] basePackages = attributes.getStringArray(<span class="string">"basePackages"</span>);</span><br><span class="line">        Class&lt;?&gt;[] basePackageClasses = attributes.getClassArray(<span class="string">"basePackageClasses"</span>);</span><br><span class="line">        String[] value = attributes.getStringArray(<span class="string">"value"</span>);</span><br><span class="line">        Set&lt;String&gt; packagesToScan = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;(Arrays.asList(value)); <span class="comment">// Appends value array attributes</span></span><br><span class="line">        packagesToScan.addAll(Arrays.asList(basePackages));</span><br><span class="line">        <span class="keyword">for</span> (Class&lt;?&gt; basePackageClass : basePackageClasses) &#123;</span><br><span class="line">            packagesToScan.add(ClassUtils.getPackageName(basePackageClass));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (packagesToScan.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.singleton(ClassUtils.getPackageName(metadata.getClassName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> packagesToScan;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceAnnotationBeanPostProcessor</span><span class="params">(Set&lt;String&gt; packagesToScan, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 生成一个RootBeanDefinition，对应的beanClass为ServiceAnnotationBeanPostProcessor.class</span></span><br><span class="line">        BeanDefinitionBuilder builder = rootBeanDefinition(ServiceAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 将包路径作为在构造ServiceAnnotationBeanPostProcessor时调用构造方法时的传入参数</span></span><br><span class="line">        builder.addConstructorArgValue(packagesToScan);</span><br><span class="line">        builder.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);</span><br><span class="line">        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line">        BeanDefinitionReaderUtils.registerWithGeneratedName(beanDefinition, registry);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerReferenceAnnotationBeanPostProcessor</span><span class="params">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注册一个ReferenceAnnotationBeanPostProcessor做为bean，ReferenceAnnotationBeanPostProcessor是一个BeanPostProcessor</span></span><br><span class="line">        BeanRegistrar.registerInfrastructureBean(registry, ReferenceAnnotationBeanPostProcessor.BEAN_NAME, ReferenceAnnotationBeanPostProcessor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../../../../images/Cloud/Dubbo/@Service注解处理流程.png" alt></p><p><strong><code>ServiceAnnotationBeanPostProcessor</code></strong>后置处理器主要作用是通过<strong><code>DubboClassPathBeanDefinitionScanner</code></strong>扫描被Dubbo的<strong><code>@Service</code>注解</strong>标注的类，首先将这些被<strong><code>@Service</code>注解</strong>标注的类注册到Spring容器中，然后解析<strong><code>@Service</code>注解</strong>上<strong>服务参数信息</strong>，针对<strong>原始<code>Bean</code></strong>额外生成一个类型为<strong><code>ServiceBean</code></strong>名称为<strong><code>ServiceBean:</code>实际类全限定名<code>:version:group</code></strong>的Bean对象，且在构建<strong><code>ServiceBean</code></strong>时<strong>将Spring中对应的Bean赋值</strong>给<strong><code>ServiceBean</code></strong>的<strong><code>ref</code></strong>属性，以及实际的接口等信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceAnnotationBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">BeanDefinitionRegistryPostProcessor</span>, <span class="title">EnvironmentAware</span>, <span class="title">ResourceLoaderAware</span>, <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postProcessBeanDefinitionRegistry</span><span class="params">(BeanDefinitionRegistry registry)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Set&lt;String&gt; resolvedPackagesToScan = resolvePackagesToScan(packagesToScan);</span><br><span class="line">        <span class="keyword">if</span> (!CollectionUtils.isEmpty(resolvedPackagesToScan)) &#123;</span><br><span class="line">            registerServiceBeans(resolvedPackagesToScan, registry); <span class="comment">// 扫描包，进行Bean注册</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceBeans</span><span class="params">(Set&lt;String&gt; packagesToScan, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line">        DubboClassPathBeanDefinitionScanner scanner = <span class="keyword">new</span> DubboClassPathBeanDefinitionScanner(registry, environment, resourceLoader);</span><br><span class="line">        BeanNameGenerator beanNameGenerator = resolveBeanNameGenerator(registry);</span><br><span class="line">        scanner.setBeanNameGenerator(beanNameGenerator);</span><br><span class="line">        scanner.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(Service<span class="class">.<span class="keyword">class</span>))</span>; <span class="comment">// 扫描被Service注解标注的类</span></span><br><span class="line">        scanner.addIncludeFilter(<span class="keyword">new</span> AnnotationTypeFilter(com.alibaba.dubbo.config.annotation.Service<span class="class">.<span class="keyword">class</span>))</span>;</span><br><span class="line">        <span class="keyword">for</span> (String packageToScan : packagesToScan) &#123;</span><br><span class="line">            scanner.scan(packageToScan); <span class="comment">// 扫描Dubbo自定义的@Service注解</span></span><br><span class="line">            <span class="comment">// 查找被@Service注解的类的BeanDefinition，无论该类是否被@ComponentScan注解标注</span></span><br><span class="line">            Set&lt;BeanDefinitionHolder&gt; beanDefinitionHolders = findServiceBeanDefinitionHolders(scanner, packageToScan, registry, beanNameGenerator);</span><br><span class="line">            <span class="keyword">if</span> (!CollectionUtils.isEmpty(beanDefinitionHolders)) &#123;</span><br><span class="line">                <span class="keyword">for</span> (BeanDefinitionHolder beanDefinitionHolder : beanDefinitionHolders) &#123;</span><br><span class="line">                    registerServiceBean(beanDefinitionHolder, registry, scanner); <span class="comment">// 扫描到BeanDefinition开始处理它</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerServiceBean</span><span class="params">(BeanDefinitionHolder beanDefinitionHolder, BeanDefinitionRegistry registry, DubboClassPathBeanDefinitionScanner scanner)</span> </span>&#123;</span><br><span class="line">        Class&lt;?&gt; beanClass = resolveClass(beanDefinitionHolder); <span class="comment">// 服务实现类</span></span><br><span class="line">        Annotation service = findServiceAnnotation(beanClass); <span class="comment">// @Service注解</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * The &#123;<span class="doctag">@link</span> AnnotationAttributes&#125; of <span class="doctag">@Service</span> annotation</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        AnnotationAttributes serviceAnnotationAttributes = getAnnotationAttributes(service, <span class="keyword">false</span>, <span class="keyword">false</span>); <span class="comment">// @Service注解上的信息</span></span><br><span class="line">        Class&lt;?&gt; interfaceClass = resolveServiceInterfaceClass(serviceAnnotationAttributes, beanClass); <span class="comment">// 服务实现类对应的接口</span></span><br><span class="line">        <span class="comment">// 服务实现类对应的bean的名字，比如：demoServiceImpl</span></span><br><span class="line">        String annotatedServiceBeanName = beanDefinitionHolder.getBeanName();</span><br><span class="line">        <span class="comment">// 生成一个ServiceBean</span></span><br><span class="line">        AbstractBeanDefinition serviceBeanDefinition = buildServiceBeanDefinition(service, serviceAnnotationAttributes, interfaceClass, annotatedServiceBeanName);</span><br><span class="line">        String beanName = generateServiceBeanName(serviceAnnotationAttributes, interfaceClass); <span class="comment">// ServiceBean Bean name</span></span><br><span class="line">        <span class="keyword">if</span> (scanner.checkCandidate(beanName, serviceBeanDefinition)) &#123; <span class="comment">// check duplicated candidate bean</span></span><br><span class="line">            <span class="comment">// 把ServiceBean注册进去，对应的beanName为ServiceBean:org.apache.dubbo.demo.DemoService</span></span><br><span class="line">            registry.registerBeanDefinition(beanName, serviceBeanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> AbstractBeanDefinition <span class="title">buildServiceBeanDefinition</span><span class="params">(Annotation serviceAnnotation, AnnotationAttributes serviceAnnotationAttributes, Class&lt;?&gt; interfaceClass, String annotatedServiceBeanName)</span> </span>&#123;</span><br><span class="line">        BeanDefinitionBuilder builder = rootBeanDefinition(ServiceBean<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">// 生成一个ServiceBean对应的BeanDefinition</span></span><br><span class="line">        AbstractBeanDefinition beanDefinition = builder.getBeanDefinition();</span><br><span class="line">        MutablePropertyValues propertyValues = beanDefinition.getPropertyValues();</span><br><span class="line">        String[] ignoreAttributeNames = of(<span class="string">"provider"</span>, <span class="string">"monitor"</span>, <span class="string">"application"</span>, <span class="string">"module"</span>, <span class="string">"registry"</span>, <span class="string">"protocol"</span>, <span class="string">"interface"</span>, <span class="string">"interfaceName"</span>, <span class="string">"parameters"</span>);</span><br><span class="line">        <span class="comment">// 把serviceAnnotation中的参数值赋值给ServiceBean的属性</span></span><br><span class="line">        propertyValues.addPropertyValues(<span class="keyword">new</span> AnnotationPropertyValuesAdapter(serviceAnnotation, environment, ignoreAttributeNames));</span><br><span class="line">        <span class="comment">// ref属性赋值为另外一个bean, 对应的就是被@Service注解的服务实现类对应的bean</span></span><br><span class="line">        addPropertyReference(builder, <span class="string">"ref"</span>, annotatedServiceBeanName);</span><br><span class="line">        builder.addPropertyValue(<span class="string">"interface"</span>, interfaceClass.getName());</span><br><span class="line">        builder.addPropertyValue(<span class="string">"parameters"</span>, convertParameters(serviceAnnotationAttributes.getStringArray(<span class="string">"parameters"</span>)));</span><br><span class="line">        <span class="comment">// 配置了methods属性，则给ServiceBean对应的methods属性赋值</span></span><br><span class="line">        List&lt;MethodConfig&gt; methodConfigs = convertMethodConfigs(serviceAnnotationAttributes.get(<span class="string">"methods"</span>));</span><br><span class="line">        <span class="keyword">if</span> (!methodConfigs.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">"methods"</span>, methodConfigs);</span><br><span class="line">        &#125;</span><br><span class="line">        String providerConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">"provider"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(providerConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">"provider"</span>, providerConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        String monitorConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">"monitor"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(monitorConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">"monitor"</span>, monitorConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        String applicationConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">"application"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(applicationConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">"application"</span>, applicationConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        String moduleConfigBeanName = serviceAnnotationAttributes.getString(<span class="string">"module"</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(moduleConfigBeanName)) &#123;</span><br><span class="line">            addPropertyReference(builder, <span class="string">"module"</span>, moduleConfigBeanName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取注解上配置的注册中心的beanName</span></span><br><span class="line">        String[] registryConfigBeanNames = serviceAnnotationAttributes.getStringArray(<span class="string">"registry"</span>);</span><br><span class="line">        List&lt;RuntimeBeanReference&gt; registryRuntimeBeanReferences = toRuntimeBeanReferences(registryConfigBeanNames);</span><br><span class="line">        <span class="keyword">if</span> (!registryRuntimeBeanReferences.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">"registries"</span>, registryRuntimeBeanReferences);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] protocolConfigBeanNames = serviceAnnotationAttributes.getStringArray(<span class="string">"protocol"</span>);</span><br><span class="line">        List&lt;RuntimeBeanReference&gt; protocolRuntimeBeanReferences = toRuntimeBeanReferences(protocolConfigBeanNames);</span><br><span class="line">        <span class="keyword">if</span> (!protocolRuntimeBeanReferences.isEmpty()) &#123;</span><br><span class="line">            builder.addPropertyValue(<span class="string">"protocols"</span>, protocolRuntimeBeanReferences);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.getBeanDefinition();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ManagedList&lt;RuntimeBeanReference&gt; <span class="title">toRuntimeBeanReferences</span><span class="params">(String... beanNames)</span> </span>&#123;</span><br><span class="line">        ManagedList&lt;RuntimeBeanReference&gt; runtimeBeanReferences = <span class="keyword">new</span> ManagedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (!ObjectUtils.isEmpty(beanNames)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">                String resolvedBeanName = environment.resolvePlaceholders(beanName);</span><br><span class="line">                runtimeBeanReferences.add(<span class="keyword">new</span> RuntimeBeanReference(resolvedBeanName));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> runtimeBeanReferences;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">generateServiceBeanName</span><span class="params">(AnnotationAttributes serviceAnnotationAttributes, Class&lt;?&gt; interfaceClass)</span> </span>&#123;</span><br><span class="line">        ServiceBeanNameBuilder builder = create(interfaceClass, environment)</span><br><span class="line">            .group(serviceAnnotationAttributes.getString(<span class="string">"group"</span>))</span><br><span class="line">            .version(serviceAnnotationAttributes.getString(<span class="string">"version"</span>));</span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Annotation <span class="title">findServiceAnnotation</span><span class="params">(Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">        Annotation service = findMergedAnnotation(beanClass, Service<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (service == <span class="keyword">null</span>) &#123;</span><br><span class="line">            service = findMergedAnnotation(beanClass, com.alibaba.dubbo.config.annotation.Service<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> service;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过<strong><code>ReferenceAnnotationBeanPostProcessor</code></strong>后置处理器处理<strong><code>@Reference</code></strong>注解，在该后置处理器的构造方法中调用了超类<strong><code>AnnotationInjectedBeanPostProcessor</code></strong>的构造方法传入了<strong>需要处理的注解类型</strong>。而<strong><code>AnnotationInjectedBeanPostProcessor</code></strong>又是<strong><code>InstantiationAwareBeanPostProcessorAdapter</code></strong>的子类，在属性赋值阶段会调用其<strong><code>postProcessPropertyValues</code></strong>方法，在该方法中通过调用<strong><code>findInjectionMetadata</code></strong>先从缓存中获取，获取不到再通过<strong><code>buildAnnotatedMetadata</code></strong>方法中调用<strong><code>findFieldAnnotationMetadata</code></strong>和<strong><code>findAnnotatedMethodMetadata</code></strong>方法遍历<strong>筛选</strong>出该BeanClass中的所有被<strong><code>@Reference</code>注解标注的属性和方法</strong>，将其分别封装到<strong><code>AnnotatedFieldElement</code></strong>和<strong><code>AnnotatedMethodElement</code></strong>中。</p><p>再将所有的信息封装到<strong><code>InjectionMetadata</code></strong>的子类<strong><code>AnnotatedInjectionMetadata</code></strong>中，然后调用<strong><code>InjectionMetadata</code></strong>的<strong><code>inject</code></strong>方法完成属性的注入，该方法中会遍历调用<strong><code>AnnotatedFieldElement</code></strong>和<strong><code>AnnotatedMethodElement</code></strong>中的<strong><code>inject</code></strong>方法，然后调用<strong><code>getInjectedObject</code></strong>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">AnnotationInjectedBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReferenceAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Reference<span class="class">.<span class="keyword">class</span>, <span class="title">com</span>.<span class="title">alibaba</span>.<span class="title">dubbo</span>.<span class="title">config</span>.<span class="title">annotation</span>.<span class="title">Reference</span>.<span class="title">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationInjectedBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span> <span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span>, <span class="title">BeanClassLoaderAware</span>, <span class="title">EnvironmentAware</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AnnotationInjectedBeanPostProcessor</span><span class="params">(Class&lt;? extends Annotation&gt;... annotationTypes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.annotationTypes = annotationTypes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> <span class="keyword">throws</span> BeanCreationException </span>&#123;</span><br><span class="line">        InjectionMetadata metadata = findInjectionMetadata(beanName, bean.getClass(), pvs); <span class="comment">// 寻找需要注入的属性即被@Reference标注的Field</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            metadata.inject(bean, beanName, pvs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanCreationException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">"Injection of @"</span> + getAnnotationType().getSimpleName() + <span class="string">" dependencies is failed"</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pvs;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> InjectionMetadata <span class="title">findInjectionMetadata</span><span class="params">(String beanName, Class&lt;?&gt; clazz, PropertyValues pvs)</span> </span>&#123;</span><br><span class="line">        String cacheKey = (StringUtils.hasLength(beanName) ? beanName : clazz.getName());</span><br><span class="line">        AnnotationInjectedBeanPostProcessor.AnnotatedInjectionMetadata metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>.injectionMetadataCache) &#123;</span><br><span class="line">                metadata = <span class="keyword">this</span>.injectionMetadataCache.get(cacheKey);</span><br><span class="line">                <span class="keyword">if</span> (InjectionMetadata.needsRefresh(metadata, clazz)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (metadata != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        metadata.clear(pvs);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        metadata = buildAnnotatedMetadata(clazz);</span><br><span class="line">                        <span class="keyword">this</span>.injectionMetadataCache.put(cacheKey, metadata);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (NoClassDefFoundError err) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to introspect object class ["</span> + clazz.getName() + <span class="string">"] for annotation metadata: could not find class that it depends on"</span>, err);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> metadata;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> AnnotationInjectedBeanPostProcessor.<span class="function">AnnotatedInjectionMetadata <span class="title">buildAnnotatedMetadata</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; beanClass)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取beanClass中Filed上有@Reference注解Field列表</span></span><br><span class="line">        Collection&lt;AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement&gt; fieldElements = findFieldAnnotationMetadata(beanClass);</span><br><span class="line">        <span class="comment">// 获取beanClass中方法上有@Reference注解方法列表</span></span><br><span class="line">        Collection&lt;AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement&gt; methodElements = findAnnotatedMethodMetadata(beanClass);</span><br><span class="line">        <span class="comment">// 返回的是Dubbo定义的AnnotatedInjectionMetadata，接下来就会使用这个类去进行属性注入</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AnnotationInjectedBeanPostProcessor.AnnotatedInjectionMetadata(beanClass, fieldElements, methodElements);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement&gt; findFieldAnnotationMetadata(<span class="keyword">final</span> Class&lt;?&gt; beanClass) &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;AnnotationInjectedBeanPostProcessor.AnnotatedFieldElement&gt;();</span><br><span class="line">        ReflectionUtils.doWithFields(beanClass, field -&gt; &#123; <span class="comment">// 遍历beanClass的所有属性</span></span><br><span class="line">            <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; annotationType : getAnnotationTypes()) &#123; <span class="comment">// 遍历注解列表：Reference.class, com.alibaba.dubbo.config.annotation.Reference.class</span></span><br><span class="line">                AnnotationAttributes attributes = getMergedAttributes(field, annotationType, getEnvironment(), <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (attributes != <span class="keyword">null</span>) &#123; <span class="comment">// 若该属性上目标注解属性存在</span></span><br><span class="line">                    <span class="keyword">if</span> (Modifier.isStatic(field.getModifiers())) &#123;</span><br><span class="line">                        <span class="keyword">return</span>; <span class="comment">// 若为static方法直接跳过</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    elements.add(<span class="keyword">new</span> AnnotatedFieldElement(field, attributes));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement&gt; findAnnotatedMethodMetadata(<span class="keyword">final</span> Class&lt;?&gt; beanClass) &#123;</span><br><span class="line">        <span class="keyword">final</span> List&lt;AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement&gt; elements = <span class="keyword">new</span> LinkedList&lt;AnnotationInjectedBeanPostProcessor.AnnotatedMethodElement&gt;();</span><br><span class="line">        ReflectionUtils.doWithMethods(beanClass, method -&gt; &#123;</span><br><span class="line">            Method bridgedMethod = findBridgedMethod(method);</span><br><span class="line">            <span class="keyword">if</span> (!isVisibilityBridgeMethodPair(method, bridgedMethod)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;? extends Annotation&gt; annotationType : getAnnotationTypes()) &#123;</span><br><span class="line">                AnnotationAttributes attributes = getMergedAttributes(bridgedMethod, annotationType, getEnvironment(), <span class="keyword">true</span>);</span><br><span class="line">                <span class="keyword">if</span> (attributes != <span class="keyword">null</span> &amp;&amp; method.equals(ClassUtils.getMostSpecificMethod(method, beanClass))) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (Modifier.isStatic(method.getModifiers())) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 找到set方法所对应的属性</span></span><br><span class="line">                    PropertyDescriptor pd = BeanUtils.findPropertyForMethod(bridgedMethod, beanClass);</span><br><span class="line">                    elements.add(<span class="keyword">new</span> AnnotatedMethodElement(method, pd, attributes));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">getInjectedObject</span><span class="params">(AnnotationAttributes attributes, Object bean, String beanName, Class&lt;?&gt; injectedType, InjectionMetadata.InjectedElement injectedElement)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 哪个Service应用了哪个类型的服务，通过什么方式引入的</span></span><br><span class="line">        String cacheKey = buildInjectedObjectCacheKey(attributes, bean, beanName, injectedType, injectedElement);</span><br><span class="line">        <span class="comment">// cacheKey很鸡肋，属性名不一样的时候，cacheKey不一样，导致不能缓存， 在一个Service中@Reference两次同一个服务缓存不到</span></span><br><span class="line">        Object injectedObject = injectedObjectsCache.get(cacheKey);</span><br><span class="line">        <span class="keyword">if</span> (injectedObject == <span class="keyword">null</span>) &#123;</span><br><span class="line">            injectedObject = doGetInjectedBean(attributes, bean, beanName, injectedType, injectedElement); <span class="comment">// 生成Bean</span></span><br><span class="line">            injectedObjectsCache.putIfAbsent(cacheKey, injectedObject);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> injectedObject;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedMethodElement</span> <span class="keyword">extends</span> <span class="title">InjectionMetadata</span>.<span class="title">InjectedElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Method method;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnnotationAttributes attributes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Object object;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AnnotatedMethodElement</span><span class="params">(Method method, PropertyDescriptor pd, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(method, pd);</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">        <span class="keyword">this</span>.attributes = attributes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object bean, String beanName, PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123; <span class="comment">// set方法对应的属性的类型</span></span><br><span class="line">        Class&lt;?&gt; injectedType = pd.getPropertyType();</span><br><span class="line">        <span class="comment">// 从Spring容器中获取一个Bean（注意，这个方法内部会生成Bean而且会缓存，就像Spring中的getBean一样）</span></span><br><span class="line">        Object injectedObject = getInjectedObject(attributes, bean, beanName, injectedType, <span class="keyword">this</span>);</span><br><span class="line">        ReflectionUtils.makeAccessible(method);</span><br><span class="line">        method.invoke(bean, injectedObject);  <span class="comment">// 调用set方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedFieldElement</span> <span class="keyword">extends</span> <span class="title">InjectionMetadata</span>.<span class="title">InjectedElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Field field;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AnnotationAttributes attributes;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> Object bean;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AnnotatedFieldElement</span><span class="params">(Field field, AnnotationAttributes attributes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(field, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.field = field;</span><br><span class="line">        <span class="keyword">this</span>.attributes = attributes;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">inject</span><span class="params">(Object bean, String beanName, PropertyValues pvs)</span> <span class="keyword">throws</span> Throwable </span>&#123;<span class="comment">// 给bean对象进行属性赋值</span></span><br><span class="line">        Class&lt;?&gt; injectedType = field.getType();</span><br><span class="line">        Object injectedObject = getInjectedObject(attributes, bean, beanName, injectedType, <span class="keyword">this</span>); <span class="comment">// 获取对象，然后进行注入</span></span><br><span class="line">        ReflectionUtils.makeAccessible(field);</span><br><span class="line">        field.set(bean, injectedObject); <span class="comment">// 字段赋值，injectedObject就是值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终调用<strong><code>ReferenceAnnotationBeanPostProcessor</code></strong>的<strong><code>doGetInjectedBean</code></strong>方法，首先构建一个<strong><code>ReferenceBean</code></strong>对象并对其<strong>属性赋值</strong>等操作，然后将其注册到Spring容器中，若容器中已存在则注册一个别名，最后通过<strong><code>getOrCreateProxy</code></strong>方法判断当前调用的Dubbo服务是<strong>本地服务</strong>还是<strong>远程服务</strong>，若是<strong>本地服务</strong>则通过<strong><code>newProxyInstance</code></strong>创建代理对象，若是<strong>远程服务</strong>则调用<strong><code>ReferenceBean</code></strong>的<strong><code>get</code></strong>方法创建代理对象。</p><p><strong><code>ReferenceBean</code></strong>对象的构建及其<strong>属性赋值</strong>是通过<strong><code>AnnotatedInterfaceConfigBeanBuilder</code></strong>的<strong><code>build</code></strong>方法来完成的，将各种配置项包括<strong><code>@Reference</code>注解</strong>中的配置项赋值给<strong><code>ReferenceBean</code></strong>对应属性，然后调用<strong><code>ReferenceBean</code></strong>的<strong><code>afterPropertiesSet</code></strong>方法完成属性进一步赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">AnnotationInjectedBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span>, <span class="title">ApplicationListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">buildInjectedObjectCacheKey</span><span class="params">(AnnotationAttributes attributes, Object bean, String beanName, Class&lt;?&gt; injectedType, InjectionMetadata.InjectedElement injectedElement)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> buildReferencedBeanName(attributes, injectedType) + <span class="string">"#source="</span> + (injectedElement.getMember()) + <span class="string">"#attributes="</span> + AnnotationUtils.resolvePlaceholders(attributes, getEnvironment());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">doGetInjectedBean</span><span class="params">(AnnotationAttributes attributes, Object bean, String beanName, Class&lt;?&gt; injectedType, InjectionMetadata.InjectedElement injectedElement)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 按ServiceBean的beanName生成规则来生成referencedBeanName，规则为ServiceBean:interfaceClassName:version:group</span></span><br><span class="line">        String referencedBeanName = buildReferencedBeanName(attributes, injectedType);</span><br><span class="line">        <span class="comment">// @Reference(methods=[Lorg.apache.dubbo.config.annotation.Method;@39b43d60) org.apache.dubbo.demo.DemoService</span></span><br><span class="line">        String referenceBeanName = getReferenceBeanName(attributes, injectedType); <span class="comment">// 根据@Reference注解的信息生成referenceBeanName</span></span><br><span class="line">        ReferenceBean referenceBean = buildReferenceBeanIfAbsent(referenceBeanName, attributes, injectedType); <span class="comment">// 生成一个ReferenceBean对象</span></span><br><span class="line">        registerReferenceBean(referencedBeanName, referenceBean, attributes, injectedType); <span class="comment">// 把referenceBean添加到Spring容器中去</span></span><br><span class="line">        cacheInjectedReferenceBean(referenceBean, injectedElement);</span><br><span class="line">        <span class="comment">// 创建一个代理对象，Service中的属性被注入的就是这个代理对象，内部会调用referenceBean.get();</span></span><br><span class="line">        <span class="keyword">return</span> getOrCreateProxy(referencedBeanName, referenceBeanName, referenceBean, injectedType);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> ReferenceBean <span class="title">buildReferenceBeanIfAbsent</span><span class="params">(String referenceBeanName, AnnotationAttributes attributes, Class&lt;?&gt; referencedType)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ReferenceBean&lt;?&gt; referenceBean = referenceBeanCache.get(referenceBeanName);</span><br><span class="line">        <span class="keyword">if</span> (referenceBean == <span class="keyword">null</span>) &#123;<span class="comment">// 生成了一个ReferenceBean对象，attributes是@Reference注解的参数值</span></span><br><span class="line">            ReferenceBeanBuilder beanBuilder = ReferenceBeanBuilder.create(attributes, applicationContext).interfaceClass(referencedType);</span><br><span class="line">            referenceBean = beanBuilder.build(); <span class="comment">// 构建ReferenceBean对象并对属性赋值</span></span><br><span class="line">            referenceBeanCache.put(referenceBeanName, referenceBean);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!referencedType.isAssignableFrom(referenceBean.getInterfaceClass())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"reference bean name "</span> + referenceBeanName + <span class="string">" has been duplicated, but interfaceClass "</span> + referenceBean.getInterfaceClass().getName() + <span class="string">" cannot be assigned to "</span> + referencedType.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> referenceBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">registerReferenceBean</span><span class="params">(String referencedBeanName, ReferenceBean referenceBean, AnnotationAttributes attributes, Class&lt;?&gt; interfaceClass)</span> </span>&#123;</span><br><span class="line">        ConfigurableListableBeanFactory beanFactory = getBeanFactory();</span><br><span class="line">        String beanName = getReferenceBeanName(attributes, interfaceClass);  <span class="comment">// 就是referenceBeanName</span></span><br><span class="line">        <span class="comment">// 当前Spring容器中是否存在referencedBeanName</span></span><br><span class="line">        <span class="keyword">if</span> (existsServiceBean(referencedBeanName)) &#123; <span class="comment">// If @Service bean is local one</span></span><br><span class="line">            AbstractBeanDefinition beanDefinition = (AbstractBeanDefinition) beanFactory.getBeanDefinition(referencedBeanName);</span><br><span class="line">            RuntimeBeanReference runtimeBeanReference = (RuntimeBeanReference) beanDefinition.getPropertyValues().get(<span class="string">"ref"</span>); <span class="comment">// ServiceBean --- ref</span></span><br><span class="line">            String serviceBeanName = runtimeBeanReference.getBeanName(); <span class="comment">// DemoServiceImpl对应的beanName</span></span><br><span class="line">            beanFactory.registerAlias(serviceBeanName, beanName); <span class="comment">// DemoServiceImpl多了一个别名，比如 demoServiceImpl和</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// Remote @Service Bean</span></span><br><span class="line">            <span class="keyword">if</span> (!beanFactory.containsBean(beanName)) &#123;</span><br><span class="line">                beanFactory.registerSingleton(beanName, referenceBean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getOrCreateProxy</span><span class="params">(String referencedBeanName, String referenceBeanName, ReferenceBean referenceBean, Class&lt;?&gt; serviceInterfaceType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (existsServiceBean(referencedBeanName)) &#123; <span class="comment">// If the local @Service Bean exists, build a proxy of ReferenceBean</span></span><br><span class="line">            <span class="keyword">return</span> newProxyInstance(getClassLoader(), <span class="keyword">new</span> Class[]&#123;serviceInterfaceType&#125;, wrapInvocationHandler(referenceBeanName, referenceBean));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// ReferenceBean should be initialized and get immediately</span></span><br><span class="line">            <span class="keyword">return</span> referenceBean.get();  <span class="comment">// 重点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotatedInterfaceConfigBeanBuilder</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">AbstractInterfaceConfig</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> C <span class="title">build</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        checkDependencies();</span><br><span class="line">        C configBean = doBuild(); <span class="comment">// 创建一个ReferenceBean对象</span></span><br><span class="line">        configureBean(configBean); <span class="comment">// 给ReferenceBean对象的属性赋值</span></span><br><span class="line">        <span class="keyword">return</span> configBean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configureBean</span><span class="params">(C configBean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        preConfigureBean(attributes, configBean); <span class="comment">// 把@Reference注解中的配置项赋值给configBean</span></span><br><span class="line">        configureRegistryConfigs(configBean); <span class="comment">// 把注册中心配置项赋值给configBean</span></span><br><span class="line">        configureMonitorConfig(configBean);<span class="comment">// 把监控中心配置项赋值给configBean</span></span><br><span class="line">        configureApplicationConfig(configBean);<span class="comment">// 把应用配置项赋值给configBean</span></span><br><span class="line">        configureModuleConfig(configBean);</span><br><span class="line">        <span class="comment">// 设置applicationContext、interfaceName、consumer、methods属性，并调用ReferenceBean对象的afterPropertiesSet方法</span></span><br><span class="line">        postConfigureBean(attributes, configBean);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureRegistryConfigs</span><span class="params">(C configBean)</span> </span>&#123;</span><br><span class="line">        String[] registryConfigBeanIds = resolveRegistryConfigBeanNames(attributes); <span class="comment">// 解析@Refrence注解中配置的registry属性</span></span><br><span class="line">        <span class="comment">// 获得注册中心对应的RegistryConfig对象</span></span><br><span class="line">        List&lt;RegistryConfig&gt; registryConfigs = getBeans(applicationContext, registryConfigBeanIds, RegistryConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configBean.setRegistries(registryConfigs); <span class="comment">// 设置registryConfigs属性值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureMonitorConfig</span><span class="params">(C configBean)</span> </span>&#123;</span><br><span class="line">        String monitorBeanName = resolveMonitorConfigBeanName(attributes);</span><br><span class="line">        <span class="comment">// 从Spring容器获取MonitorConfig的bean对象</span></span><br><span class="line">        MonitorConfig monitorConfig = getOptionalBean(applicationContext, monitorBeanName, MonitorConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configBean.setMonitor(monitorConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureApplicationConfig</span><span class="params">(C configBean)</span> </span>&#123;</span><br><span class="line">        String applicationConfigBeanName = resolveApplicationConfigBeanName(attributes);</span><br><span class="line">        ApplicationConfig applicationConfig = getOptionalBean(applicationContext, applicationConfigBeanName, ApplicationConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configBean.setApplication(applicationConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureModuleConfig</span><span class="params">(C configBean)</span> </span>&#123;</span><br><span class="line">        String moduleConfigBeanName = resolveModuleConfigBeanName(attributes);</span><br><span class="line">        ModuleConfig moduleConfig = getOptionalBean(applicationContext, moduleConfigBeanName, ModuleConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        configBean.setModule(moduleConfig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ReferenceBeanBuilder</span> <span class="keyword">extends</span> <span class="title">AnnotatedInterfaceConfigBeanBuilder</span>&lt;<span class="title">ReferenceBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> ReferenceBean <span class="title">doBuild</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferenceBean&lt;Object&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">preConfigureBean</span><span class="params">(AnnotationAttributes attributes, ReferenceBean referenceBean)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(interfaceClass, <span class="string">"The interface class must set first!"</span>);</span><br><span class="line">        DataBinder dataBinder = <span class="keyword">new</span> DataBinder(referenceBean);</span><br><span class="line">        dataBinder.registerCustomEditor(String.class, "filter", new StringTrimmerEditor(true));</span><br><span class="line">        dataBinder.registerCustomEditor(String.class, "listener", new StringTrimmerEditor(true));</span><br><span class="line">        <span class="comment">// 最终都会转变为Map设置到referenceBean中的parameters，@Reference(parameters = &#123;"text=123"&#125;)或@Reference(parameters = &#123;"text:123"&#125;)两种配置方式</span></span><br><span class="line">        dataBinder.registerCustomEditor(Map.class, "parameters", new PropertyEditorSupport() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAsText</span><span class="params">(String text)</span> <span class="keyword">throws</span> java.lang.IllegalArgumentException </span>&#123;</span><br><span class="line">                String content = StringUtils.trimAllWhitespace(text);  <span class="comment">// Trim all whitespace</span></span><br><span class="line">                <span class="keyword">if</span> (!StringUtils.hasText(content)) &#123; <span class="comment">// No content , ignore directly</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                content = StringUtils.replace(content, <span class="string">"="</span>, <span class="string">","</span>);<span class="comment">// replace "=" to ","</span></span><br><span class="line">                content = StringUtils.replace(content, <span class="string">":"</span>, <span class="string">","</span>); <span class="comment">// replace ":" to ","</span></span><br><span class="line">                Map&lt;String, String&gt; parameters = CollectionUtils.toStringMap(commaDelimitedListToStringArray(content));</span><br><span class="line">                setValue(parameters);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        dataBinder.bind(<span class="keyword">new</span> AnnotationPropertyValuesAdapter(attributes, applicationContext.getEnvironment(), IGNORE_FIELD_NAMES));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postConfigureBean</span><span class="params">(AnnotationAttributes attributes, ReferenceBean bean)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        bean.setApplicationContext(applicationContext);</span><br><span class="line">        configureInterface(attributes, bean);</span><br><span class="line">        configureConsumerConfig(attributes, bean);</span><br><span class="line">        configureMethodConfig(attributes, bean);</span><br><span class="line">        bean.afterPropertiesSet();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureInterface</span><span class="params">(AnnotationAttributes attributes, ReferenceBean referenceBean)</span> </span>&#123;</span><br><span class="line">        Boolean generic = getAttribute(attributes, <span class="string">"generic"</span>);</span><br><span class="line">        <span class="keyword">if</span> (generic != <span class="keyword">null</span> &amp;&amp; generic) &#123; <span class="comment">// 泛化接口处理</span></span><br><span class="line">            String interfaceClassName = getAttribute(attributes, <span class="string">"interfaceName"</span>);</span><br><span class="line">            referenceBean.setInterface(interfaceClassName);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Class&lt;?&gt; serviceInterfaceClass = resolveServiceInterfaceClass(attributes, interfaceClass);</span><br><span class="line">        referenceBean.setInterface(serviceInterfaceClass);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureConsumerConfig</span><span class="params">(AnnotationAttributes attributes, ReferenceBean&lt;?&gt; referenceBean)</span> </span>&#123;</span><br><span class="line">        String consumerBeanName = getAttribute(attributes, <span class="string">"consumer"</span>);</span><br><span class="line">        ConsumerConfig consumerConfig = getOptionalBean(applicationContext, consumerBeanName, ConsumerConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        referenceBean.setConsumer(consumerConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">configureMethodConfig</span><span class="params">(AnnotationAttributes attributes, ReferenceBean&lt;?&gt; referenceBean)</span> </span>&#123;</span><br><span class="line">        Method[] methods = (Method[]) attributes.get(<span class="string">"methods"</span>);</span><br><span class="line">        List&lt;MethodConfig&gt; methodConfigs = MethodConfig.constructMethodConfig(methods);</span><br><span class="line">        <span class="keyword">if</span> (!methodConfigs.isEmpty()) &#123;</span><br><span class="line">            referenceBean.setMethods(methodConfigs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>ReferenceBean</code></strong>是<strong><code>ReferenceConfig</code></strong>的子类，首先通过<strong><code>checkAndUpdateSubConfigs</code></strong>检查和更新配置，首先通过<strong><code>completeCompoundConfigs</code></strong>方法拿<strong><code>consumer</code></strong>、<strong><code>module</code></strong>、<strong><code>application</code></strong>中配置的属性去<strong>填充<code>ReferenceConfig</code>相同属性</strong>，然后通过<strong><code>startConfigCenter</code></strong>方法若配置了配置中心则<strong>开启配置中心</strong>，然后从配置中心获取<strong>配置数据刷新</strong>所有<strong>除开<code>ServiceConfig</code>的<code>XxConfig</code>中的属性</strong>。</p><p>配置填充补全后在get方法中若<strong><code>ref</code></strong>为<strong><code>null</code></strong>，则调用<strong><code>init</code>初始化</strong>方法，首先<strong>将所有参数解析到<code>Map</code>中</strong>，根据Map中的参数通过<strong><code>Protocol</code></strong>创建具体的<strong><code>Invoker</code></strong>对象，然后通过<strong><code>ProxyFactory</code></strong>的<strong><code>getProxy</code></strong>方法给Invoker创建代理对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceConfig</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractReferenceConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkAndUpdateSubConfigs();</span><br><span class="line">        <span class="keyword">if</span> (destroyed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"The invoker of ReferenceConfig("</span> + url + <span class="string">") has already destroyed!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ref == <span class="keyword">null</span>) &#123;<span class="comment">// 入口</span></span><br><span class="line">            init();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ref;  <span class="comment">// Invoke代理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkAndUpdateSubConfigs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(interfaceName)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"&lt;dubbo:reference interface=\"\" /&gt; interface not allow null!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        completeCompoundConfigs(); <span class="comment">// 填充ReferenceConfig对象中的属性</span></span><br><span class="line">        startConfigCenter();  <span class="comment">// 开启配置中心，</span></span><br><span class="line">        checkDefault();  <span class="comment">// get consumer's global configuration</span></span><br><span class="line">        <span class="keyword">this</span>.refresh(); <span class="comment">// 刷新ReferenceConfig对象的属性值</span></span><br><span class="line">        <span class="keyword">if</span> (getGeneric() == <span class="keyword">null</span> &amp;&amp; getConsumer() != <span class="keyword">null</span>) &#123; <span class="comment">// 设置泛化</span></span><br><span class="line">            setGeneric(getConsumer().getGeneric());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">            interfaceClass = GenericService<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                interfaceClass = Class.forName(interfaceName, <span class="keyword">true</span>, Thread.currentThread().getContextClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e.getMessage(), e);</span><br><span class="line">            &#125;</span><br><span class="line">            checkInterfaceAndMethods(interfaceClass, methods);</span><br><span class="line">        &#125;</span><br><span class="line">        resolveFile();</span><br><span class="line">        checkApplication();</span><br><span class="line">        checkMetadataReport();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialized) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        checkStubAndLocal(interfaceClass);</span><br><span class="line">        checkMock(interfaceClass);</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        map.put(SIDE_KEY, CONSUMER_SIDE);</span><br><span class="line">        appendRuntimeParameters(map);</span><br><span class="line">        <span class="keyword">if</span> (!ProtocolUtils.isGeneric(getGeneric())) &#123;</span><br><span class="line">            String revision = Version.getVersion(interfaceClass, version);</span><br><span class="line">            <span class="keyword">if</span> (revision != <span class="keyword">null</span> &amp;&amp; revision.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(REVISION_KEY, revision);</span><br><span class="line">            &#125;</span><br><span class="line">            String[] methods = Wrapper.getWrapper(interfaceClass).getMethodNames();</span><br><span class="line">            <span class="keyword">if</span> (methods.length == <span class="number">0</span>) &#123;</span><br><span class="line">                map.put(METHODS_KEY, ANY_VALUE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                map.put(METHODS_KEY, StringUtils.join(<span class="keyword">new</span> HashSet&lt;String&gt;(Arrays.asList(methods)), COMMA_SEPARATOR));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(INTERFACE_KEY, interfaceName);</span><br><span class="line">        appendParameters(map, metrics);</span><br><span class="line">        appendParameters(map, application);</span><br><span class="line">        appendParameters(map, <span class="keyword">module</span>);</span><br><span class="line">        appendParameters(map, consumer);</span><br><span class="line">        appendParameters(map, <span class="keyword">this</span>);</span><br><span class="line">        Map&lt;String, Object&gt; attributes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(methods)) &#123;</span><br><span class="line">            attributes = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">            <span class="keyword">for</span> (MethodConfig methodConfig : methods) &#123;</span><br><span class="line">                appendParameters(map, methodConfig, methodConfig.getName());</span><br><span class="line">                String retryKey = methodConfig.getName() + <span class="string">".retry"</span>;</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(retryKey)) &#123;</span><br><span class="line">                    String retryValue = map.remove(retryKey);</span><br><span class="line">                    <span class="keyword">if</span> (<span class="string">"false"</span>.equals(retryValue)) &#123;</span><br><span class="line">                        map.put(methodConfig.getName() + <span class="string">".retries"</span>, <span class="string">"0"</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                attributes.put(methodConfig.getName(), convertMethodConfig2AsyncInfo(methodConfig));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String hostToRegistry = ConfigUtils.getSystemProperty(DUBBO_IP_TO_REGISTRY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(hostToRegistry)) &#123;</span><br><span class="line">            hostToRegistry = NetUtils.getLocalHost();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isInvalidLocalHost(hostToRegistry)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Specified invalid registry ip from property:"</span> + DUBBO_IP_TO_REGISTRY + <span class="string">", value:"</span> + hostToRegistry);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(REGISTER_IP_KEY, hostToRegistry);</span><br><span class="line">        ref = createProxy(map); <span class="comment">// 根据</span></span><br><span class="line">        String serviceKey = URL.buildKey(interfaceName, group, version);</span><br><span class="line">        ApplicationModel.initConsumerModel(serviceKey, buildConsumerModel(serviceKey, attributes));</span><br><span class="line">        initialized = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> T <span class="title">createProxy</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (shouldJvmRefer(map)) &#123; <span class="comment">// 若是本地调用</span></span><br><span class="line">            <span class="comment">// injvm://</span></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(LOCAL_PROTOCOL, LOCALHOST_VALUE, <span class="number">0</span>, interfaceClass.getName()).addParameters(map);</span><br><span class="line">            invoker = REF_PROTOCOL.refer(interfaceClass, url);</span><br><span class="line">            <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">                logger.info(<span class="string">"Using injvm service "</span> + interfaceClass.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 为什么会有urls，因为可以在@Reference的url属性中配置多个url，可以是点对点的服务地址，也可以是注册中心的地址</span></span><br><span class="line">            urls.clear(); <span class="comment">// reference retry init will add url to urls, lead to OOM</span></span><br><span class="line">            <span class="keyword">if</span> (url != <span class="keyword">null</span> &amp;&amp; url.length() &gt; <span class="number">0</span>) &#123;  <span class="comment">// @Reference中指定了url属性</span></span><br><span class="line">                String[] us = SEMICOLON_SPLIT_PATTERN.split(url); <span class="comment">// 用;号切分</span></span><br><span class="line">                <span class="keyword">if</span> (us != <span class="keyword">null</span> &amp;&amp; us.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String u : us) &#123;</span><br><span class="line">                        URL url = URL.valueOf(u);</span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isEmpty(url.getPath())) &#123;</span><br><span class="line">                            url = url.setPath(interfaceName);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123; <span class="comment">// 如果是注册中心地址，则在url中添加一个refer参数</span></span><br><span class="line">                            urls.add(url.addParameterAndEncoded(REFER_KEY, StringUtils.toQueryString(map))); <span class="comment">// map表示消费者端配置的参数</span></span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;<span class="comment">// 如果是服务地址，有可能url中配置了参数，map中表示的服务消费者消费服务时的参数，所以需要合并</span></span><br><span class="line">                            urls.add(ClusterUtils.mergeUrl(url, map));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// @Reference中的protocol属性表示使用哪个协议调用服务，如果不是本地调用协议injvm://，则把注册中心地址找出来，对于injvm://协议已经在之前的逻辑中就已经生成invoke了</span></span><br><span class="line">                <span class="keyword">if</span> (!LOCAL_PROTOCOL.equalsIgnoreCase(getProtocol())) &#123;</span><br><span class="line">                    checkRegistry();</span><br><span class="line">                    List&lt;URL&gt; us = loadRegistries(<span class="keyword">false</span>); <span class="comment">// 加载注册中心地址</span></span><br><span class="line">                    <span class="keyword">if</span> (CollectionUtils.isNotEmpty(us)) &#123;</span><br><span class="line">                        <span class="keyword">for</span> (URL u : us) &#123;</span><br><span class="line">                            URL monitorUrl = loadMonitor(u);</span><br><span class="line">                            <span class="keyword">if</span> (monitorUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">                                map.put(MONITOR_KEY, URL.encode(monitorUrl.toFullString()));</span><br><span class="line">                            &#125;</span><br><span class="line">                            urls.add(u.addParameterAndEncoded(REFER_KEY, StringUtils.toQueryString(map))); <span class="comment">// 对于注册中心地址都添加REFER_KEY</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (urls.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No such any registry to reference "</span> + interfaceName + <span class="string">" on the consumer "</span> + NetUtils.getLocalHost() + <span class="string">" use dubbo version "</span> + Version.getVersion() + <span class="string">", please config &lt;dubbo:registry address=\"...\" /&gt; to your spring config."</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (urls.size() == <span class="number">1</span>) &#123;  <span class="comment">// 如果只有一个url则直接refer得到一个invoker</span></span><br><span class="line">                <span class="comment">// RegistryProtocol.refer() 或者 DubboProtocol.refer()</span></span><br><span class="line">                invoker = REF_PROTOCOL.refer(interfaceClass, urls.get(<span class="number">0</span>));</span><br><span class="line">                <span class="comment">// MockClusterInvoker--&gt;FailoverClusterInvoker--&gt;RegistryDirectory</span></span><br><span class="line">                <span class="comment">// ---&gt;RegistryDirectory$InvokerDelegate--&gt;ListenerInvokerWrapper--&gt;ProtocolFilterWrapper$CallbackRegistrationInvoker--&gt;ConsumerContextFilter--&gt;FutureFilter--&gt;MonitorFilter--&gt;AsyncToSyncInvoker--&gt;DubboInvoker</span></span><br><span class="line">                <span class="comment">// ---&gt;RegistryDirectory$InvokerDelegate--&gt;ListenerInvokerWrapper--&gt;ProtocolFilterWrapper$CallbackRegistrationInvoker--&gt;ConsumerContextFilter--&gt;FutureFilter--&gt;MonitorFilter--&gt;AsyncToSyncInvoker--&gt;DubboInvoker</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 如果有多个url根据每个url，refer得到对应的invoker</span></span><br><span class="line">                <span class="comment">// 若这多个urls中存在注册中心url，则把所有invoker整合为RegistryAwareClusterInvoker，该Invoker在调用时，会查看所有Invoker中是否有默认的，如果有则使用默认的Invoker，如果没有，则使用第一个Invoker</span></span><br><span class="line">                <span class="comment">// 若这多个urls中不存在注册中心url，则把所有invoker整合为FailoverCluster</span></span><br><span class="line">                List&lt;Invoker&lt;?&gt;&gt; invokers = <span class="keyword">new</span> ArrayList&lt;Invoker&lt;?&gt;&gt;();</span><br><span class="line">                URL registryURL = <span class="keyword">null</span>; <span class="comment">// 用来记录urls中最后一个注册中心url</span></span><br><span class="line">                <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                    invokers.add(REF_PROTOCOL.refer(interfaceClass, url));</span><br><span class="line">                    <span class="keyword">if</span> (REGISTRY_PROTOCOL.equals(url.getProtocol())) &#123;</span><br><span class="line">                        registryURL = url; <span class="comment">// use last registry url</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (registryURL != <span class="keyword">null</span>) &#123; <span class="comment">// registry url is available 如果存在注册中心地址</span></span><br><span class="line">                    <span class="comment">// use RegistryAwareCluster only when register's CLUSTER is available</span></span><br><span class="line">                    URL u = registryURL.addParameter(CLUSTER_KEY, RegistryAwareCluster.NAME);</span><br><span class="line">                    <span class="comment">// StaticDirectory表示静态服务目录，里面的invokers是不会变的, 生成一个RegistryAwareCluster</span></span><br><span class="line">                    <span class="comment">// The invoker wrap relation would be: RegistryAwareClusterInvoker(StaticDirectory) -&gt; FailoverClusterInvoker(RegistryDirectory, will execute route) -&gt; Invoker</span></span><br><span class="line">                    invoker = CLUSTER.join(<span class="keyword">new</span> StaticDirectory(u, invokers));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">// not a registry url, must be direct invoke.</span></span><br><span class="line">                    <span class="comment">// 如果不存在注册中心地址, 生成一个FailoverClusterInvoker</span></span><br><span class="line">                    invoker = CLUSTER.join(<span class="keyword">new</span> StaticDirectory(invokers));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (shouldCheck() &amp;&amp; !invoker.isAvailable()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Failed to check the status of the service "</span> + interfaceName + <span class="string">". No provider available for the service "</span> + (group == <span class="keyword">null</span> ? <span class="string">""</span> : group + <span class="string">"/"</span>) + interfaceName + (version == <span class="keyword">null</span> ? <span class="string">""</span> : <span class="string">":"</span> + version) + <span class="string">" from the url "</span> + invoker.getUrl() + <span class="string">" to the consumer "</span> + NetUtils.getLocalHost() + <span class="string">" use dubbo version "</span> + Version.getVersion());</span><br><span class="line">        &#125;</span><br><span class="line">        MetadataReportService metadataReportService = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> ((metadataReportService = getMetadataReportService()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            URL consumerURL = <span class="keyword">new</span> URL(CONSUMER_PROTOCOL, map.remove(REGISTER_IP_KEY), <span class="number">0</span>, map.get(INTERFACE_KEY), map);</span><br><span class="line">            metadataReportService.publishConsumer(consumerURL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (T) PROXY_FACTORY.getProxy(invoker); <span class="comment">// create service proxy</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInterfaceConfig</span> <span class="keyword">extends</span> <span class="title">AbstractMethodConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> List&lt;URL&gt; <span class="title">loadRegistries</span><span class="params">(<span class="keyword">boolean</span> provider)</span> </span>&#123;<span class="comment">// check &amp;&amp; override if necessary</span></span><br><span class="line">        List&lt;URL&gt; registryList = <span class="keyword">new</span> ArrayList&lt;URL&gt;();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(registries)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (RegistryConfig config : registries) &#123;</span><br><span class="line">                String address = config.getAddress();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(address)) &#123; <span class="comment">// 如果注册中心没有配地址，则地址为0.0.0.0</span></span><br><span class="line">                    address = ANYHOST_VALUE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (!RegistryConfig.NO_AVAILABLE.equalsIgnoreCase(address)) &#123; <span class="comment">// 如果注册中心的地址不是"N/A"</span></span><br><span class="line">                    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">                    appendParameters(map, application); <span class="comment">// 把application中的参数放入map中，注意，map中的key是没有prefix的</span></span><br><span class="line">                    appendParameters(map, config);  <span class="comment">// 把config中的参数放入map中，注意，map中的key是没有prefix的config是RegistryConfig，表示注册中心</span></span><br><span class="line">                    map.put(PATH_KEY, RegistryService<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>())</span>;<span class="comment">// 此处path值固定为RegistryService.class.getName()，因为现在是在加载注册中心</span></span><br><span class="line">                    appendRuntimeParameters(map); <span class="comment">// 把dubbo的版本信息和pid放入map中</span></span><br><span class="line">                    <span class="keyword">if</span> (!map.containsKey(PROTOCOL_KEY)) &#123; <span class="comment">// 如果map中如果没有protocol，那么默认为dubbo</span></span><br><span class="line">                        map.put(PROTOCOL_KEY, DUBBO_PROTOCOL);</span><br><span class="line">                    &#125;</span><br><span class="line">                    List&lt;URL&gt; urls = UrlUtils.parseURLs(address, map); <span class="comment">// 构造注册中心url，地址+参数</span></span><br><span class="line">                    <span class="keyword">for</span> (URL url : urls) &#123;</span><br><span class="line">                        url = URLBuilder.from(url).addParameter(REGISTRY_KEY, url.getProtocol()).setProtocol(REGISTRY_PROTOCOL).build();</span><br><span class="line">                        <span class="comment">// 到此为止，url的内容大概为：registry://127.0.0.1:2181/org.apache.dubbo.registry.RegistryService?application=dubbo-demo-annotation-provider&amp;dubbo=2.0.2&amp;pid=269936&amp;registry=zookeeper&amp;timestamp=1584886077813</span></span><br><span class="line">                        <span class="comment">// 该url表示：使用registry协议调用org.apache.dubbo.registry.RegistryService服务，参数为application=dubbo-demo-annotation-provider&amp;dubbo=2.0.2&amp;pid=269936&amp;registry=zookeeper&amp;timestamp=1584886077813</span></span><br><span class="line">                        <span class="comment">// 若是服务提供者，获取register的值，如果为false，表示该服务不注册到注册中心，若是服务消费者，获取subscribe的值，如果为false，表示该引入的服务不订阅注册中心中的数据</span></span><br><span class="line">                        <span class="keyword">if</span> ((provider &amp;&amp; url.getParameter(REGISTER_KEY, <span class="keyword">true</span>)) || (!provider &amp;&amp; url.getParameter(SUBSCRIBE_KEY, <span class="keyword">true</span>))) &#123;</span><br><span class="line">                            registryList.add(url);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> registryList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Dubbo与Spring的集成主要完成&lt;strong&gt;&lt;code&gt;propertie&lt;/code&gt;文件解析处理&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;@Service&lt;/code&gt;注解解析&lt;/strong&gt;、&lt;strong&gt;&lt;code&gt;@Reference&lt;/cod
      
    
    </summary>
    
      <category term="Cloud" scheme="https://yaoyinglong.github.io/categories/Cloud/"/>
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/categories/Cloud/Dubbo/"/>
    
    
      <category term="Dubbo" scheme="https://yaoyinglong.github.io/tags/Dubbo/"/>
    
  </entry>
  
</feed>
